#!/bin/bash

# ============================================================================
# NEXTFLOW MAIL SERVER MANAGEMENT SCRIPT
# ============================================================================
# M√¥ t·∫£: Script qu·∫£n l√Ω Stalwart Mail Server
# T√°c gi·∫£: NextFlow Team
# Phi√™n b·∫£n: 1.0
# C·∫≠p nh·∫≠t: 2025
# ============================================================================

# X·ª≠ l√Ω l·ªói nghi√™m ng·∫∑t
set -euo pipefail

# ƒê·ªãnh nghƒ©a th∆∞ m·ª•c
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
SCRIPTS_DIR="$PROJECT_ROOT/scripts"

# Import c√°c script ti·ªán √≠ch
source "$SCRIPTS_DIR/utils/logging.sh"
source "$SCRIPTS_DIR/utils/docker.sh"
source "$SCRIPTS_DIR/utils/validation.sh"

# ============================================================================
# GLOBAL VARIABLES
# ============================================================================

# File c·∫•u h√¨nh
COMPOSE_FILE="$PROJECT_ROOT/docker-compose.yml"
PROFILE="mail"
DB_NAME="stalwart_mail"
CONTAINER_NAME="stalwart-mail"

# H√†nh ƒë·ªông
ACTION=""
FOLLOW_LOGS=false

# Timeout cho c√°c thao t√°c
TIMEOUT_START=120
TIMEOUT_STOP=30

# ============================================================================
# FUNCTIONS
# ============================================================================

# Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
show_usage() {
    cat << EOF
üöÄ NextFlow Mail Server Manager

S·ª≠ d·ª•ng: $0 [OPTION]

C√°c t√πy ch·ªçn:
  install     C√†i ƒë·∫∑t v√† kh·ªüi ƒë·ªông Mail Server l·∫ßn ƒë·∫ßu
  start       Kh·ªüi ƒë·ªông Mail Server
  stop        D·ª´ng Mail Server
  restart     Kh·ªüi ƒë·ªông l·∫°i Mail Server
  status      Ki·ªÉm tra tr·∫°ng th√°i Mail Server
  logs        Xem logs Mail Server
  backup      Backup d·ªØ li·ªáu Mail Server
  restore     Restore d·ªØ li·ªáu Mail Server
  users       Qu·∫£n l√Ω users
  domains     Qu·∫£n l√Ω domains
  test        Test Mail Server
  cleanup     D·ªçn d·∫πp d·ªØ li·ªáu Mail Server
  --follow    Theo d√µi logs real-time (d√πng v·ªõi logs)
  --help      Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y

V√≠ d·ª•:
  $0 install                    # C√†i ƒë·∫∑t Mail Server
  $0 start                      # Kh·ªüi ƒë·ªông Mail Server
  $0 logs --follow              # Xem logs real-time
  $0 users add user@domain.com  # Th√™m user m·ªõi
  $0 backup                     # Backup d·ªØ li·ªáu

Th√¥ng tin truy c·∫≠p:
  üåê Web Admin: http://localhost:8080
  üìß SMTP: localhost:587 (STARTTLS) ho·∫∑c localhost:465 (SSL)
  üì¨ IMAP: localhost:993 (SSL) ho·∫∑c localhost:143 (STARTTLS)
  üìÆ POP3: localhost:995 (SSL) ho·∫∑c localhost:110 (STARTTLS)

EOF
}

# X·ª≠ l√Ω ƒë·ªëi s·ªë d√≤ng l·ªánh
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            install|start|stop|restart|status|logs|backup|restore|users|domains|test|cleanup)
                ACTION="$1"
                shift
                ;;
            --follow)
                FOLLOW_LOGS=true
                shift
                ;;
            --help|-h)
                show_usage
                exit 0
                ;;
            *)
                log_error "T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: $1"
                show_usage
                exit 1
                ;;
        esac
    done

    if [ -z "$ACTION" ]; then
        log_error "Vui l√≤ng ch·ªâ ƒë·ªãnh h√†nh ƒë·ªông"
        show_usage
        exit 1
    fi
}

# Ki·ªÉm tra y√™u c·∫ßu
check_requirements() {
    validate_file_exists "$COMPOSE_FILE"
    check_docker_installation
    check_docker_compose_installation
}

# C√†i ƒë·∫∑t Mail Server
install_mail_server() {
    log_info "üöÄ C√†i ƒë·∫∑t Stalwart Mail Server..."
    
    # Ch·∫°y script c√†i ƒë·∫∑t
    if [ -f "$SCRIPTS_DIR/profiles/mail.sh" ]; then
        "$SCRIPTS_DIR/profiles/mail.sh"
    else
        log_error "Script c√†i ƒë·∫∑t kh√¥ng t√¨m th·∫•y: $SCRIPTS_DIR/profiles/mail.sh"
        exit 1
    fi
    
    log_success "‚úÖ C√†i ƒë·∫∑t Mail Server ho√†n t·∫•t!"
}

# Kh·ªüi ƒë·ªông Mail Server
start_mail_server() {
    log_info "üöÄ Kh·ªüi ƒë·ªông Mail Server..."
    
    cd "$PROJECT_ROOT"
    
    # Kh·ªüi ƒë·ªông services c∆° b·∫£n tr∆∞·ªõc
    if ! is_container_running "postgres"; then
        log_info "Kh·ªüi ƒë·ªông PostgreSQL..."
        docker-compose --profile basic up -d postgres
        wait_for_container_healthy "postgres" 60
    fi
    
    if ! is_container_running "redis"; then
        log_info "Kh·ªüi ƒë·ªông Redis..."
        docker-compose --profile basic up -d redis
        wait_for_container_healthy "redis" 30
    fi
    
    # Kh·ªüi ƒë·ªông Mail Server
    docker-compose --profile "$PROFILE" up -d
    
    # Ch·ªù Mail Server s·∫µn s√†ng
    wait_for_container_healthy "$CONTAINER_NAME" "$TIMEOUT_START"
    
    log_success "‚úÖ Mail Server ƒë√£ kh·ªüi ƒë·ªông!"
    show_access_info
}

# D·ª´ng Mail Server
stop_mail_server() {
    log_info "üõë D·ª´ng Mail Server..."
    
    cd "$PROJECT_ROOT"
    docker-compose stop "$CONTAINER_NAME"
    
    log_success "‚úÖ Mail Server ƒë√£ d·ª´ng!"
}

# Kh·ªüi ƒë·ªông l·∫°i Mail Server
restart_mail_server() {
    log_info "üîÑ Kh·ªüi ƒë·ªông l·∫°i Mail Server..."
    
    stop_mail_server
    sleep 5
    start_mail_server
}

# Ki·ªÉm tra tr·∫°ng th√°i
check_status() {
    log_info "üìä Tr·∫°ng th√°i Mail Server:"
    
    cd "$PROJECT_ROOT"
    
    # Ki·ªÉm tra container
    if is_container_running "$CONTAINER_NAME"; then
        log_success "‚úÖ Container: ƒêang ch·∫°y"
        
        # Ki·ªÉm tra health
        local health_status
        health_status=$(docker inspect --format='{{.State.Health.Status}}' "$CONTAINER_NAME" 2>/dev/null || echo "unknown")
        
        case $health_status in
            "healthy")
                log_success "‚úÖ Health: Kh·ªèe m·∫°nh"
                ;;
            "unhealthy")
                log_error "‚ùå Health: Kh√¥ng kh·ªèe m·∫°nh"
                ;;
            "starting")
                log_warning "‚è≥ Health: ƒêang kh·ªüi ƒë·ªông"
                ;;
            *)
                log_warning "‚ùì Health: Kh√¥ng x√°c ƒë·ªãnh"
                ;;
        esac
        
        # Ki·ªÉm tra ports
        log_info "üîå Ki·ªÉm tra ports:"
        local ports=(25 587 465 143 993 110 995 4190 8080)
        for port in "${ports[@]}"; do
            if nc -z localhost "$port" 2>/dev/null; then
                log_success "  ‚úÖ Port $port: M·ªü"
            else
                log_warning "  ‚ùå Port $port: ƒê√≥ng"
            fi
        done
        
        # Hi·ªÉn th·ªã th√¥ng tin truy c·∫≠p
        show_access_info
    else
        log_error "‚ùå Container: Kh√¥ng ch·∫°y"
    fi
    
    # Ki·ªÉm tra database
    if is_container_running "postgres"; then
        log_info "üóÑÔ∏è Ki·ªÉm tra database..."
        if docker exec postgres psql -U stalwart -d "$DB_NAME" -c "SELECT 1;" >/dev/null 2>&1; then
            log_success "‚úÖ Database: K·∫øt n·ªëi th√†nh c√¥ng"
        else
            log_error "‚ùå Database: Kh√¥ng th·ªÉ k·∫øt n·ªëi"
        fi
    else
        log_error "‚ùå PostgreSQL: Kh√¥ng ch·∫°y"
    fi
}

# Xem logs
show_logs() {
    log_info "üìã Logs Mail Server:"
    
    cd "$PROJECT_ROOT"
    
    if [ "$FOLLOW_LOGS" = true ]; then
        log_info "Theo d√µi logs real-time (Ctrl+C ƒë·ªÉ tho√°t)..."
        docker-compose logs -f "$CONTAINER_NAME"
    else
        docker-compose logs --tail=100 "$CONTAINER_NAME"
    fi
}

# Backup d·ªØ li·ªáu
backup_mail_server() {
    log_info "üíæ Backup Mail Server..."
    
    local backup_dir="$PROJECT_ROOT/stalwart/backups"
    local date=$(date +%Y%m%d_%H%M%S)
    
    # T·∫°o th∆∞ m·ª•c backup
    mkdir -p "$backup_dir"
    
    # Backup database
    log_info "Backup database..."
    docker exec postgres pg_dump -U stalwart "$DB_NAME" > "$backup_dir/stalwart_mail_$date.sql"
    
    # Backup configuration
    log_info "Backup configuration..."
    tar -czf "$backup_dir/stalwart_config_$date.tar.gz" -C "$PROJECT_ROOT" stalwart/config/
    
    # Backup data
    log_info "Backup data..."
    if [ -d "$PROJECT_ROOT/stalwart/data" ]; then
        tar -czf "$backup_dir/stalwart_data_$date.tar.gz" -C "$PROJECT_ROOT" stalwart/data/
    fi
    
    log_success "‚úÖ Backup ho√†n t·∫•t: $backup_dir/stalwart_*_$date.*"
}

# Restore d·ªØ li·ªáu
restore_mail_server() {
    log_info "üì• Restore Mail Server..."
    
    local backup_dir="$PROJECT_ROOT/stalwart/backups"
    
    # Li·ªát k√™ c√°c backup c√≥ s·∫µn
    log_info "C√°c backup c√≥ s·∫µn:"
    ls -la "$backup_dir"/*.sql 2>/dev/null || {
        log_error "Kh√¥ng t√¨m th·∫•y backup n√†o"
        exit 1
    }
    
    echo
    read -p "Nh·∫≠p t√™n file backup (.sql): " backup_file
    
    if [ ! -f "$backup_dir/$backup_file" ]; then
        log_error "File backup kh√¥ng t·ªìn t·∫°i: $backup_dir/$backup_file"
        exit 1
    fi
    
    # X√°c nh·∫≠n
    log_warning "‚ö†Ô∏è  C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω ghi ƒë√® d·ªØ li·ªáu hi·ªán t·∫°i!"
    read -p "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën restore? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "H·ªßy b·ªè restore"
        exit 0
    fi
    
    # D·ª´ng mail server
    log_info "D·ª´ng Mail Server..."
    docker-compose stop "$CONTAINER_NAME"
    
    # Restore database
    log_info "Restore database..."
    docker exec -i postgres psql -U stalwart "$DB_NAME" < "$backup_dir/$backup_file"
    
    # Kh·ªüi ƒë·ªông l·∫°i
    log_info "Kh·ªüi ƒë·ªông l·∫°i Mail Server..."
    docker-compose start "$CONTAINER_NAME"
    
    log_success "‚úÖ Restore ho√†n t·∫•t!"
}

# Qu·∫£n l√Ω users
manage_users() {
    log_info "üë• Qu·∫£n l√Ω Users:"
    
    cat << EOF
C√°c l·ªánh qu·∫£n l√Ω users:
  $0 users list                    # Li·ªát k√™ users
  $0 users add <email> <password>  # Th√™m user
  $0 users delete <email>          # X√≥a user
  $0 users password <email>        # ƒê·ªïi password

V√≠ d·ª•:
  $0 users add user@domain.com mypassword
  $0 users delete user@domain.com
EOF
}

# Qu·∫£n l√Ω domains
manage_domains() {
    log_info "üåê Qu·∫£n l√Ω Domains:"
    
    cat << EOF
C√°c l·ªánh qu·∫£n l√Ω domains:
  $0 domains list           # Li·ªát k√™ domains
  $0 domains add <domain>   # Th√™m domain
  $0 domains delete <domain> # X√≥a domain

V√≠ d·ª•:
  $0 domains add example.com
  $0 domains delete example.com
EOF
}

# Test Mail Server
test_mail_server() {
    log_info "üß™ Test Mail Server..."
    
    # Test SMTP
    log_info "Test SMTP (port 587)..."
    if nc -z localhost 587; then
        log_success "‚úÖ SMTP: OK"
    else
        log_error "‚ùå SMTP: FAIL"
    fi
    
    # Test IMAP
    log_info "Test IMAP (port 993)..."
    if nc -z localhost 993; then
        log_success "‚úÖ IMAP: OK"
    else
        log_error "‚ùå IMAP: FAIL"
    fi
    
    # Test Web Admin
    log_info "Test Web Admin (port 8080)..."
    if nc -z localhost 8080; then
        log_success "‚úÖ Web Admin: OK"
    else
        log_error "‚ùå Web Admin: FAIL"
    fi
    
    # Test database connection
    log_info "Test Database connection..."
    if docker exec postgres psql -U stalwart -d "$DB_NAME" -c "SELECT 1;" >/dev/null 2>&1; then
        log_success "‚úÖ Database: OK"
    else
        log_error "‚ùå Database: FAIL"
    fi
}

# D·ªçn d·∫πp
cleanup_mail_server() {
    log_warning "üßπ D·ªçn d·∫πp Mail Server..."
    log_warning "‚ö†Ô∏è  C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω x√≥a T·∫§T C·∫¢ d·ªØ li·ªáu Mail Server!"
    
    read -p "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën d·ªçn d·∫πp? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "H·ªßy b·ªè d·ªçn d·∫πp"
        exit 0
    fi
    
    cd "$PROJECT_ROOT"
    
    # D·ª´ng container
    docker-compose stop "$CONTAINER_NAME" || true
    docker-compose rm -f "$CONTAINER_NAME" || true
    
    # X√≥a volumes
    docker volume rm nextflow-docker_stalwart_config || true
    docker volume rm nextflow-docker_stalwart_data || true
    docker volume rm nextflow-docker_stalwart_logs || true
    
    # X√≥a database
    docker exec postgres psql -U postgres -c "DROP DATABASE IF EXISTS $DB_NAME;" || true
    docker exec postgres psql -U postgres -c "DROP USER IF EXISTS stalwart;" || true
    
    log_success "‚úÖ D·ªçn d·∫πp ho√†n t·∫•t!"
}

# Hi·ªÉn th·ªã th√¥ng tin truy c·∫≠p
show_access_info() {
    echo
    log_info "=== TH√îNG TIN TRUY C·∫¨P MAIL SERVER ==="
    echo
    log_info "üåê Web Admin Interface:"
    echo "   URL: http://localhost:8080"
    echo "   Username: admin"
    echo "   Password: [xem trong file .env]"
    echo
    log_info "üìß SMTP Configuration:"
    echo "   Server: localhost"
    echo "   Port: 587 (STARTTLS) ho·∫∑c 465 (SSL)"
    echo "   Authentication: Required"
    echo
    log_info "üì¨ IMAP Configuration:"
    echo "   Server: localhost"
    echo "   Port: 143 (STARTTLS) ho·∫∑c 993 (SSL)"
    echo
    log_info "üìÆ POP3 Configuration:"
    echo "   Server: localhost"
    echo "   Port: 110 (STARTTLS) ho·∫∑c 995 (SSL)"
    echo
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

main() {
    # Parse arguments
    parse_arguments "$@"
    
    # Check requirements
    check_requirements
    
    # Execute action
    case $ACTION in
        install)
            install_mail_server
            ;;
        start)
            start_mail_server
            ;;
        stop)
            stop_mail_server
            ;;
        restart)
            restart_mail_server
            ;;
        status)
            check_status
            ;;
        logs)
            show_logs
            ;;
        backup)
            backup_mail_server
            ;;
        restore)
            restore_mail_server
            ;;
        users)
            manage_users
            ;;
        domains)
            manage_domains
            ;;
        test)
            test_mail_server
            ;;
        cleanup)
            cleanup_mail_server
            ;;
        *)
            log_error "H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá: $ACTION"
            show_usage
            exit 1
            ;;
    esac
}

# Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi