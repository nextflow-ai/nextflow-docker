#!/bin/bash

# GitLab Management Script - T·ªëi ∆∞u h√≥a v2.1
# Qu·∫£n l√Ω GitLab CE v·ªõi shared infrastructure (PostgreSQL & Redis)
# Author: NextFlow Team
# Version: 2.1 - T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t v√† UX

set -euo pipefail

# === C·∫§U H√åNH C∆† B·∫¢N ===
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Import utilities
source "$SCRIPT_DIR/utils/logging.sh"
source "$SCRIPT_DIR/utils/docker.sh"
source "$SCRIPT_DIR/utils/validation.sh"

# === BI·∫æN TO√ÄN C·ª§C ===
COMPOSE_FILE="${COMPOSE_FILE:-$PROJECT_ROOT/docker-compose.yml}"
GITLAB_PROFILE="gitlab"
GITLAB_DB="gitlabhq_production"
GITLAB_CONTAINER="gitlab"
ACTION=""
FOLLOW_LOGS=false

# Timeout cho c√°c thao t√°c
STARTUP_TIMEOUT=300  # 5 ph√∫t
HEALTH_CHECK_INTERVAL=10  # 10 gi√¢y

# === HI·ªÇN TH·ªä H∆Ø·ªöNG D·∫™N ===
show_help() {
    show_banner "GITLAB MANAGEMENT v2.1"

    cat << EOF
S·ª≠ d·ª•ng: $0 [T√ôYCH·ªåN]

T√πy ch·ªçn:
  --install       C√†i ƒë·∫∑t GitLab m·ªõi
  --start         Kh·ªüi ƒë·ªông GitLab
  --stop          D·ª´ng GitLab
  --restart       Kh·ªüi ƒë·ªông l·∫°i
  --status        Ki·ªÉm tra tr·∫°ng th√°i
  --logs          Xem logs
  --password      L·∫•y m·∫≠t kh·∫©u root
  --create-root   T·∫°o user root th·ªß c√¥ng
  --cleanup       X√≥a ho√†n to√†n (c·∫©n th·∫≠n!)
  --follow        Theo d√µi logs realtime
  --help          Hi·ªÉn th·ªã tr·ª£ gi√∫p

V√≠ d·ª•:
  $0                    # Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c
  $0 --install          # C√†i ƒë·∫∑t m·ªõi
  $0 --create-root      # T·∫°o user root th·ªß c√¥ng
  $0 --logs --follow    # Xem logs realtime
  $0 --status           # Ki·ªÉm tra tr·∫°ng th√°i

Th√¥ng tin truy c·∫≠p:
  üåê Web UI:     http://localhost:8088
  üì¶ Registry:   http://localhost:5050
  üë§ Username:   root
  üîê Password:   Nex!tFlow@2025!
  üóÑÔ∏è Database:   $GITLAB_DB (shared)
  üî¥ Cache:      Redis (shared)
EOF
}

# === X·ª¨ L√ù THAM S·ªê D√íNG L·ªÜNH ===
parse_arguments() {
    [[ $# -eq 0 ]] && ACTION="interactive" && return

    while [[ $# -gt 0 ]]; do
        case $1 in
            --install)      ACTION="install" ;;
            --start)        ACTION="start" ;;
            --stop)         ACTION="stop" ;;
            --restart)      ACTION="restart" ;;
            --status)       ACTION="status" ;;
            --logs)         ACTION="logs" ;;
            --password)     ACTION="password" ;;
            --create-root)  ACTION="create_root" ;;
            --cleanup)      ACTION="cleanup" ;;
            --follow|-f)    FOLLOW_LOGS=true ;;
            --help|-h)      show_help && exit 0 ;;
            *)
                log_error "T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: $1"
                show_help && exit 1
                ;;
        esac
        shift
    done
}

# === KI·ªÇM TRA H·ªÜ TH·ªêNG ===
# Ki·ªÉm tra Docker c√≥ s·∫µn
check_docker() {
    command -v docker &>/dev/null || {
        log_error "Docker ch∆∞a c√†i ƒë·∫∑t!"
        exit 1
    }
    
    docker info &>/dev/null || {
        log_error "Docker daemon kh√¥ng ch·∫°y!"
        exit 1
    }
}

# Ki·ªÉm tra Docker Compose
check_docker_compose() {
    command -v docker-compose &>/dev/null || {
        log_error "Docker Compose ch∆∞a c√†i ƒë·∫∑t!"
        exit 1
    }
}

# === ƒê·∫¢M B·∫¢O D·ªäCH V·ª§ CHIA S·∫∫ ===
# Kh·ªüi ƒë·ªông PostgreSQL (shared)
ensure_postgres() {
    log_info "Ki·ªÉm tra PostgreSQL..."

    if ! is_container_running "postgres"; then
        log_warning "PostgreSQL ch∆∞a ch·∫°y, ƒëang kh·ªüi ƒë·ªông..."
        log_loading "Kh·ªüi ƒë·ªông PostgreSQL..."
        
        $DOCKER_COMPOSE -f "$COMPOSE_FILE" up -d postgres
        
        if wait_for_container_health "postgres" 30; then
            log_success "PostgreSQL ƒë√£ s·∫µn s√†ng"
        else
            log_error "PostgreSQL kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c (timeout 30s)"
            exit 1
        fi
    else
        log_success "PostgreSQL ƒë√£ ch·∫°y"
    fi
}

# Kh·ªüi ƒë·ªông Redis (shared)
ensure_redis() {
    log_info "Ki·ªÉm tra Redis..."

    if ! is_container_running "redis"; then
        log_warning "Redis ch∆∞a ch·∫°y, ƒëang kh·ªüi ƒë·ªông..."
        log_loading "Kh·ªüi ƒë·ªông Redis..."
        
        $DOCKER_COMPOSE -f "$COMPOSE_FILE" up -d redis
        
        if wait_for_container_health "redis" 15; then
            log_success "Redis ƒë√£ s·∫µn s√†ng"
        else
            log_error "Redis kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c (timeout 15s)"
            exit 1
        fi
    else
        log_success "Redis ƒë√£ ch·∫°y"
    fi
}

# T·∫°o database GitLab
ensure_gitlab_database() {
    log_info "Ki·ªÉm tra database GitLab..."
    
    local db_exists=$(docker exec postgres psql -U "${POSTGRES_USER:-nextflow}" -lqt | cut -d \| -f 1 | grep -w "$GITLAB_DB" || true)
    
    if [[ -n "$db_exists" ]]; then
        log_success "Database $GITLAB_DB ƒë√£ t·ªìn t·∫°i"
    else
        log_info "T·∫°o database $GITLAB_DB..."
        docker exec postgres psql -U "${POSTGRES_USER:-nextflow}" -c "CREATE DATABASE $GITLAB_DB;"
        log_success "Database $GITLAB_DB ƒë√£ t·∫°o"
    fi
}

# T·∫°o file c·∫•u h√¨nh gitlab.rb
create_gitlab_config() {
    local config_file="./gitlab/config/gitlab.rb"
    
    log_info "T·∫°o file c·∫•u h√¨nh gitlab.rb..."
    
    cat > "$config_file" << 'EOF'
# GitLab Configuration File
# Generated by NextFlow GitLab Management Script
# C·∫•u h√¨nh n√†y ph·∫£i kh·ªõp v·ªõi GITLAB_OMNIBUS_CONFIG trong docker-compose.yml

# === C·∫§U H√åNH C∆† B·∫¢N ===
# URL truy c·∫≠p GitLab
external_url 'http://localhost:8088'

# T·∫Øt GitLab KAS (Kubernetes Agent Server) - kh√¥ng c·∫ßn thi·∫øt cho m√¥i tr∆∞·ªùng dev
gitlab_kas['enable'] = false

# C·∫•u h√¨nh t√†i kho·∫£n root
gitlab_rails['initial_root_password'] = "nextflow@2025"

# === C·∫§U H√åNH DATABASE ===
# T·∫Øt PostgreSQL t√≠ch h·ª£p v√† s·ª≠ d·ª•ng external PostgreSQL
postgresql['enable'] = false
gitlab_rails['db_adapter'] = 'postgresql'
gitlab_rails['db_encoding'] = 'utf8'
gitlab_rails['db_host'] = 'postgres'
gitlab_rails['db_port'] = 5432
gitlab_rails['db_username'] = 'nextflow'
gitlab_rails['db_password'] = 'nextflow@2025'
gitlab_rails['db_database'] = 'gitlabhq_production'

# === C·∫§U H√åNH REDIS ===
# T·∫Øt Redis t√≠ch h·ª£p v√† s·ª≠ d·ª•ng external Redis
redis['enable'] = false
gitlab_rails['redis_host'] = 'redis'
gitlab_rails['redis_port'] = 6379
gitlab_rails['redis_password'] = 'nextflow@2025'

# === C·∫§U H√åNH SSH ===
gitlab_rails['gitlab_shell_ssh_port'] = 2222

# === C·∫§U H√åNH TIMEZONE ===
gitlab_rails['time_zone'] = 'Asia/Ho_Chi_Minh'

# === C·∫§U H√åNH CONTAINER REGISTRY ===
registry_external_url 'http://localhost:5050'
gitlab_rails['registry_enabled'] = true
registry_nginx['listen_port'] = 5050

# === T·∫ÆT MONITORING T√çCH H·ª¢P ===
prometheus_monitoring['enable'] = false

# === C·∫§U H√åNH EMAIL (T·∫†M TH·ªúI T·∫ÆT) ===
gitlab_rails['smtp_enable'] = false
# Uncomment v√† c·∫•u h√¨nh khi c·∫ßn s·ª≠ d·ª•ng email
# gitlab_rails['smtp_address'] = "smtp.gmail.com"
# gitlab_rails['smtp_port'] = 587
# gitlab_rails['smtp_user_name'] = "your_email@gmail.com"
# gitlab_rails['smtp_password'] = "your_app_password"
# gitlab_rails['smtp_domain'] = "smtp.gmail.com"
# gitlab_rails['smtp_authentication'] = "login"
# gitlab_rails['smtp_enable_starttls_auto'] = true
# gitlab_rails['smtp_tls'] = false
# gitlab_rails['gitlab_email_from'] = 'your_email@gmail.com'
# gitlab_rails['gitlab_email_display_name'] = 'GitLab NextFlow'
# gitlab_rails['gitlab_email_reply_to'] = 'noreply@example.com'

# === C·∫§U H√åNH BACKUP ===
gitlab_rails['backup_path'] = "/var/opt/gitlab/backups"
gitlab_rails['backup_keep_time'] = 604800  # 7 ng√†y

# === T·ªêI ∆ØU HI·ªÜU NƒÇNG ===
puma['worker_processes'] = 2

# === C·∫§U H√åNH T√çNH NƒÇNG M·∫∂C ƒê·ªäNH ===
gitlab_rails['gitlab_default_projects_features_issues'] = true
gitlab_rails['gitlab_default_projects_features_merge_requests'] = true
gitlab_rails['gitlab_default_projects_features_wiki'] = true
gitlab_rails['gitlab_default_projects_features_snippets'] = true
gitlab_rails['gitlab_default_projects_features_builds'] = true
gitlab_rails['gitlab_default_projects_features_container_registry'] = true

# === GHI CH√ö ===
# File n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi script gitlab.sh
# ƒê·ªÉ thay ƒë·ªïi c·∫•u h√¨nh, h√£y s·ª≠a ƒë·ªïi GITLAB_OMNIBUS_CONFIG trong docker-compose.yml
# ho·∫∑c ch·ªânh s·ª≠a tr·ª±c ti·∫øp file n√†y v√† restart GitLab
EOF

    log_success "ƒê√£ t·∫°o file c·∫•u h√¨nh: $config_file"
}

# === C√ÄI ƒê·∫∂T GITLAB ===
install_gitlab() {
    show_banner "C√ÄI ƒê·∫∂T GITLAB"

    # Ki·ªÉm tra container hi·ªán c√≥
    if docker ps -a | grep -q "$GITLAB_CONTAINER"; then
        log_warning "GitLab container ƒë√£ t·ªìn t·∫°i!"
        
        local options=("X√≥a v√† c√†i l·∫°i" "Ch·ªâ kh·ªüi ƒë·ªông" "H·ªßy b·ªè")
        show_menu "L·ª±a ch·ªçn" "${options[@]}"
        read -r choice

        case $choice in
            1)
                log_info "X√≥a GitLab hi·ªán t·∫°i..."
                $DOCKER_COMPOSE stop $GITLAB_CONTAINER 2>/dev/null || true
                $DOCKER_COMPOSE rm -f $GITLAB_CONTAINER 2>/dev/null || true

                read -p "X√≥a t·∫•t c·∫£ data GitLab? (y/N): " delete_volumes
                if [[ "$delete_volumes" =~ ^[Yy]$ ]]; then
                    log_info "X√≥a GitLab volumes..."
                    docker volume rm nextflow-docker_gitlab_{config,data,logs} 2>/dev/null || true
                    log_success "ƒê√£ x√≥a volumes"
                fi
                ;;
            2)
                start_gitlab && return ;;
            3)
                log_info "H·ªßy c√†i ƒë·∫∑t" && return ;;
            *)
                log_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" && return ;;
        esac
    fi

    # Chu·∫©n b·ªã m√¥i tr∆∞·ªùng
    log_info "Chu·∫©n b·ªã m√¥i tr∆∞·ªùng..."
    ensure_postgres
    ensure_redis
    ensure_gitlab_database

    # T·∫°o th∆∞ m·ª•c
    log_info "T·∫°o th∆∞ m·ª•c..."
    mkdir -p ./gitlab/{config,logs,data,backups}
    
    # T·∫°o file c·∫•u h√¨nh gitlab.rb
    create_gitlab_config

    # Pull image v√† kh·ªüi ƒë·ªông
    log_info "Pull GitLab image..."
    docker pull gitlab/gitlab-ce:16.11.3-ce.0

    log_info "Kh·ªüi ƒë·ªông GitLab..."
    $DOCKER_COMPOSE up -d $GITLAB_CONTAINER

    # Th√¥ng b√°o ho√†n th√†nh
    log_success "GitLab ƒëang kh·ªüi ƒë·ªông (5-10 ph√∫t)..."

    echo ""
    log_info "üìã H∆∞·ªõng d·∫´n ti·∫øp theo:"
    log_info "‚Ä¢ Theo d√µi: $0 --logs --follow"
    log_info "‚Ä¢ Tr·∫°ng th√°i: $0 --status"
    log_info "‚Ä¢ T·∫°o user root: $0 --create-root (sau khi GitLab s·∫µn s√†ng)"

    echo ""
    log_warning "‚è≥ ƒê·ª£i GitLab kh·ªüi ƒë·ªông ho√†n to√†n tr∆∞·ªõc khi t·∫°o user root"
    log_info "üí° S·ª≠ d·ª•ng '$0 --create-root' ƒë·ªÉ t·∫°o user root v·ªõi m·∫≠t kh·∫©u: Nex!tFlow@2025!"

    show_access_info
}

# === QU·∫¢N L√ù GITLAB ===
# Kh·ªüi ƒë·ªông GitLab
start_gitlab() {
    show_banner "KH·ªûI ƒê·ªòNG GITLAB"

    # Ki·ªÉm tra c√†i ƒë·∫∑t
    if ! docker ps -a | grep -q "$GITLAB_CONTAINER"; then
        log_warning "GitLab ch∆∞a c√†i ƒë·∫∑t!"
        read -p "C√†i ƒë·∫∑t ngay? (Y/n): " install_choice
        [[ ! "$install_choice" =~ ^[Nn]$ ]] && install_gitlab || log_info "H·ªßy kh·ªüi ƒë·ªông"
        return
    fi

    # Chu·∫©n b·ªã m√¥i tr∆∞·ªùng
    ensure_postgres
    ensure_redis
    ensure_gitlab_database

    # T·∫°o th∆∞ m·ª•c v√† c·∫•u h√¨nh
    mkdir -p ./gitlab/{config,logs,data,backups}
    create_gitlab_config
    
    log_info "Kh·ªüi ƒë·ªông GitLab..."
    $DOCKER_COMPOSE up -d $GITLAB_CONTAINER

    log_success "GitLab ƒëang kh·ªüi ƒë·ªông (3-5 ph√∫t)..."
    log_info "Theo d√µi: $0 --logs --follow"
    show_access_info
}

# D·ª´ng GitLab
stop_gitlab() {
    show_banner "D·ª™NG GITLAB"

    if docker ps | grep -q "$GITLAB_CONTAINER"; then
        log_info "D·ª´ng GitLab..."
        $DOCKER_COMPOSE stop $GITLAB_CONTAINER
        $DOCKER_COMPOSE rm -f $GITLAB_CONTAINER
        log_success "GitLab ƒë√£ d·ª´ng"
    else
        log_warning "GitLab kh√¥ng ch·∫°y"
    fi
    show_status
}

# Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng
initialize_environment() {
    log_info "Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng..."
    cd "$PROJECT_ROOT"

    # Ki·ªÉm tra Docker
    check_docker
    check_docker_compose

    # Thi·∫øt l·∫≠p DOCKER_COMPOSE
    [[ -z "${DOCKER_COMPOSE:-}" ]] && {
        DOCKER_COMPOSE=$(detect_docker_compose)
        export DOCKER_COMPOSE
    }

    # Validate compose file
    validate_docker_compose_file "$COMPOSE_FILE" || {
        log_error "File docker-compose kh√¥ng h·ª£p l·ªá!"
        exit 1
    }

    log_success "M√¥i tr∆∞·ªùng s·∫µn s√†ng!"
}

# Kh·ªüi ƒë·ªông l·∫°i GitLab
restart_gitlab() {
    show_banner "KH·ªûI ƒê·ªòNG L·∫†I GITLAB"
    log_info "Kh·ªüi ƒë·ªông l·∫°i..."
    stop_gitlab
    sleep 3
    start_gitlab
}

# === HI·ªÇN TH·ªä TH√îNG TIN ===
# Ki·ªÉm tra tr·∫°ng th√°i
show_status() {
    show_banner "TR·∫†NG TH√ÅI GITLAB"

    local services=(
        "ü¶ä GitLab:$GITLAB_CONTAINER"
        "üóÑÔ∏è PostgreSQL:postgres:(shared)"
        "üî¥ Redis:redis:(shared)"
    )

    echo ""
    for service in "${services[@]}"; do
        IFS=':' read -r icon name extra <<< "$service"
        if docker ps | grep -q "$name"; then
            echo "$icon ‚úÖ ƒêang ch·∫°y $extra"
            # Hi·ªÉn th·ªã health cho GitLab
            [[ "$name" == "$GITLAB_CONTAINER" ]] && {
                local health=$(docker inspect --format='{{.State.Health.Status}}' "$name" 2>/dev/null || echo "unknown")
                echo "   Health: $health"
            }
        else
            echo "$icon ‚ùå ƒê√£ d·ª´ng $extra"
        fi
    done
    echo ""
}

# Xem logs
show_logs() {
    local follow_flag=""
    [[ "$FOLLOW_LOGS" == "true" ]] && {
        follow_flag="-f"
        log_info "Theo d√µi logs (Ctrl+C tho√°t)..."
    } || log_info "Hi·ªÉn th·ªã logs..."

    docker ps | grep -q "$GITLAB_CONTAINER" || {
        log_error "GitLab kh√¥ng ch·∫°y"
        exit 1
    }

    $DOCKER_COMPOSE --profile $GITLAB_PROFILE logs $follow_flag $GITLAB_CONTAINER
}

# L·∫•y m·∫≠t kh·∫©u root
get_password() {
    show_banner "GITLAB PASSWORD"

    docker ps | grep -q "$GITLAB_CONTAINER" || {
        log_error "GitLab kh√¥ng ch·∫°y"
        exit 1
    }

    log_info "L·∫•y m·∫≠t kh·∫©u root..."
    echo ""
    docker exec $GITLAB_CONTAINER grep 'Password:' /etc/gitlab/initial_root_password 2>/dev/null || {
        log_warning "Kh√¥ng l·∫•y ƒë∆∞·ª£c m·∫≠t kh·∫©u. GitLab c√≥ th·ªÉ ch∆∞a kh·ªüi ƒë·ªông xong."
        log_info "Th·ª≠ l·∫°i sau v√†i ph√∫t ho·∫∑c xem logs"
    }
    echo ""
}

# T·∫°o user root th·ªß c√¥ng v·ªõi m·∫≠t kh·∫©u t√πy ch·ªânh
create_root_user() {
    show_banner "T·∫†O USER ROOT TH·ª¶ C√îNG"

    docker ps | grep -q "$GITLAB_CONTAINER" || {
        log_error "GitLab kh√¥ng ch·∫°y"
        exit 1
    }

    # Ki·ªÉm tra GitLab ƒë√£ s·∫µn s√†ng ch∆∞a
    log_info "Ki·ªÉm tra tr·∫°ng th√°i GitLab..."
    local health_status=$(docker inspect --format='{{.State.Health.Status}}' "$GITLAB_CONTAINER" 2>/dev/null || echo "unknown")

    if [[ "$health_status" != "healthy" ]]; then
        log_warning "GitLab ch∆∞a s·∫µn s√†ng (tr·∫°ng th√°i: $health_status)"
        log_info "Vui l√≤ng ƒë·ª£i GitLab kh·ªüi ƒë·ªông ho√†n to√†n tr∆∞·ªõc khi t·∫°o user root"
        return 1
    fi

    # L·∫•y th√¥ng tin t·ª´ environment variables
    local root_password="${GITLAB_ROOT_PASSWORD:-Nex!tFlow@2025!}"
    local root_email="${GITLAB_ROOT_EMAIL:-nextflow.vn@gmail.com}"
    local root_name="${GITLAB_ROOT_NAME:-NextFlow Administrator}"

    log_info "Th√¥ng tin user root:"
    echo "  üë§ Username: root"
    echo "  üìß Email: $root_email"
    echo "  üë®‚Äçüíº Name: $root_name"
    echo "  üîê Password: $root_password"
    echo ""

    read -p "X√°c nh·∫≠n t·∫°o user root v·ªõi th√¥ng tin tr√™n? (Y/n): " confirm
    [[ "$confirm" =~ ^[Nn]$ ]] && {
        log_info "H·ªßy t·∫°o user root"
        return 0
    }

    log_info "ƒêang ki·ªÉm tra v√† t·∫°o user root..."

    # Ki·ªÉm tra s·ªë l∆∞·ª£ng users hi·ªán t·∫°i v√† t·∫°o user root
    local ruby_script="
puts '=== KI·ªÇM TRA V√Ä T·∫†O USER ROOT ==='

# Ki·ªÉm tra s·ªë l∆∞·ª£ng users hi·ªán t·∫°i
total_users = User.count
puts \"T·ªïng s·ªë users hi·ªán t·∫°i: #{total_users}\"

# Ki·ªÉm tra user root c√≥ t·ªìn t·∫°i kh√¥ng
existing_root = User.find_by(username: 'root')

if existing_root
  puts 'User root ƒë√£ t·ªìn t·∫°i, ƒëang c·∫≠p nh·∫≠t th√¥ng tin...'
  existing_root.password = '$root_password'
  existing_root.password_confirmation = '$root_password'
  existing_root.email = '$root_email'
  existing_root.name = '$root_name'
  existing_root.admin = true
  existing_root.confirmed_at = Time.current if existing_root.confirmed_at.nil?
  existing_root.confirmation_token = nil

  if existing_root.save
    puts '‚úÖ User root ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!'
    puts \"ID: #{existing_root.id}\"
    puts \"Username: #{existing_root.username}\"
    puts \"Email: #{existing_root.email}\"
    puts \"Name: #{existing_root.name}\"
    puts \"Admin: #{existing_root.admin}\"
    puts \"Confirmed: #{existing_root.confirmed?}\"
  else
    puts '‚ùå L·ªói khi c·∫≠p nh·∫≠t user root:'
    puts existing_root.errors.full_messages.join(', ')
  end
else
  puts 'User root ch∆∞a t·ªìn t·∫°i, ƒëang t·∫°o m·ªõi...'

  begin
    # T·∫°o user root m·ªõi
    new_user = User.create!(
      username: 'root',
      email: '$root_email',
      name: '$root_name',
      password: '$root_password',
      password_confirmation: '$root_password',
      admin: true,
      confirmed_at: Time.current
    )

    puts '‚úÖ User root ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!'
    puts \"ID: #{new_user.id}\"
    puts \"Username: #{new_user.username}\"
    puts \"Email: #{new_user.email}\"
    puts \"Name: #{new_user.name}\"
    puts \"Admin: #{new_user.admin}\"
    puts \"Confirmed: #{new_user.confirmed?}\"

  rescue => e
    puts '‚ùå L·ªói khi t·∫°o user root:'
    puts e.message

    # Th·ª≠ c√°ch kh√°c n·∫øu c√°ch ƒë·∫ßu ti√™n th·∫•t b·∫°i
    puts 'Th·ª≠ ph∆∞∆°ng ph√°p kh√°c...'
    user = User.new(
      username: 'root',
      email: '$root_email',
      name: '$root_name',
      password: '$root_password',
      password_confirmation: '$root_password',
      admin: true,
      confirmed_at: Time.current,
      confirmation_token: nil
    )

    # T·∫°o namespace cho user
    user.build_namespace(
      name: 'root',
      path: 'root'
    )

    if user.save
      puts '‚úÖ User root ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng (ph∆∞∆°ng ph√°p 2)!'
      puts \"ID: #{user.id}\"
      puts \"Username: #{user.username}\"
      puts \"Email: #{user.email}\"
      puts \"Name: #{user.name}\"
      puts \"Admin: #{user.admin}\"
      puts \"Confirmed: #{user.confirmed?}\"
    else
      puts '‚ùå V·∫´n l·ªói khi t·∫°o user root:'
      puts user.errors.full_messages.join(', ')
    end
  end
end

puts '=== HO√ÄN TH√ÄNH ==='
"

    # Th·ª±c thi script trong GitLab Rails console
    log_info "Th·ª±c thi script t·∫°o user root..."
    echo ""

    if docker exec "$GITLAB_CONTAINER" gitlab-rails runner "$ruby_script"; then
        echo ""
        log_success "‚úÖ Qu√° tr√¨nh t·∫°o/c·∫≠p nh·∫≠t user root ƒë√£ ho√†n th√†nh!"
        echo ""
        log_info "üéØ TH√îNG TIN ƒêƒÇNG NH·∫¨P:"
        echo "  üåê URL: http://localhost:8088"
        echo "  üë§ Username: root"
        echo "  üîê Password: $root_password"
        echo "  üìß Email: $root_email"
        echo ""
        log_info "üí° B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù!"

        # Hi·ªÉn th·ªã th√™m th√¥ng tin h·ªØu √≠ch
        echo ""
        log_info "üìã C√°c b∆∞·ªõc ti·∫øp theo:"
        echo "  1. Truy c·∫≠p http://localhost:8088"
        echo "  2. ƒêƒÉng nh·∫≠p v·ªõi username: root"
        echo "  3. S·ª≠ d·ª•ng password: $root_password"
        echo "  4. T·∫°o projects v√† repositories"
        echo ""

    else
        echo ""
        log_error "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o user root"
        log_info "Vui l√≤ng ki·ªÉm tra logs GitLab: $0 --logs"
        return 1
    fi
}

# Hi·ªÉn th·ªã th√¥ng tin truy c·∫≠p
show_access_info() {
    local root_password="${GITLAB_ROOT_PASSWORD:-Nex!tFlow@2025!}"

    cat << EOF

üéØ TH√îNG TIN TRUY C·∫¨P GITLAB
============================
üåê Web UI:     http://localhost:8088
üì¶ Registry:   http://localhost:5050
üë§ Username:   root
üîê Password:   $root_password
üìß Email:      ${GITLAB_ROOT_EMAIL:-nextflow.vn@gmail.com}
üóÑÔ∏è Database:   $GITLAB_DB (shared)
üî¥ Cache:      Redis (shared)

‚ö†Ô∏è  L∆ØU √ù:
‚Ä¢ GitLab c·∫ßn 3-5 ph√∫t kh·ªüi ƒë·ªông ho√†n to√†n
‚Ä¢ S·ª≠ d·ª•ng PostgreSQL & Redis shared
‚Ä¢ N·∫øu ch∆∞a c√≥ user root: $0 --create-root
‚Ä¢ Ki·ªÉm tra logs: $0 --logs --follow

üìã C√ÅC L·ªÜNH H·ªÆU √çCH:
‚Ä¢ T·∫°o user root: $0 --create-root
‚Ä¢ Xem m·∫≠t kh·∫©u: $0 --password
‚Ä¢ Ki·ªÉm tra tr·∫°ng th√°i: $0 --status
‚Ä¢ Kh·ªüi ƒë·ªông l·∫°i: $0 --restart
EOF
}

# === X√ìA HO√ÄN TO√ÄN GITLAB ===
cleanup_gitlab() {
    show_banner "CLEANUP GITLAB"

    cat << EOF
‚ö†Ô∏è  C·∫¢NH B√ÅO: X√≥a ho√†n to√†n GitLab v√† t·∫•t c·∫£ d·ªØ li·ªáu!

Bao g·ªìm:
‚Ä¢ GitLab container
‚Ä¢ GitLab volumes (config, data, logs)
‚Ä¢ GitLab database ($GITLAB_DB)
‚Ä¢ GitLab directories

EOF

    read -p "X√°c nh·∫≠n x√≥a ho√†n to√†n? (yes/no): " confirm
    [[ "$confirm" != "yes" ]] && {
        log_info "H·ªßy cleanup"
        return
    }

    log_info "B·∫Øt ƒë·∫ßu cleanup..."

    # S·ª≠ d·ª•ng script chuy√™n d·ª•ng n·∫øu c√≥
    if [[ -f "./scripts/cleanup-gitlab-db.sh" ]]; then
        log_info "S·ª≠ d·ª•ng script cleanup chuy√™n d·ª•ng..."
        ./scripts/cleanup-gitlab-db.sh
        return
    fi

    # Cleanup th·ªß c√¥ng
    log_info "Cleanup th·ªß c√¥ng..."

    # D·ª´ng container
    docker ps | grep -q "$GITLAB_CONTAINER" && {
        log_info "D·ª´ng GitLab..."
        $DOCKER_COMPOSE stop $GITLAB_CONTAINER
        $DOCKER_COMPOSE rm -f $GITLAB_CONTAINER
    }

    # X√≥a database
    log_info "X√≥a database $GITLAB_DB..."
    docker exec postgres psql -U "${POSTGRES_USER:-nextflow}" -d postgres -c "
        SELECT pg_terminate_backend(pid)
        FROM pg_stat_activity
        WHERE datname = '$GITLAB_DB' AND pid <> pg_backend_pid();
        DROP DATABASE IF EXISTS $GITLAB_DB;
    " 2>/dev/null || true

    # X√≥a volumes
    log_info "X√≥a volumes..."
    docker volume rm nextflow-docker_gitlab_{config,data,logs} 2>/dev/null || true

    # X√≥a th∆∞ m·ª•c
    [[ -d "./gitlab" ]] && {
        rm -rf ./gitlab
        log_success "ƒê√£ x√≥a th∆∞ m·ª•c ./gitlab"
    }

    log_success "üéâ Cleanup ho√†n t·∫•t!"
    log_info "C√≥ th·ªÉ c√†i ƒë·∫∑t l·∫°i b·∫±ng: $0 --install"
}

# === CH·∫æ ƒê·ªò T∆Ø∆†NG T√ÅC ===
interactive_mode() {
    show_banner "GITLAB MANAGEMENT"

    local options=(
        "C√†i ƒë·∫∑t GitLab"
        "Kh·ªüi ƒë·ªông GitLab"
        "D·ª´ng GitLab"
        "Kh·ªüi ƒë·ªông l·∫°i GitLab"
        "Ki·ªÉm tra tr·∫°ng th√°i"
        "Xem logs GitLab"
        "Xem logs (follow)"
        "L·∫•y initial password"
        "T·∫°o user root th·ªß c√¥ng"
        "Hi·ªÉn th·ªã th√¥ng tin truy c·∫≠p"
        "Cleanup GitLab (x√≥a ho√†n to√†n)"
        "Tho√°t"
    )

    while true; do
        echo
        show_menu "GITLAB MENU" "${options[@]}"
        read -r choice

        case $choice in
            1) install_gitlab ;;
            2) start_gitlab ;;
            3) stop_gitlab ;;
            4) restart_gitlab ;;
            5) show_status ;;
            6) FOLLOW_LOGS=false; show_logs ;;
            7) FOLLOW_LOGS=true; show_logs ;;
            8) get_password ;;
            9) create_root_user ;;
            10) show_access_info ;;
            11) cleanup_gitlab ;;
            12) log_info "T·∫°m bi·ªát!"; break ;;
            *) log_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!" ;;
        esac
    done
}

# === H√ÄM CH√çNH ===
main() {
    parse_arguments "$@"     # Ph√¢n t√≠ch tham s·ªë
    initialize_environment   # Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng

    # Th·ª±c thi h√†nh ƒë·ªông
    case "$ACTION" in
        "install") install_gitlab ;;
        "start") start_gitlab ;;
        "stop") stop_gitlab ;;
        "restart") restart_gitlab ;;
        "status") show_status ;;
        "logs") show_logs ;;
        "password") get_password ;;
        "create_root") create_root_user ;;
        "cleanup") cleanup_gitlab ;;
        "interactive") interactive_mode ;;
        *) log_error "Action kh√¥ng h·ª£p l·ªá: $ACTION"; exit 1 ;;
    esac
}

# === KH·ªûI CH·∫†Y SCRIPT ===
main "$@"
