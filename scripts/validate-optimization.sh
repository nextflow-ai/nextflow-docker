#!/bin/bash

# ============================================================================
# SCRIPT KI·ªÇM TRA T·ªêI ∆ØU H√ìA NEXTFLOW DOCKER
# ============================================================================
# T√°c gi·∫£: Augment Agent
# Phi√™n b·∫£n: 1.0
# Ng√†y t·∫°o: 2025-06-16
# 
# M√î T·∫¢:
# Script n√†y ki·ªÉm tra v√† x√°c th·ª±c t·∫•t c·∫£ c√°c t·ªëi ∆∞u h√≥a ƒë√£ ƒë∆∞·ª£c th·ª±c hi·ªán:
# - ƒê·ªìng b·ªô h√≥a port mapping
# - C·∫•u h√¨nh WordPress
# - Cloudflare tunnel optimization
# - Lo·∫°i b·ªè code d∆∞ th·ª´a
# ============================================================================

set -euo pipefail

# Thi·∫øt l·∫≠p m√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# H√†m hi·ªÉn th·ªã log v·ªõi m√†u s·∫Øc
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

show_banner() {
    echo -e "${BLUE}"
    echo "============================================================================"
    echo "  $1"
    echo "============================================================================"
    echo -e "${NC}"
}

# Bi·∫øn ƒë·∫øm l·ªói
ERROR_COUNT=0
WARNING_COUNT=0

# H√†m ki·ªÉm tra port mapping consistency
check_port_consistency() {
    show_banner "KI·ªÇM TRA ƒê·ªíNG B·ªò PORT MAPPING"
    
    log_info "Ki·ªÉm tra port mapping gi·ªØa docker-compose.yml v√† scripts..."
    
    # Ki·ªÉm tra n8n port
    if grep -q "8003:5678" docker-compose.yml && grep -q "8003:n8n" scripts/profiles/basic.sh; then
        log_success "n8n port mapping ƒë·ªìng b·ªô (8003)"
    else
        log_error "n8n port mapping kh√¥ng ƒë·ªìng b·ªô"
        ((ERROR_COUNT++))
    fi
    
    # Ki·ªÉm tra Redis Commander port
    if grep -q "6101:8081" docker-compose.yml && grep -q "6101:Redis Commander" scripts/profiles/basic.sh; then
        log_success "Redis Commander port mapping ƒë·ªìng b·ªô (6101)"
    else
        log_error "Redis Commander port mapping kh√¥ng ƒë·ªìng b·ªô"
        ((ERROR_COUNT++))
    fi
    
    # Ki·ªÉm tra Open WebUI port
    if grep -q "8002:8080" docker-compose.yml; then
        log_success "Open WebUI port mapping ƒë√∫ng (8002)"
    else
        log_error "Open WebUI port mapping kh√¥ng ƒë√∫ng"
        ((ERROR_COUNT++))
    fi
    
    # Ki·ªÉm tra Stalwart Mail port
    if grep -q "MAIL_ADMIN_PORT:-8005.*:80" docker-compose.yml; then
        log_success "Stalwart Mail port mapping ƒë√∫ng (8005)"
    else
        log_error "Stalwart Mail port mapping kh√¥ng ƒë√∫ng"
        ((ERROR_COUNT++))
    fi
}

# H√†m ki·ªÉm tra c·∫•u h√¨nh WordPress
check_wordpress_config() {
    show_banner "KI·ªÇM TRA C·∫§U H√åNH WORDPRESS"

    log_info "Ki·ªÉm tra c·∫•u h√¨nh database WordPress..."

    # Ki·ªÉm tra environment variables trong docker-compose.yml
    if grep -q "WORDPRESS_DB_HOST=mariadb:3306" docker-compose.yml; then
        log_success "WordPress DB host ƒë√∫ng"
    else
        log_error "WordPress DB host kh√¥ng ƒë√∫ng"
        ((ERROR_COUNT++))
    fi

    if grep -q "WORDPRESS_DB_NAME=\${MYSQL_DATABASE" docker-compose.yml; then
        log_success "WordPress DB name s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng"
    else
        log_error "WordPress DB name kh√¥ng s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng"
        ((ERROR_COUNT++))
    fi

    if grep -q "WORDPRESS_DB_USER=\${MYSQL_USER" docker-compose.yml; then
        log_success "WordPress DB user s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng"
    else
        log_error "WordPress DB user kh√¥ng s·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng"
        ((ERROR_COUNT++))
    fi

    # Ki·ªÉm tra kh√¥ng c√≤n WORDPRESS_CONFIG_EXTRA g√¢y l·ªói
    if ! grep -q "WORDPRESS_CONFIG_EXTRA=.*define.*define" docker-compose.yml; then
        log_success "ƒê√£ lo·∫°i b·ªè WORDPRESS_CONFIG_EXTRA g√¢y PHP parse error"
    else
        log_error "V·∫´n c√≤n WORDPRESS_CONFIG_EXTRA c√≥ th·ªÉ g√¢y l·ªói"
        ((ERROR_COUNT++))
    fi
}

# H√†m ki·ªÉm tra Cloudflare tunnel optimization
check_cloudflare_optimization() {
    show_banner "KI·ªÇM TRA T·ªêI ∆ØU H√ìA CLOUDFLARE TUNNELS"
    
    log_info "Ki·ªÉm tra s·ªë l∆∞·ª£ng Cloudflare tunnels..."
    
    # ƒê·∫øm s·ªë tunnels services trong docker-compose.yml (ch·ªâ ƒë·∫øm service definitions)
    tunnel_count=$(grep -c "^  cloudflare-tunnel" docker-compose.yml || echo "0")
    
    if [ "$tunnel_count" -le 3 ]; then
        log_success "S·ªë l∆∞·ª£ng Cloudflare tunnels ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u ($tunnel_count tunnels)"
    else
        log_warning "V·∫´n c√≤n qu√° nhi·ªÅu Cloudflare tunnels ($tunnel_count tunnels)"
        ((WARNING_COUNT++))
    fi
    
    # Ki·ªÉm tra c√°c file config ƒë√£ b·ªã x√≥a
    removed_configs=("cloudflared-messaging-config.yml" "cloudflared-docs-config.yml" "cloudflared-dev-config.yml" "cloudflared-storage-config.yml" "cloudflared-analytics-config.yml")
    
    for config in "${removed_configs[@]}"; do
        if [ ! -f "cloudflared/config/$config" ]; then
            log_success "ƒê√£ x√≥a file config d∆∞ th·ª´a: $config"
        else
            log_warning "File config d∆∞ th·ª´a v·∫´n t·ªìn t·∫°i: $config"
            ((WARNING_COUNT++))
        fi
    done
}

# H√†m ki·ªÉm tra environment variables consistency
check_env_consistency() {
    show_banner "KI·ªÇM TRA ƒê·ªíNG B·ªò ENVIRONMENT VARIABLES"
    
    log_info "Ki·ªÉm tra consistency gi·ªØa .env v√† docker-compose.yml..."
    
    # Ki·ªÉm tra n8n port
    if grep -q "N8N_PORT=8003" .env; then
        log_success "N8N_PORT trong .env ƒë√∫ng (8003)"
    else
        log_error "N8N_PORT trong .env kh√¥ng ƒë√∫ng"
        ((ERROR_COUNT++))
    fi
    
    # Ki·ªÉm tra Flowise port
    if grep -q "FLOWISE_PORT=8001" .env; then
        log_success "FLOWISE_PORT trong .env ƒë√∫ng (8001)"
    else
        log_error "FLOWISE_PORT trong .env kh√¥ng ƒë√∫ng"
        ((ERROR_COUNT++))
    fi
    
    # Ki·ªÉm tra Open WebUI port
    if grep -q "OPENWEBUI_PORT=8002" .env; then
        log_success "OPENWEBUI_PORT trong .env ƒë√∫ng (8002)"
    else
        log_error "OPENWEBUI_PORT trong .env kh√¥ng ƒë√∫ng"
        ((ERROR_COUNT++))
    fi
    
    # Ki·ªÉm tra Mail admin port
    if grep -q "MAIL_ADMIN_PORT=8005" .env; then
        log_success "MAIL_ADMIN_PORT trong .env ƒë√∫ng (8005)"
    else
        log_error "MAIL_ADMIN_PORT trong .env kh√¥ng ƒë√∫ng"
        ((ERROR_COUNT++))
    fi
}

# H√†m ki·ªÉm tra Cloudflare tunnel config ports
check_tunnel_config_ports() {
    show_banner "KI·ªÇM TRA PORT TRONG CLOUDFLARE TUNNEL CONFIGS"
    
    log_info "Ki·ªÉm tra port mapping trong Cloudflare tunnel configs..."
    
    # Ki·ªÉm tra AI tunnel config
    if [ -f "cloudflared/config/cloudflared-ai-config.yml" ]; then
        if grep -q "http://n8n:5678" cloudflared/config/cloudflared-ai-config.yml; then
            log_success "n8n port trong AI tunnel config ƒë√∫ng"
        else
            log_error "n8n port trong AI tunnel config kh√¥ng ƒë√∫ng"
            ((ERROR_COUNT++))
        fi
        
        if grep -q "http://open-webui:8080" cloudflared/config/cloudflared-ai-config.yml; then
            log_success "Open WebUI port trong AI tunnel config ƒë√∫ng"
        else
            log_error "Open WebUI port trong AI tunnel config kh√¥ng ƒë√∫ng"
            ((ERROR_COUNT++))
        fi
    else
        log_error "File cloudflared-ai-config.yml kh√¥ng t·ªìn t·∫°i"
        ((ERROR_COUNT++))
    fi
    
    # Ki·ªÉm tra main tunnel config
    if [ -f "cloudflared/config/cloudflared-config.yml" ]; then
        if grep -q "http://stalwart-mail:80" cloudflared/config/cloudflared-config.yml; then
            log_success "Stalwart Mail port trong main tunnel config ƒë√∫ng"
        else
            log_error "Stalwart Mail port trong main tunnel config kh√¥ng ƒë√∫ng"
            ((ERROR_COUNT++))
        fi
    else
        log_error "File cloudflared-config.yml kh√¥ng t·ªìn t·∫°i"
        ((ERROR_COUNT++))
    fi
}

# H√†m hi·ªÉn th·ªã t·ªïng k·∫øt
show_summary() {
    show_banner "T·ªîNG K·∫æT KI·ªÇM TRA T·ªêI ∆ØU H√ìA"
    
    echo "üìä K·∫øt qu·∫£ ki·ªÉm tra:"
    echo "  ‚Ä¢ L·ªói nghi√™m tr·ªçng: $ERROR_COUNT"
    echo "  ‚Ä¢ C·∫£nh b√°o: $WARNING_COUNT"
    echo
    
    if [ $ERROR_COUNT -eq 0 ] && [ $WARNING_COUNT -eq 0 ]; then
        log_success "üéâ T·∫§T C·∫¢ KI·ªÇM TRA TH√ÄNH C√îNG! H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a ho√†n to√†n."
        echo
        echo "‚úÖ C√°c t·ªëi ∆∞u h√≥a ƒë√£ ho√†n th√†nh:"
        echo "  ‚Ä¢ ƒê·ªìng b·ªô h√≥a port mapping"
        echo "  ‚Ä¢ S·ª≠a l·ªói c·∫•u h√¨nh WordPress"
        echo "  ‚Ä¢ T·ªëi ∆∞u h√≥a Cloudflare tunnels (gi·∫£m t·ª´ 8 xu·ªëng 3)"
        echo "  ‚Ä¢ Chu·∫©n h√≥a environment variables"
        echo "  ‚Ä¢ Lo·∫°i b·ªè code d∆∞ th·ª´a"
        return 0
    elif [ $ERROR_COUNT -eq 0 ]; then
        log_warning "‚ö†Ô∏è Ki·ªÉm tra ho√†n th√†nh v·ªõi $WARNING_COUNT c·∫£nh b√°o nh·ªè."
        return 0
    else
        log_error "‚ùå Ph√°t hi·ªán $ERROR_COUNT l·ªói nghi√™m tr·ªçng c·∫ßn kh·∫Øc ph·ª•c!"
        return 1
    fi
}

# Main execution
main() {
    show_banner "NEXTFLOW DOCKER - KI·ªÇM TRA T·ªêI ∆ØU H√ìA"
    
    echo "üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra t·ªïng th·ªÉ h·ªá th·ªëng sau t·ªëi ∆∞u h√≥a..."
    echo
    
    # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c g·ªëc c·ªßa project
    cd "$(dirname "$0")/.."
    
    # Th·ª±c hi·ªán c√°c ki·ªÉm tra
    check_port_consistency
    echo
    check_wordpress_config
    echo
    check_cloudflare_optimization
    echo
    check_env_consistency
    echo
    check_tunnel_config_ports
    echo
    
    # Hi·ªÉn th·ªã t·ªïng k·∫øt
    show_summary
}

# Ch·∫°y script
main "$@"
