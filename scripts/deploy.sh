#!/bin/bash

# ============================================================================
# NEXTFLOW DOCKER - SCRIPT TRI·ªÇN KHAI T·ªêI ∆ØU H√ìA
# ============================================================================
# T√°c gi·∫£: NextFlow Development Team
# Phi√™n b·∫£n: 2.1 - T·ªëi ∆∞u h√≥a v·ªõi kh√¥i ph·ª•c l·ªói, rollback v√† gi√°m s√°t
# Ng√†y t·∫°o: 2025
# 
# M√î T·∫¢:
# Script n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ tri·ªÉn khai h·ªá th·ªëng NextFlow Docker m·ªôt c√°ch
# t·ª± ƒë·ªông v√† an to√†n. Bao g·ªìm c√°c t√≠nh nƒÉng n√¢ng cao nh∆∞:
# - Kh√¥i ph·ª•c t·ª± ƒë·ªông khi c√≥ l·ªói
# - T·∫°o checkpoint v√† rollback
# - Gi√°m s√°t qu√° tr√¨nh tri·ªÉn khai
# - Ghi log chi ti·∫øt
# 
# C√ÅCH S·ª¨ D·ª§NG:
# ./scripts/deploy.sh [T√ôY_CH·ªåN]
# 
# C√ÅC T√ôY CH·ªåN CH√çNH:
#   --profile <t√™n_profile>     Tri·ªÉn khai m·ªôt profile c·ª• th·ªÉ
#   --profiles <danh_s√°ch>      Tri·ªÉn khai nhi·ªÅu profiles (c√°ch nhau b·ªüi d·∫•u ph·∫©y)
#   --stop                      D·ª´ng t·∫•t c·∫£ d·ªãch v·ª•
#   --restart                   Kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ d·ªãch v·ª•
#   --status                    Hi·ªÉn th·ªã tr·∫°ng th√°i c√°c d·ªãch v·ª•
#   --logs <t√™n_service>        Xem logs c·ªßa m·ªôt service c·ª• th·ªÉ
#   --update                    C·∫≠p nh·∫≠t t·∫•t c·∫£ Docker images
#   --cleanup                   D·ªçn d·∫πp t√†i nguy√™n Docker
#   --checkpoint [t√™n]          T·∫°o ƒëi·ªÉm kh√¥i ph·ª•c
#   --rollback [t√™n]            Kh√¥i ph·ª•c v·ªÅ ƒëi·ªÉm tr∆∞·ªõc ƒë√≥
#   --hooks                     B·∫≠t pre/post deployment hooks
#   --dry-run                   Ch·ªâ hi·ªÉn th·ªã nh·ªØng g√¨ s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai
#   --help                      Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
# 
# V√ç D·ª§ S·ª¨ D·ª§NG:
#   ./deploy.sh --profile basic                    # Tri·ªÉn khai profile c∆° b·∫£n
#   ./deploy.sh --profiles basic,monitoring        # Tri·ªÉn khai nhi·ªÅu profiles
#   ./deploy.sh --checkpoint backup-20250101       # T·∫°o checkpoint
#   ./deploy.sh --rollback backup-20250101         # Kh√¥i ph·ª•c t·ª´ checkpoint
#   ./deploy.sh --dry-run --profile ai             # Xem tr∆∞·ªõc tri·ªÉn khai AI
# ============================================================================

# Thi·∫øt l·∫≠p bash ƒë·ªÉ d·ª´ng khi c√≥ l·ªói v√† b√°o l·ªói bi·∫øn kh√¥ng t·ªìn t·∫°i
set -euo pipefail

# ============================================================================
# PH·∫¶N 1: C·∫§U H√åNH V√Ä BI·∫æN TO√ÄN C·ª§C
# ============================================================================

# X√°c ƒë·ªãnh th∆∞ m·ª•c script v√† th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Import c√°c th∆∞ vi·ªán ti·ªán √≠ch
source "$SCRIPT_DIR/utils/logging.sh"      # Th∆∞ vi·ªán ghi log v·ªõi m√†u s·∫Øc
source "$SCRIPT_DIR/utils/docker.sh"       # Th∆∞ vi·ªán thao t√°c Docker
source "$SCRIPT_DIR/utils/validation.sh"   # Th∆∞ vi·ªán ki·ªÉm tra v√† x√°c th·ª±c

# C·∫•u h√¨nh m·∫∑c ƒë·ªãnh
COMPOSE_FILE="${COMPOSE_FILE:-$PROJECT_ROOT/docker-compose.yml}"  # File docker-compose
DEFAULT_PROFILE="basic"                     # Profile m·∫∑c ƒë·ªãnh khi kh√¥ng ch·ªâ ƒë·ªãnh
DEPLOYMENT_LOG_FILE=""                      # File log tri·ªÉn khai
CHECKPOINT_DIR="backups/deployments"        # Th∆∞ m·ª•c l∆∞u checkpoint
HOOKS_DIR="$SCRIPT_DIR/hooks"              # Th∆∞ m·ª•c ch·ª©a deployment hooks

# C·ªù ƒëi·ªÅu khi·ªÉn t√≠nh nƒÉng (c√≥ th·ªÉ b·∫≠t/t·∫Øt qua bi·∫øn m√¥i tr∆∞·ªùng)
ENABLE_CHECKPOINTS="${ENABLE_CHECKPOINTS:-true}"    # B·∫≠t/t·∫Øt t·∫°o checkpoint t·ª± ƒë·ªông
ENABLE_HOOKS="${ENABLE_HOOKS:-false}"               # B·∫≠t/t·∫Øt deployment hooks
DRY_RUN="${DRY_RUN:-false}"                        # Ch·∫ø ƒë·ªô xem tr∆∞·ªõc (kh√¥ng th·ª±c thi)
AUTO_RECOVERY="${AUTO_RECOVERY:-true}"              # B·∫≠t/t·∫Øt kh√¥i ph·ª•c t·ª± ƒë·ªông
FORCE_DEPLOY="${FORCE_DEPLOY:-false}"               # B·ªè qua port conflicts v√† validation

# Bi·∫øn to√†n c·ª•c l∆∞u tr·∫°ng th√°i
PROFILES_TO_DEPLOY=()                      # Danh s√°ch profiles s·∫Ω tri·ªÉn khai
ACTION=""                                  # H√†nh ƒë·ªông s·∫Ω th·ª±c hi·ªán
SERVICE_NAME=""                            # T√™n service (cho l·ªánh logs)
CHECKPOINT_NAME=""                         # T√™n checkpoint
CURRENT_CHECKPOINT=""                      # Checkpoint hi·ªán t·∫°i

# ============================================================================
# PH·∫¶N 2: KH√ÅM PH√Å V√Ä QU·∫¢N L√ù PROFILES
# ============================================================================

# H√†m t·ª± ƒë·ªông kh√°m ph√° c√°c profiles c√≥ s·∫µn
# Qu√©t th∆∞ m·ª•c profiles/ v√† t√¨m c√°c file .sh c√≥ function deploy_<t√™n_profile>
discover_available_profiles() {
    local profiles=()
    
    log_debug "ƒêang qu√©t th∆∞ m·ª•c profiles ƒë·ªÉ t√¨m c√°c profile c√≥ s·∫µn..."
    
    # Duy·ªát qua t·∫•t c·∫£ file .sh trong th∆∞ m·ª•c profiles
    for file in "$SCRIPT_DIR/profiles"/*.sh; do
        if [[ -f "$file" ]]; then
            local profile_name=$(basename "$file" .sh)
            
            # Ki·ªÉm tra xem file c√≥ ch·ª©a function deploy_<t√™n_profile> kh√¥ng
            # X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho gpu-nvidia (d·∫•u g·∫°ch ngang th√†nh g·∫°ch d∆∞·ªõi)
            local function_name="deploy_${profile_name//-/_}"
            if grep -q "$function_name" "$file" 2>/dev/null; then
                profiles+=("$profile_name")
                log_debug "T√¨m th·∫•y profile h·ª£p l·ªá: $profile_name"
            else
                log_debug "B·ªè qua profile kh√¥ng h·ª£p l·ªá: $profile_name (thi·∫øu function deploy)"
            fi
        fi
    done
    
    # N·∫øu kh√¥ng t√¨m th·∫•y profile n√†o, s·ª≠ d·ª•ng fallback
    if [[ ${#profiles[@]} -eq 0 ]]; then
        log_warning "Kh√¥ng t√¨m th·∫•y profile h·ª£p l·ªá n√†o trong $SCRIPT_DIR/profiles/"
        profiles=("basic")  # Profile d·ª± ph√≤ng
    fi
    
    echo "${profiles[@]}"
}

# Kh·ªüi t·∫°o danh s√°ch profiles c√≥ s·∫µn (t·ª± ƒë·ªông kh√°m ph√°)
AVAILABLE_PROFILES=($(discover_available_profiles))

# ============================================================================
# PH·∫¶N 3: HI·ªÇN TH·ªä H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG
# ============================================================================

# H√†m hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt
show_help() {
    show_banner "NEXTFLOW DOCKER - H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG"
    
    echo "C√°ch s·ª≠ d·ª•ng: $0 [T√ôY_CH·ªåN]"
    echo
    echo "üìã T√ôY CH·ªåN TRI·ªÇN KHAI:"
    echo "  --profile <t√™n>         Tri·ªÉn khai m·ªôt profile c·ª• th·ªÉ"
    echo "  --profiles <danh_s√°ch>  Tri·ªÉn khai nhi·ªÅu profiles (c√°ch nhau b·ªüi d·∫•u ph·∫©y)"
    echo "  --dry-run               Ch·ªâ hi·ªÉn th·ªã nh·ªØng g√¨ s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai"
    echo "  --force                 B·ªè qua port conflicts v√† validation"
    echo
    echo "üîß T√ôY CH·ªåN QU·∫¢N L√ù:"
    echo "  --stop                  D·ª´ng t·∫•t c·∫£ d·ªãch v·ª• (graceful)"
    echo "  --force-stop            Force stop t·∫•t c·∫£ d·ªãch v·ª• (ngay l·∫≠p t·ª©c)"
    echo "  --restart               Kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ d·ªãch v·ª•"
    echo "  --status                Hi·ªÉn th·ªã tr·∫°ng th√°i c√°c d·ªãch v·ª•"
    echo "  --logs <service>        Xem logs c·ªßa m·ªôt service c·ª• th·ªÉ"
    echo "  --update                C·∫≠p nh·∫≠t t·∫•t c·∫£ Docker images"
    echo "  --cleanup               D·ªçn d·∫πp t√†i nguy√™n Docker"
    echo
    echo "üíæ T√ôY CH·ªåN BACKUP & KH√îI PH·ª§C:"
    echo "  --checkpoint [t√™n]      T·∫°o ƒëi·ªÉm kh√¥i ph·ª•c (checkpoint)"
    echo "  --rollback [t√™n]        Kh√¥i ph·ª•c v·ªÅ ƒëi·ªÉm tr∆∞·ªõc ƒë√≥"
    echo
    echo "‚öôÔ∏è T√ôY CH·ªåN N√ÇNG CAO:"
    echo "  --hooks                 B·∫≠t pre/post deployment hooks"
    echo "  --validate              Ch·ªâ ki·ªÉm tra c·∫•u h√¨nh (kh√¥ng tri·ªÉn khai)"
    echo "  --help                  Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y"
    echo
    echo "üìÇ Profiles c√≥ s·∫µn:"
    for profile in "${AVAILABLE_PROFILES[@]}"; do
        echo "  ‚Ä¢ $profile"
    done
    echo
    echo "üí° V√≠ d·ª• s·ª≠ d·ª•ng:"
    echo "  $0 --profile basic                    # Tri·ªÉn khai profile c∆° b·∫£n"
    echo "  $0 --profiles basic,monitoring        # Tri·ªÉn khai nhi·ªÅu profiles"
    echo "  $0 --checkpoint backup-$(date +%Y%m%d) # T·∫°o checkpoint v·ªõi t√™n t√πy ch·ªânh"
    echo "  $0 --rollback backup-20250101         # Kh√¥i ph·ª•c t·ª´ checkpoint"
    echo "  $0 --dry-run --profile ai             # Xem tr∆∞·ªõc tri·ªÉn khai AI"
    echo "  $0 --hooks --profile basic            # Tri·ªÉn khai v·ªõi hooks"
    echo
    echo "üåç Bi·∫øn m√¥i tr∆∞·ªùng:"
    echo "  DEBUG=true              B·∫≠t ch·∫ø ƒë·ªô debug chi ti·∫øt"
    echo "  ENABLE_CHECKPOINTS=true B·∫≠t t·∫°o checkpoint t·ª± ƒë·ªông"
    echo "  ENABLE_HOOKS=true       B·∫≠t deployment hooks"
    echo "  DRY_RUN=true           B·∫≠t ch·∫ø ƒë·ªô xem tr∆∞·ªõc"
    echo
    echo "üìù Ghi ch√∫:"
    echo "  ‚Ä¢ T·∫•t c·∫£ logs ƒë∆∞·ª£c l∆∞u trong th∆∞ m·ª•c logs/"
    echo "  ‚Ä¢ Checkpoints ƒë∆∞·ª£c l∆∞u trong backups/deployments/"
    echo "  ‚Ä¢ Hooks ƒë∆∞·ª£c t√¨m trong scripts/hooks/"
    echo "  ‚Ä¢ S·ª≠ d·ª•ng Ctrl+C ƒë·ªÉ d·ª´ng qu√° tr√¨nh b·∫•t k·ª≥ l√∫c n√†o"
}

# ============================================================================
# PH·∫¶N 4: X·ª¨ L√ù THAM S·ªê D√íNG L·ªÜNH
# ============================================================================

# H√†m ph√¢n t√≠ch v√† x·ª≠ l√Ω c√°c tham s·ªë d√≤ng l·ªánh
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --profile)
                # Tri·ªÉn khai m·ªôt profile c·ª• th·ªÉ
                if [[ -n "${2:-}" ]]; then
                    PROFILES_TO_DEPLOY=("$2")
                    ACTION="deploy"
                    shift 2
                else
                    log_error "T√πy ch·ªçn --profile c·∫ßn m·ªôt gi√° tr·ªã (t√™n profile)"
                    exit 1
                fi
                ;;
            --profiles)
                # Tri·ªÉn khai nhi·ªÅu profiles (c√°ch nhau b·ªüi d·∫•u ph·∫©y)
                if [[ -n "${2:-}" ]]; then
                    IFS=',' read -ra PROFILES_TO_DEPLOY <<< "$2"
                    ACTION="deploy"
                    shift 2
                else
                    log_error "T√πy ch·ªçn --profiles c·∫ßn m·ªôt gi√° tr·ªã (danh s√°ch profiles)"
                    exit 1
                fi
                ;;
            --checkpoint)
                # T·∫°o checkpoint
                ACTION="checkpoint"
                CHECKPOINT_NAME="${2:-}"
                # Ki·ªÉm tra xem tham s·ªë ti·∫øp theo c√≥ ph·∫£i l√† option kh√°c kh√¥ng
                if [[ -n "${2:-}" && ! "$2" =~ ^-- ]]; then
                    shift 2
                else
                    shift
                fi
                ;;
            --rollback)
                # Kh√¥i ph·ª•c t·ª´ checkpoint
                ACTION="rollback"
                CHECKPOINT_NAME="${2:-}"
                if [[ -n "${2:-}" && ! "$2" =~ ^-- ]]; then
                    shift 2
                else
                    shift
                fi
                ;;
            --hooks)
                # B·∫≠t deployment hooks
                ENABLE_HOOKS="true"
                shift
                ;;
            --dry-run)
                # Ch·∫ø ƒë·ªô xem tr∆∞·ªõc (kh√¥ng th·ª±c thi)
                DRY_RUN="true"
                shift
                ;;
            --force)
                # B·ªè qua port conflicts v√† validation
                FORCE_DEPLOY="true"
                shift
                ;;
            --stop)
                ACTION="stop"
                shift
                ;;
            --force-stop)
                ACTION="force-stop"
                shift
                ;;
            --restart)
                ACTION="restart"
                shift
                ;;
            --restart-cloudflare)
                ACTION="restart-cloudflare"
                shift
                ;;
            --status)
                ACTION="status"
                shift
                ;;
            --logs)
                # Xem logs c·ªßa m·ªôt service c·ª• th·ªÉ
                if [[ -n "${2:-}" ]]; then
                    ACTION="logs"
                    SERVICE_NAME="$2"
                    shift 2
                else
                    log_error "T√πy ch·ªçn --logs c·∫ßn t√™n service"
                    exit 1
                fi
                ;;
            --update)
                ACTION="update"
                shift
                ;;
            --cleanup)
                ACTION="cleanup"
                shift
                ;;
            --validate)
                ACTION="validate"
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                log_error "T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # N·∫øu kh√¥ng c√≥ tham s·ªë n√†o, ch·∫°y ch·∫ø ƒë·ªô t∆∞∆°ng t√°c
    if [[ -z "$ACTION" ]]; then
        ACTION="interactive"
    fi
}

# ============================================================================
# PH·∫¶N 5: KI·ªÇM TRA V√Ä X√ÅC TH·ª∞C
# ============================================================================

# H√†m ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa m·ªôt profile
validate_profile() {
    local profile="$1"

    # Ki·ªÉm tra profile c√≥ trong danh s√°ch profiles c√≥ s·∫µn kh√¥ng
    for available_profile in "${AVAILABLE_PROFILES[@]}"; do
        if [[ "$profile" == "$available_profile" ]]; then
            return 0
        fi
    done

    # N·∫øu kh√¥ng t√¨m th·∫•y, hi·ªÉn th·ªã l·ªói v√† g·ª£i √Ω
    log_error "Profile kh√¥ng h·ª£p l·ªá: $profile"
    log_info "C√°c profile c√≥ s·∫µn: ${AVAILABLE_PROFILES[*]}"

    # G·ª£i √Ω c√°c profile t∆∞∆°ng t·ª± (fuzzy matching ƒë∆°n gi·∫£n)
    log_info "C√≥ th·ªÉ b·∫°n mu·ªën s·ª≠ d·ª•ng:"
    for available_profile in "${AVAILABLE_PROFILES[@]}"; do
        if [[ "$available_profile" == *"$profile"* ]] || [[ "$profile" == *"$available_profile"* ]]; then
            log_info "  ‚Ä¢ $available_profile"
        fi
    done

    return 1
}

# H√†m ki·ªÉm tra t·∫•t c·∫£ profiles trong danh s√°ch tri·ªÉn khai
validate_profiles() {
    for profile in "${PROFILES_TO_DEPLOY[@]}"; do
        if ! validate_profile "$profile"; then
            return 1
        fi
    done
    return 0
}

# ============================================================================
# PH·∫¶N 6: QU·∫¢N L√ù LOGS V√Ä GI√ÅM S√ÅT
# ============================================================================

# H√†m thi·∫øt l·∫≠p h·ªá th·ªëng ghi log cho qu√° tr√¨nh tri·ªÉn khai
setup_deployment_logging() {
    local log_dir="logs/deployments"
    local log_file="$log_dir/deployment-$(date +%Y%m%d_%H%M%S).log"

    # T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
    mkdir -p "$log_dir"

    # Thi·∫øt l·∫≠p file log to√†n c·ª•c
    export DEPLOYMENT_LOG_FILE="$log_file"

    log_info "ƒê√£ b·∫≠t ghi log tri·ªÉn khai: $log_file"

    # Ghi s·ª± ki·ªán b·∫Øt ƒë·∫ßu tri·ªÉn khai
    log_deployment_event "deployment_started" "${PROFILES_TO_DEPLOY[*]}"
}

# H√†m ghi log s·ª± ki·ªán tri·ªÉn khai theo ƒë·ªãnh d·∫°ng JSON c√≥ c·∫•u tr√∫c
log_deployment_event() {
    local event="$1"        # Lo·∫°i s·ª± ki·ªán (v√≠ d·ª•: deployment_started)
    local data="$2"         # D·ªØ li·ªáu k√®m theo
    local timestamp=$(date -Iseconds)           # Th·ªùi gian theo chu·∫©n ISO
    local user="${USER:-unknown}"               # Ng∆∞·ªùi d√πng th·ª±c hi·ªán
    local hostname="${HOSTNAME:-unknown}"       # T√™n m√°y ch·ªß

    # T·∫°o entry log theo ƒë·ªãnh d·∫°ng JSON
    local log_entry="{\"timestamp\":\"$timestamp\",\"event\":\"$event\",\"data\":\"$data\",\"user\":\"$user\",\"hostname\":\"$hostname\",\"pid\":$$}"

    # Ghi v√†o file log n·∫øu ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
    if [[ -n "${DEPLOYMENT_LOG_FILE:-}" ]]; then
        echo "$log_entry" >> "$DEPLOYMENT_LOG_FILE"
    fi

    # Hi·ªÉn th·ªã tr√™n console n·∫øu b·∫≠t ch·∫ø ƒë·ªô debug
    if [[ "${DEBUG:-false}" == "true" ]]; then
        log_debug "S·ª± ki·ªán: $event | D·ªØ li·ªáu: $data"
    fi
}

# ============================================================================
# PH·∫¶N 7: QU·∫¢N L√ù CHECKPOINT V√Ä ROLLBACK
# ============================================================================

# H√†m t·∫°o checkpoint (ƒëi·ªÉm kh√¥i ph·ª•c) tr∆∞·ªõc khi tri·ªÉn khai
create_deployment_checkpoint() {
    local checkpoint_name="${1:-pre-deploy-$(date +%Y%m%d_%H%M%S)}"

    # Ki·ªÉm tra xem t√≠nh nƒÉng checkpoint c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
    if [[ "$ENABLE_CHECKPOINTS" != "true" ]]; then
        log_debug "T√≠nh nƒÉng checkpoint b·ªã t·∫Øt, b·ªè qua..."
        return 0
    fi

    # T·∫°o th∆∞ m·ª•c checkpoint n·∫øu ch∆∞a t·ªìn t·∫°i
    mkdir -p "$CHECKPOINT_DIR"

    log_info "ƒêang t·∫°o checkpoint: $checkpoint_name"

    # L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa c√°c container
    if $DOCKER_COMPOSE -f "$COMPOSE_FILE" ps --format json > "$CHECKPOINT_DIR/${checkpoint_name}-containers.json" 2>/dev/null; then
        log_debug "ƒê√£ l∆∞u tr·∫°ng th√°i containers"
    fi

    # Sao l∆∞u file m√¥i tr∆∞·ªùng (.env)
    if cp .env "$CHECKPOINT_DIR/${checkpoint_name}.env" 2>/dev/null; then
        log_debug "ƒê√£ sao l∆∞u file m√¥i tr∆∞·ªùng"
    fi

    # Sao l∆∞u file docker-compose
    if cp "$COMPOSE_FILE" "$CHECKPOINT_DIR/${checkpoint_name}-compose.yml" 2>/dev/null; then
        log_debug "ƒê√£ sao l∆∞u file docker-compose"
    fi

    # T·∫°o file metadata ch·ª©a th√¥ng tin checkpoint
    cat > "$CHECKPOINT_DIR/${checkpoint_name}-metadata.json" << EOF
{
    "timestamp": "$(date -Iseconds)",
    "profiles": [$(printf '"%s",' "${PROFILES_TO_DEPLOY[@]}" | sed 's/,$//')]
    "user": "${USER:-unknown}",
    "hostname": "${HOSTNAME:-unknown}",
    "compose_file": "$COMPOSE_FILE",
    "description": "Checkpoint ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông tr∆∞·ªõc khi tri·ªÉn khai"
}
EOF

    log_success "ƒê√£ t·∫°o checkpoint th√†nh c√¥ng: $checkpoint_name"
    log_deployment_event "checkpoint_created" "$checkpoint_name"

    echo "$checkpoint_name"
}

# H√†m kh√¥i ph·ª•c h·ªá th·ªëng t·ª´ m·ªôt checkpoint
rollback_deployment() {
    local checkpoint_name="$1"

    # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh checkpoint, hi·ªÉn th·ªã danh s√°ch c√≥ s·∫µn
    if [[ -z "$checkpoint_name" ]]; then
        echo "üìã Danh s√°ch checkpoints c√≥ s·∫µn:"
        if [[ -d "$CHECKPOINT_DIR" ]]; then
            ls -1 "$CHECKPOINT_DIR"/*-metadata.json 2>/dev/null | while read -r file; do
                local name=$(basename "$file" "-metadata.json")
                local timestamp=$(jq -r '.timestamp' "$file" 2>/dev/null || echo "kh√¥ng r√µ")
                local profiles=$(jq -r '.profiles | join(", ")' "$file" 2>/dev/null || echo "kh√¥ng r√µ")
                echo "  ‚Ä¢ $name"
                echo "    Th·ªùi gian: $timestamp"
                echo "    Profiles: $profiles"
                echo
            done
        else
            log_warning "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c checkpoints"
            return 1
        fi

        read -p "Nh·∫≠p t√™n checkpoint ƒë·ªÉ kh√¥i ph·ª•c: " checkpoint_name
    fi

    # Ki·ªÉm tra checkpoint c√≥ t·ªìn t·∫°i kh√¥ng
    if [[ ! -f "$CHECKPOINT_DIR/${checkpoint_name}-metadata.json" ]]; then
        log_error "Kh√¥ng t√¨m th·∫•y checkpoint: $checkpoint_name"
        return 1
    fi

    log_info "ƒêang kh√¥i ph·ª•c t·ª´ checkpoint: $checkpoint_name"
    log_deployment_event "rollback_started" "$checkpoint_name"

    # X√°c nh·∫≠n v·ªõi ng∆∞·ªùi d√πng
    if ! confirm_action "Thao t√°c n√†y s·∫Ω d·ª´ng c√°c d·ªãch v·ª• hi·ªán t·∫°i v√† kh√¥i ph·ª•c tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥. Ti·∫øp t·ª•c?"; then
        log_info "ƒê√£ h·ªßy thao t√°c rollback"
        return 0
    fi

    # D·ª´ng t·∫•t c·∫£ d·ªãch v·ª• hi·ªán t·∫°i
    log_info "ƒêang d·ª´ng c√°c d·ªãch v·ª• hi·ªán t·∫°i..."
    stop_all_services

    # Kh√¥i ph·ª•c file m√¥i tr∆∞·ªùng
    if [[ -f "$CHECKPOINT_DIR/${checkpoint_name}.env" ]]; then
        cp "$CHECKPOINT_DIR/${checkpoint_name}.env" .env
        log_info "ƒê√£ kh√¥i ph·ª•c file m√¥i tr∆∞·ªùng"
    fi

    # Kh√¥i ph·ª•c v√† tri·ªÉn khai l·∫°i c√°c profiles
    local profiles=($(jq -r '.profiles[]' "$CHECKPOINT_DIR/${checkpoint_name}-metadata.json" 2>/dev/null))
    if [[ ${#profiles[@]} -gt 0 ]]; then
        log_info "ƒêang kh√¥i ph·ª•c c√°c profiles: ${profiles[*]}"
        PROFILES_TO_DEPLOY=("${profiles[@]}")
        deploy_profiles
    fi

    log_success "ƒê√£ ho√†n t·∫•t rollback!"
    log_deployment_event "rollback_completed" "$checkpoint_name"
}

# ============================================================================
# PH·∫¶N 8: X·ª¨ L√ù L·ªñI V√Ä KH√îI PH·ª§C T·ª∞ ƒê·ªòNG
# ============================================================================

# H√†m x·ª≠ l√Ω l·ªói tri·ªÉn khai v·ªõi c√°c t√πy ch·ªçn kh√¥i ph·ª•c
handle_deployment_error() {
    local profile="$1"              # Profile b·ªã l·ªói
    local error_code="${2:-1}"      # M√£ l·ªói (m·∫∑c ƒë·ªãnh l√† 1)

    log_error "Tri·ªÉn khai profile '$profile' th·∫•t b·∫°i (m√£ l·ªói: $error_code)"
    log_deployment_event "deployment_error" "$profile:$error_code"

    # Thu th·∫≠p th√¥ng tin ch·∫©n ƒëo√°n
    collect_deployment_diagnostics "$profile"

    # N·∫øu b·∫≠t kh√¥i ph·ª•c t·ª± ƒë·ªông, hi·ªÉn th·ªã c√°c t√πy ch·ªçn
    if [[ "$AUTO_RECOVERY" == "true" ]]; then
        offer_recovery_options "$profile"
    else
        log_error "Kh√¥i ph·ª•c t·ª± ƒë·ªông b·ªã t·∫Øt. ƒêang tho√°t..."
        exit "$error_code"
    fi
}

# H√†m thu th·∫≠p th√¥ng tin ch·∫©n ƒëo√°n khi c√≥ l·ªói
collect_deployment_diagnostics() {
    local profile="$1"
    local diag_dir="logs/diagnostics/$(date +%Y%m%d_%H%M%S)"

    log_info "ƒêang thu th·∫≠p th√¥ng tin ch·∫©n ƒëo√°n..."
    mkdir -p "$diag_dir"

    # Thu th·∫≠p th√¥ng tin h·ªá th·ªëng
    {
        echo "=== TH√îNG TIN H·ªÜ TH·ªêNG ==="
        uname -a
        echo
        echo "=== TH√îNG TIN DOCKER ==="
        docker system df
        echo
        echo "=== TH·ªêNG K√ä DOCKER ==="
        docker stats --no-stream
        echo
        echo "=== S·ª¨ D·ª§NG ·ªî C·ª®NG ==="
        df -h
        echo
        echo "=== S·ª¨ D·ª§NG B·ªò NH·ªö ==="
        if command -v free &> /dev/null; then
            free -h
        elif command -v wmic &> /dev/null; then
            # Windows memory info
            wmic OS get TotalVisibleMemorySize,FreePhysicalMemory /format:list 2>/dev/null || echo "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b·ªô nh·ªõ"
        else
            echo "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b·ªô nh·ªõ (thi·∫øu free/wmic command)"
        fi
        echo
        echo "=== GIAO DI·ªÜN M·∫†NG ==="
        ip addr show 2>/dev/null || ifconfig 2>/dev/null || echo "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m·∫°ng"
    } > "$diag_dir/system-info.txt"

    # Thu th·∫≠p logs Docker Compose
    if [[ -f "$COMPOSE_FILE" ]]; then
        $DOCKER_COMPOSE -f "$COMPOSE_FILE" logs > "$diag_dir/compose-logs.txt" 2>&1
    fi

    # Thu th·∫≠p logs c·ªßa t·ª´ng service trong profile b·ªã l·ªói
    if [[ -n "$profile" ]]; then
        local profile_services=()
        case "$profile" in
            "basic")
                profile_services=("postgres" "redis" "n8n" "flowise" "wordpress" "mariadb")
                ;;
            "ai")
                profile_services=("ollama" "open-webui")
                ;;
            "langflow")
                profile_services=("postgres" "redis" "langflow" "cloudflare-tunnel-ai")
                ;;
            "monitoring")
                profile_services=("prometheus" "grafana" "loki")
                ;;
            "gitlab")
                profile_services=("postgres" "redis" "gitlab")
                ;;
            "mail")
                profile_services=("postgres" "redis" "stalwart-mail")
                ;;
            "cpu")
                profile_services=("ollama" "ollama-pull-llama")
                ;;
            "gpu-nvidia")
                profile_services=("ollama" "ollama-pull-llama")
                ;;
            "messaging")
                profile_services=("rabbitmq")
                ;;
            "auth")
                profile_services=("postgres" "keycloak")
                ;;
            "tracing")
                profile_services=("jaeger")
                ;;
        esac

        for service in "${profile_services[@]}"; do
            if docker ps -a --format "{{.Names}}" | grep -q "^${service}$"; then
                docker logs "$service" > "$diag_dir/${service}-logs.txt" 2>&1
            fi
        done
    fi

    # Sao l∆∞u c·∫•u h√¨nh m√¥i tr∆∞·ªùng v√† docker-compose
    cp .env "$diag_dir/environment.env" 2>/dev/null || echo "Kh√¥ng c√≥ file .env" > "$diag_dir/environment.env"
    cp "$COMPOSE_FILE" "$diag_dir/docker-compose.yml" 2>/dev/null

    log_info "Th√¥ng tin ch·∫©n ƒëo√°n ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: $diag_dir"
    echo "$diag_dir"
}

# H√†m hi·ªÉn th·ªã c√°c t√πy ch·ªçn kh√¥i ph·ª•c khi c√≥ l·ªói
offer_recovery_options() {
    local profile="$1"

    while true; do
        echo
        log_info "üîß C√°c t√πy ch·ªçn kh√¥i ph·ª•c cho profile '$profile':"
        echo "1. Th·ª≠ l·∫°i tri·ªÉn khai profile n√†y"
        echo "2. B·ªè qua profile n√†y v√† ti·∫øp t·ª•c v·ªõi c√°c profile kh√°c"
        echo "3. Rollback v·ªÅ checkpoint tr∆∞·ªõc ƒë√≥"
        echo "4. Xem logs chi ti·∫øt"
        echo "5. Thu th·∫≠p v√† xem th√¥ng tin ch·∫©n ƒëo√°n"
        echo "6. Tho√°t kh·ªèi qu√° tr√¨nh tri·ªÉn khai"

        read -p "Ch·ªçn t√πy ch·ªçn kh√¥i ph·ª•c (1-6): " recovery_choice

        case $recovery_choice in
            1)
                log_info "ƒêang th·ª≠ l·∫°i tri·ªÉn khai profile '$profile'..."
                deploy_single_profile "$profile"
                return $?
                ;;
            2)
                log_warning "B·ªè qua profile: $profile"
                return 0
                ;;
            3)
                rollback_deployment
                return $?
                ;;
            4)
                show_detailed_logs "$profile"
                # Continue loop ƒë·ªÉ hi·ªÉn th·ªã l·∫°i menu
                ;;
            5)
                local diag_dir=$(collect_deployment_diagnostics "$profile")
                log_info "ƒêang m·ªü th∆∞ m·ª•c ch·∫©n ƒëo√°n: $diag_dir"
                # Th·ª≠ m·ªü b·∫±ng c√°c editor c√≥ s·∫µn
                if command -v code &> /dev/null; then
                    code "$diag_dir"
                elif command -v nano &> /dev/null; then
                    nano "$diag_dir/system-info.txt"
                else
                    cat "$diag_dir/system-info.txt"
                fi
                # Continue loop ƒë·ªÉ hi·ªÉn th·ªã l·∫°i menu
                ;;
            6)
                log_info "ƒêang tho√°t kh·ªèi qu√° tr√¨nh tri·ªÉn khai..."
                exit 1
                ;;
            *)
                log_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn t·ª´ 1-6."
                # Continue loop ƒë·ªÉ hi·ªÉn th·ªã l·∫°i menu
                ;;
        esac
    done
}

# H√†m hi·ªÉn th·ªã logs chi ti·∫øt ƒë·ªÉ troubleshooting
show_detailed_logs() {
    local profile="$1"

    log_info "üìã Hi·ªÉn th·ªã logs chi ti·∫øt cho profile: $profile"

    # Hi·ªÉn th·ªã logs Docker Compose
    echo "=== LOGS DOCKER COMPOSE ==="
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" logs --tail=50

    echo
    echo "=== C√ÅC CONTAINER B·ªä L·ªñI ==="
    docker ps -a --filter "status=exited" --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"

    echo
    read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."
}

# ============================================================================
# PH·∫¶N 9: QU·∫¢N L√ù DEPLOYMENT HOOKS
# ============================================================================

# H√†m ch·∫°y pre-deployment hooks (tr∆∞·ªõc khi tri·ªÉn khai)
run_pre_deployment_hooks() {
    local profile="$1"

    # Ki·ªÉm tra xem hooks c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
    if [[ "$ENABLE_HOOKS" != "true" ]]; then
        return 0
    fi

    local hook_file="$HOOKS_DIR/pre-deploy-${profile}.sh"

    if [[ -f "$hook_file" ]]; then
        log_info "üîÑ ƒêang ch·∫°y pre-deployment hook cho profile '$profile'..."
        log_deployment_event "pre_hook_started" "$profile"

        if bash "$hook_file"; then
            log_success "‚úÖ Pre-deployment hook ho√†n th√†nh cho profile '$profile'"
            log_deployment_event "pre_hook_completed" "$profile"
        else
            log_error "‚ùå Pre-deployment hook th·∫•t b·∫°i cho profile '$profile'"
            log_deployment_event "pre_hook_failed" "$profile"
            return 1
        fi
    else
        log_debug "Kh√¥ng t√¨m th·∫•y pre-deployment hook cho profile '$profile'"
    fi
}

# H√†m ch·∫°y post-deployment hooks (sau khi tri·ªÉn khai)
run_post_deployment_hooks() {
    local profile="$1"

    # Ki·ªÉm tra xem hooks c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
    if [[ "$ENABLE_HOOKS" != "true" ]]; then
        return 0
    fi

    local hook_file="$HOOKS_DIR/post-deploy-${profile}.sh"

    if [[ -f "$hook_file" ]]; then
        log_info "üîÑ ƒêang ch·∫°y post-deployment hook cho profile '$profile'..."
        log_deployment_event "post_hook_started" "$profile"

        if bash "$hook_file"; then
            log_success "‚úÖ Post-deployment hook ho√†n th√†nh cho profile '$profile'"
            log_deployment_event "post_hook_completed" "$profile"
        else
            log_warning "‚ö†Ô∏è Post-deployment hook th·∫•t b·∫°i cho profile '$profile' (kh√¥ng nghi√™m tr·ªçng)"
            log_deployment_event "post_hook_failed" "$profile"
        fi
    else
        log_debug "Kh√¥ng t√¨m th·∫•y post-deployment hook cho profile '$profile'"
    fi
}

# ============================================================================
# PH·∫¶N 10: TRI·ªÇN KHAI PROFILES
# ============================================================================

# H√†m tri·ªÉn khai m·ªôt profile c·ª• th·ªÉ v·ªõi x·ª≠ l√Ω l·ªói n√¢ng cao
deploy_single_profile() {
    local profile="$1"

    log_info "üöÄ ƒêang tri·ªÉn khai profile: $profile"
    log_deployment_event "profile_deployment_started" "$profile"

    # Ch·∫°y pre-deployment hooks
    if ! run_pre_deployment_hooks "$profile"; then
        log_error "Pre-deployment hook th·∫•t b·∫°i cho profile '$profile'"
        handle_deployment_error "$profile" 2
        return 1
    fi

    # Tri·ªÉn khai d·ª±a tr√™n lo·∫°i profile
    local deploy_success=false

    case "$profile" in
        "basic")
            if [[ -f "$SCRIPT_DIR/profiles/basic.sh" ]]; then
                source "$SCRIPT_DIR/profiles/basic.sh"
                if deploy_basic "$FORCE_DEPLOY"; then
                    deploy_success=true
                fi
            else
                log_error "Kh√¥ng t√¨m th·∫•y script profile: basic.sh"
            fi
            ;;
        "monitoring")
            if [[ -f "$SCRIPT_DIR/profiles/monitoring.sh" ]]; then
                source "$SCRIPT_DIR/profiles/monitoring.sh"
                if deploy_monitoring "$FORCE_DEPLOY"; then
                    deploy_success=true
                fi
            else
                log_error "Kh√¥ng t√¨m th·∫•y script profile: monitoring.sh"
            fi
            ;;
        "ai")
            if [[ -f "$SCRIPT_DIR/profiles/ai.sh" ]]; then
                source "$SCRIPT_DIR/profiles/ai.sh"
                if deploy_ai "$FORCE_DEPLOY"; then
                    deploy_success=true
                fi
            else
                log_error "Kh√¥ng t√¨m th·∫•y script profile: ai.sh"
            fi
            ;;
        "gitlab")
            if [[ -f "$SCRIPT_DIR/profiles/gitlab.sh" ]]; then
                source "$SCRIPT_DIR/profiles/gitlab.sh"
                if deploy_gitlab "$FORCE_DEPLOY"; then
                    deploy_success=true
                fi
            else
                log_error "Kh√¥ng t√¨m th·∫•y script profile: gitlab.sh"
            fi
            ;;
        "mail")
            if [[ -f "$SCRIPT_DIR/profiles/mail.sh" ]]; then
                source "$SCRIPT_DIR/profiles/mail.sh"
                if deploy_mail "$FORCE_DEPLOY"; then
                    deploy_success=true
                fi
            else
                log_error "Kh√¥ng t√¨m th·∫•y script profile: mail.sh"
            fi
            ;;
        "langflow")
            if [[ -f "$SCRIPT_DIR/profiles/langflow.sh" ]]; then
                source "$SCRIPT_DIR/profiles/langflow.sh"
                if deploy_langflow "$FORCE_DEPLOY"; then
                    deploy_success=true
                fi
            else
                log_error "Kh√¥ng t√¨m th·∫•y script profile: langflow.sh"
            fi
            ;;
        "gpu-nvidia")
            if [[ -f "$SCRIPT_DIR/profiles/gpu-nvidia.sh" ]]; then
                source "$SCRIPT_DIR/profiles/gpu-nvidia.sh"
                if deploy_gpu_nvidia "$FORCE_DEPLOY"; then
                    deploy_success=true
                fi
            else
                log_error "Kh√¥ng t√¨m th·∫•y script profile: gpu-nvidia.sh"
            fi
            ;;
        *)
            log_error "Profile kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: $profile"
            log_info "C√°c profile c√≥ s·∫µn: ${AVAILABLE_PROFILES[*]}"
            return 1
            ;;
    esac

    # Ki·ªÉm tra k·∫øt qu·∫£ tri·ªÉn khai
    if [[ "$deploy_success" == "true" ]]; then
        log_success "‚úÖ Profile '$profile' ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai th√†nh c√¥ng!"
        log_deployment_event "profile_deployment_success" "$profile"

        # Ch·∫°y post-deployment hooks
        run_post_deployment_hooks "$profile"

        return 0
    else
        log_error "‚ùå Tri·ªÉn khai profile '$profile' th·∫•t b·∫°i!"
        log_deployment_event "profile_deployment_failed" "$profile"
        handle_deployment_error "$profile" 1
        return 1
    fi
}

# H√†m tri·ªÉn khai nhi·ªÅu profiles v·ªõi gi√°m s√°t ti·∫øn tr√¨nh
deploy_profiles() {
    show_banner "üöÄ TRI·ªÇN KHAI PROFILES (ENHANCED)"

    # Thi·∫øt l·∫≠p h·ªá th·ªëng ghi log
    setup_deployment_logging

    log_info "üìã Profiles s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai: ${PROFILES_TO_DEPLOY[*]}"

    # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa t·∫•t c·∫£ profiles
    if ! validate_profiles; then
        exit 1
    fi

    # T·∫°o checkpoint tr∆∞·ªõc khi tri·ªÉn khai
    if [[ "$ENABLE_CHECKPOINTS" == "true" ]]; then
        CURRENT_CHECKPOINT=$(create_deployment_checkpoint)
    fi

    # Ch·∫ø ƒë·ªô dry run (xem tr∆∞·ªõc)
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "üîç CH·∫æ ƒê·ªò XEM TR∆Ø·ªöC - Hi·ªÉn th·ªã nh·ªØng g√¨ s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai:"
        for profile in "${PROFILES_TO_DEPLOY[@]}"; do
            echo "  üì¶ Profile: $profile"
            echo "    üîß Pre-hook: $HOOKS_DIR/pre-deploy-${profile}.sh"
            echo "    üìú Deploy script: $SCRIPT_DIR/profiles/${profile}.sh"
            echo "    ‚úÖ Post-hook: $HOOKS_DIR/post-deploy-${profile}.sh"
        done
        log_info "Xem tr∆∞·ªõc ho√†n t·∫•t. S·ª≠ d·ª•ng l·ªánh kh√¥ng c√≥ --dry-run ƒë·ªÉ th·ª±c thi."
        return 0
    fi

    # Tri·ªÉn khai t·ª´ng profile v·ªõi theo d√µi ti·∫øn tr√¨nh
    local total_profiles=${#PROFILES_TO_DEPLOY[@]}
    local current_profile=0
    local failed_profiles=()

    for profile in "${PROFILES_TO_DEPLOY[@]}"; do
        current_profile=$((current_profile + 1))

        log_info "üìä Ti·∫øn tr√¨nh: $current_profile/$total_profiles"
        show_progress $current_profile $total_profiles

        if deploy_single_profile "$profile"; then
            log_success "‚úÖ Profile '$profile' ho√†n th√†nh th√†nh c√¥ng"
        else
            log_error "‚ùå Profile '$profile' th·∫•t b·∫°i"
            failed_profiles+=("$profile")

            # H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën ti·∫øp t·ª•c v·ªõi c√°c profile c√≤n l·∫°i kh√¥ng
            if [[ $current_profile -lt $total_profiles ]]; then
                if ! confirm_action "Ti·∫øp t·ª•c v·ªõi c√°c profiles c√≤n l·∫°i?"; then
                    log_info "Qu√° tr√¨nh tri·ªÉn khai ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi ng∆∞·ªùi d√πng"
                    break
                fi
            fi
        fi
    done

    # Hi·ªÉn th·ªã t·ªïng k·∫øt cu·ªëi c√πng
    show_enhanced_deployment_summary "${failed_profiles[@]}"

    # Tr·∫£ v·ªÅ m√£ tho√°t ph√π h·ª£p
    if [[ ${#failed_profiles[@]} -eq 0 ]]; then
        log_deployment_event "deployment_completed_success" "${PROFILES_TO_DEPLOY[*]}"
        return 0
    else
        log_deployment_event "deployment_completed_with_failures" "${failed_profiles[*]}"
        return 1
    fi
}

# ============================================================================
# PH·∫¶N 11: HI·ªÇN TH·ªä T·ªîNG K·∫æT V√Ä TH√îNG TIN
# ============================================================================

# H√†m hi·ªÉn th·ªã t·ªïng k·∫øt tri·ªÉn khai n√¢ng cao
show_enhanced_deployment_summary() {
    local failed_profiles=("$@")

    show_banner "üìä T·ªîNG K·∫æT TRI·ªÇN KHAI"

    if [[ ${#failed_profiles[@]} -eq 0 ]]; then
        log_success "üéâ T·∫•t c·∫£ profiles ƒë√£ ƒë∆∞·ª£c tri·ªÉn khai th√†nh c√¥ng!"
    else
        log_warning "‚ö†Ô∏è Tri·ªÉn khai ho√†n t·∫•t v·ªõi m·ªôt s·ªë l·ªói"
        echo "‚ùå Profiles th·∫•t b·∫°i: ${failed_profiles[*]}"
    fi

    echo
    log_info "üìã Profiles ƒë√£ tri·ªÉn khai: ${PROFILES_TO_DEPLOY[*]}"
    echo

    # Hi·ªÉn th·ªã tr·∫°ng th√°i hi·ªán t·∫°i
    log_info "üìà Tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa c√°c d·ªãch v·ª•:"
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" ps
    echo

    # Hi·ªÉn th·ªã th√¥ng tin checkpoint
    if [[ -n "$CURRENT_CHECKPOINT" ]]; then
        log_info "üíæ Checkpoint ƒë√£ ƒë∆∞·ª£c t·∫°o: $CURRENT_CHECKPOINT"
        echo "  üîÑ ƒê·ªÉ rollback: $0 --rollback $CURRENT_CHECKPOINT"
    fi

    # Hi·ªÉn th·ªã c√°c l·ªánh qu·∫£n l√Ω
    log_info "üîß C√°c l·ªánh qu·∫£n l√Ω h·ªØu √≠ch:"
    echo "  üìã Xem logs: $0 --logs <t√™n_service>"
    echo "  ‚èπÔ∏è  D·ª´ng t·∫•t c·∫£: $0 --stop"
    echo "  üìä Xem tr·∫°ng th√°i: $0 --status"
    echo "  üîÑ C·∫≠p nh·∫≠t: $0 --update"
    echo "  ‚Ü©Ô∏è  Rollback: $0 --rollback"

    # Hi·ªÉn th·ªã v·ªã tr√≠ file log
    if [[ -n "$DEPLOYMENT_LOG_FILE" ]]; then
        echo
        log_info "üìù Log tri·ªÉn khai: $DEPLOYMENT_LOG_FILE"
    fi

    # Hi·ªÉn th·ªã URLs truy c·∫≠p c√°c d·ªãch v·ª•
    echo
    log_info "üåê URLs truy c·∫≠p c√°c d·ªãch v·ª• ch√≠nh:"
    echo "  üè† WordPress (Landing Page): http://localhost:8080"
    echo "  ü§ñ Flowise AI: http://localhost:8001"
    echo "  üîó n8n Automation: http://localhost:8003"
    echo "  üåä Langflow AI Workflow: http://localhost:7860 (admin/nextflow@2025)"
    echo "  ü§ñ Open-WebUI (Ollama): http://localhost:8002"
    echo "  üìä Grafana Monitoring: http://localhost:9001"
    echo "  üíæ Redis Commander: http://localhost:6101"
    echo "  üìß Stalwart Mail Admin: http://localhost:8005"
    echo "  ü¶ä GitLab: http://localhost:8004 (root/Nex!tFlow@2025!)"
}

# ============================================================================
# PH·∫¶N 12: KH·ªûI T·∫†O M√îI TR∆Ø·ªúNG V√Ä C√ÅC FUNCTIONS QU·∫¢N L√ù
# ============================================================================

# H√†m kh·ªüi t·∫°o m√¥i tr∆∞·ªùng tri·ªÉn khai n√¢ng cao
initialize_environment() {
    log_info "üîß ƒêang kh·ªüi t·∫°o m√¥i tr∆∞·ªùng tri·ªÉn khai..."

    # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n
    cd "$PROJECT_ROOT"

    # T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
    mkdir -p logs/deployments logs/diagnostics "$CHECKPOINT_DIR" "$HOOKS_DIR"

    # Ki·ªÉm tra Docker v√† Docker Compose
    if ! check_docker || ! check_docker_compose; then
        log_error "Docker ho·∫∑c Docker Compose kh√¥ng s·∫µn s√†ng!"
        log_info "Vui l√≤ng c√†i ƒë·∫∑t Docker v√† Docker Compose tr∆∞·ªõc khi ti·∫øp t·ª•c."
        exit 1
    fi

    # Ki·ªÉm tra file docker-compose
    if ! validate_docker_compose_file "$COMPOSE_FILE"; then
        log_error "File docker-compose kh√¥ng h·ª£p l·ªá: $COMPOSE_FILE"
        exit 1
    fi

    # Ki·ªÉm tra file .env
    validate_env_file

    # Hi·ªÉn th·ªã c·∫•u h√¨nh hi·ªán t·∫°i
    log_info "‚öôÔ∏è C·∫•u h√¨nh hi·ªán t·∫°i:"
    echo "  üìÑ File Compose: $COMPOSE_FILE"
    echo "  üì¶ Profiles c√≥ s·∫µn: ${AVAILABLE_PROFILES[*]}"
    echo "  üíæ Checkpoints: $ENABLE_CHECKPOINTS"
    echo "  üîó Hooks: $ENABLE_HOOKS"
    echo "  üëÅÔ∏è  Dry run: $DRY_RUN"
    echo "  üîÑ Auto recovery: $AUTO_RECOVERY"

    log_success "‚úÖ M√¥i tr∆∞·ªùng ƒë√£ s·∫µn s√†ng!"
}

# H√†m d·ª´ng t·∫•t c·∫£ d·ªãch v·ª• n√¢ng cao
stop_all_services() {
    show_banner "‚èπÔ∏è D·ª™NG T·∫§T C·∫¢ D·ªäCH V·ª§"

    log_info "üõë ƒêang d·ª´ng t·∫•t c·∫£ containers..."
    log_deployment_event "stop_all_started" "all"

    # L·∫•y danh s√°ch t·∫•t c·∫£ containers ƒëang ch·∫°y t·ª´ docker-compose
    local running_containers
    running_containers=$(docker ps --format "{{.Names}}" | grep -E "(postgres|redis|mariadb|wordpress|n8n|flowise|langflow|ollama|open-webui|cloudflare-tunnel|cloudflare-tunnel-ai|gitlab|stalwart|qdrant|rabbitmq|redis-commander)" 2>/dev/null || true)

    if [[ -n "$running_containers" ]]; then
        log_info "üìã Containers ƒëang ch·∫°y:"
        echo "$running_containers" | while read -r container; do
            echo "  - $container"
        done
        echo

        # D·ª´ng t·ª´ng container m·ªôt c√°ch graceful
        echo "$running_containers" | while read -r container; do
            if [[ -n "$container" ]]; then
                log_info "‚èπÔ∏è ƒêang d·ª´ng container: $container"
                docker stop "$container" 2>/dev/null || true
                docker rm "$container" 2>/dev/null || true
            fi
        done
    fi

    # D·ª´ng t·∫•t c·∫£ profiles m·ªôt c√°ch graceful (s·ª≠ d·ª•ng danh s√°ch profiles c√≥ s·∫µn)
    local profiles_to_stop=("${AVAILABLE_PROFILES[@]}")

    for profile in "${profiles_to_stop[@]}"; do
        log_info "‚èπÔ∏è ƒêang d·ª´ng profile: $profile"
        $DOCKER_COMPOSE -f "$COMPOSE_FILE" --profile "$profile" down --remove-orphans 2>/dev/null || true
    done

    # D·ª´ng t·∫•t c·∫£ containers c√≤n l·∫°i t·ª´ docker-compose
    log_info "üßπ D·ªçn d·∫πp containers c√≤n l·∫°i..."
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" down --remove-orphans 2>/dev/null || true

    # Ki·ªÉm tra v√† d·ª´ng b·∫•t k·ª≥ containers n√†o c√≤n s√≥t l·∫°i
    local remaining_containers
    remaining_containers=$(docker ps --format "{{.Names}}" | grep -E "(postgres|redis|mariadb|wordpress|n8n|flowise|langflow|ollama|open-webui|cloudflare-tunnel|cloudflare-tunnel-ai|gitlab|stalwart|qdrant|rabbitmq|redis-commander)" 2>/dev/null || true)

    if [[ -n "$remaining_containers" ]]; then
        log_warning "‚ö†Ô∏è V·∫´n c√≤n containers ƒëang ch·∫°y, force stop..."
        echo "$remaining_containers" | while read -r container; do
            if [[ -n "$container" ]]; then
                log_info "üî® Force stop: $container"
                docker kill "$container" 2>/dev/null || true
                docker rm "$container" 2>/dev/null || true
            fi
        done
    fi

    # Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
    local final_check
    final_check=$(docker ps --format "{{.Names}}" | grep -E "(postgres|redis|mariadb|wordpress|n8n|flowise|langflow|ollama|open-webui|cloudflare-tunnel|cloudflare-tunnel-ai|gitlab|stalwart|qdrant|rabbitmq|redis-commander)" 2>/dev/null || true)

    if [[ -z "$final_check" ]]; then
        log_success "‚úÖ T·∫•t c·∫£ d·ªãch v·ª• ƒë√£ ƒë∆∞·ª£c d·ª´ng th√†nh c√¥ng!"
    else
        log_warning "‚ö†Ô∏è M·ªôt s·ªë containers v·∫´n ƒëang ch·∫°y:"
        echo "$final_check"
    fi

    log_deployment_event "stop_all_completed" "all"
}

# H√†m force stop t·∫•t c·∫£ containers NextFlow
force_stop_all_services() {
    show_banner "üî® FORCE STOP T·∫§T C·∫¢ D·ªäCH V·ª§"

    log_warning "‚ö†Ô∏è ƒêang force stop t·∫•t c·∫£ containers NextFlow..."

    # L·∫•y t·∫•t c·∫£ containers li√™n quan ƒë·∫øn NextFlow
    local all_containers
    all_containers=$(docker ps -a --format "{{.Names}}" | grep -E "(postgres|redis|mariadb|wordpress|n8n|flowise|langflow|ollama|open-webui|cloudflare-tunnel|cloudflare-tunnel-ai|gitlab|stalwart|qdrant|rabbitmq|redis-commander)" 2>/dev/null || true)

    if [[ -n "$all_containers" ]]; then
        log_info "üìã T·∫•t c·∫£ containers NextFlow:"
        echo "$all_containers" | while read -r container; do
            echo "  - $container"
        done
        echo

        # Force kill v√† remove t·∫•t c·∫£
        echo "$all_containers" | while read -r container; do
            if [[ -n "$container" ]]; then
                log_info "üî® Force kill: $container"
                docker kill "$container" 2>/dev/null || true
                docker rm -f "$container" 2>/dev/null || true
            fi
        done

        # D·ªçn d·∫πp networks
        log_info "üßπ D·ªçn d·∫πp networks..."
        docker network prune -f 2>/dev/null || true

        # D·ªçn d·∫πp volumes (t√πy ch·ªçn)
        if confirm_action "üóëÔ∏è X√≥a t·∫•t c·∫£ volumes (d·ªØ li·ªáu s·∫Ω m·∫•t)?"; then
            log_warning "‚ö†Ô∏è ƒêang x√≥a volumes..."
            docker volume prune -f 2>/dev/null || true
        fi

        log_success "‚úÖ Force stop ho√†n t·∫•t!"
    else
        log_info "‚ÑπÔ∏è Kh√¥ng c√≥ containers NextFlow n√†o ƒëang ch·∫°y."
    fi
}

# H√†m kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ d·ªãch v·ª•
restart_all_services() {
    show_banner "üîÑ KH·ªûI ƒê·ªòNG L·∫†I T·∫§T C·∫¢ D·ªäCH V·ª§"

    log_info "üîÑ ƒêang kh·ªüi ƒë·ªông l·∫°i t·∫•t c·∫£ d·ªãch v·ª•..."
    log_deployment_event "restart_started" "all"

    # D·ª´ng tr∆∞·ªõc
    stop_all_services

    # Ch·ªù m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ ƒë√£ d·ª´ng ho√†n to√†n
    log_info "‚è≥ Ch·ªù 5 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ d·ªãch v·ª• ƒë√£ d·ª´ng..."
    sleep 5

    # Tri·ªÉn khai l·∫°i v·ªõi profile m·∫∑c ƒë·ªãnh ho·∫∑c profiles ƒë√£ ch·ªâ ƒë·ªãnh
    if [[ ${#PROFILES_TO_DEPLOY[@]} -eq 0 ]]; then
        PROFILES_TO_DEPLOY=("$DEFAULT_PROFILE")
    fi

    deploy_profiles
    log_deployment_event "restart_completed" "all"
}

# H√†m restart Cloudflare tunnel
restart_cloudflare_tunnel() {
    show_banner "‚òÅÔ∏è RESTART CLOUDFLARE TUNNEL"

    log_info "üîÑ ƒêang restart Cloudflare tunnel..."
    log_deployment_event "restart_cloudflare_started" "cloudflare-tunnel"

    cd "$PROJECT_ROOT"

    # Ki·ªÉm tra xem c√≥ tunnel n√†o ƒëang ch·∫°y kh√¥ng
    local tunnels_found=false
    local tunnel_containers=("cloudflare-tunnel" "cloudflare-tunnel-ai")

    for tunnel in "${tunnel_containers[@]}"; do
        if is_container_running "$tunnel"; then
            log_info "üîÑ Restart container: $tunnel"
            if docker restart "$tunnel"; then
                log_success "‚úÖ ƒê√£ restart $tunnel th√†nh c√¥ng!"
                tunnels_found=true
            else
                log_error "‚ùå Restart $tunnel th·∫•t b·∫°i!"
            fi
        else
            log_info "‚ÑπÔ∏è Container $tunnel kh√¥ng ƒëang ch·∫°y"
        fi
    done

    if [[ "$tunnels_found" == "false" ]]; then
        log_warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Cloudflare tunnel n√†o ƒëang ch·∫°y"
        log_info "üöÄ Kh·ªüi ƒë·ªông Cloudflare tunnels..."

        # Th·ª≠ kh·ªüi ƒë·ªông tunnels
        for tunnel in "${tunnel_containers[@]}"; do
            log_info "üöÄ Kh·ªüi ƒë·ªông $tunnel..."
            if $DOCKER_COMPOSE up -d "$tunnel" 2>/dev/null; then
                log_success "‚úÖ ƒê√£ kh·ªüi ƒë·ªông $tunnel th√†nh c√¥ng!"
                tunnels_found=true
            else
                log_info "‚ÑπÔ∏è $tunnel kh√¥ng c√≥ trong c·∫•u h√¨nh hi·ªán t·∫°i"
            fi
        done
    fi

    if [[ "$tunnels_found" == "true" ]]; then
        log_success "‚úÖ Cloudflare tunnel operations ho√†n t·∫•t!"
        log_deployment_event "restart_cloudflare_completed" "success"

        # Hi·ªÉn th·ªã tr·∫°ng th√°i tunnels
        log_info "üìä Tr·∫°ng th√°i Cloudflare tunnels:"
        for tunnel in "${tunnel_containers[@]}"; do
            if is_container_running "$tunnel"; then
                log_success "  ‚úÖ $tunnel: ƒêang ch·∫°y"
            else
                log_info "  ‚èπÔ∏è $tunnel: Kh√¥ng ch·∫°y"
            fi
        done
    else
        log_warning "‚ö†Ô∏è Kh√¥ng c√≥ Cloudflare tunnel n√†o ƒë∆∞·ª£c kh·ªüi ƒë·ªông"
        log_deployment_event "restart_cloudflare_failed" "no_tunnels"
    fi
}

# H√†m hi·ªÉn th·ªã tr·∫°ng th√°i n√¢ng cao
show_status() {
    show_banner "üìä TR·∫†NG TH√ÅI D·ªäCH V·ª§"

    log_info "üìã Tr·∫°ng th√°i containers:"
    $DOCKER_COMPOSE -f "$COMPOSE_FILE" ps

    echo
    log_info "üíª S·ª≠ d·ª•ng t√†i nguy√™n:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"

    echo
    log_info "üñ•Ô∏è T√†i nguy√™n h·ªá th·ªëng:"
    echo "üíæ S·ª≠ d·ª•ng ·ªï c·ª©ng: $(df -h / | awk 'NR==2 {print $5 " ƒë√£ s·ª≠ d·ª•ng / " $2 " t·ªïng c·ªông"}')"
    if command -v free &> /dev/null; then
        echo "üß† S·ª≠ d·ª•ng b·ªô nh·ªõ: $(free -h | awk 'NR==2 {print $3 " ƒë√£ s·ª≠ d·ª•ng / " $2 " t·ªïng c·ªông"}')"
    else
        echo "üß† S·ª≠ d·ª•ng b·ªô nh·ªõ: Kh√¥ng th·ªÉ l·∫•y th√¥ng tin (thi·∫øu free command)"
    fi

    # Hi·ªÉn th·ªã c√°c s·ª± ki·ªán tri·ªÉn khai g·∫ßn ƒë√¢y
    if [[ -f "$DEPLOYMENT_LOG_FILE" ]]; then
        echo
        log_info "üìù S·ª± ki·ªán tri·ªÉn khai g·∫ßn ƒë√¢y:"
        tail -5 "$DEPLOYMENT_LOG_FILE" | jq -r '"\(.timestamp) - \(.event): \(.data)"' 2>/dev/null || echo "Kh√¥ng c√≥ s·ª± ki·ªán g·∫ßn ƒë√¢y"
    fi
}

# H√†m hi·ªÉn th·ªã logs c·ªßa service
show_service_logs() {
    local service="$1"

    show_banner "üìã LOGS C·ª¶A SERVICE: $service"

    if is_container_running "$service"; then
        log_info "üì∫ Hi·ªÉn th·ªã logs tr·ª±c ti·∫øp cho '$service' (nh·∫•n Ctrl+C ƒë·ªÉ tho√°t):"
        docker logs -f --tail=100 "$service"
    else
        log_warning "‚ö†Ô∏è Service '$service' kh√¥ng ƒëang ch·∫°y."
        log_info "üìú Hi·ªÉn th·ªã 100 d√≤ng logs cu·ªëi c√πng:"
        docker logs --tail 100 "$service" 2>/dev/null || log_error "Kh√¥ng th·ªÉ l·∫•y logs cho '$service'"
    fi
}

# H√†m c·∫≠p nh·∫≠t images n√¢ng cao
update_images() {
    show_banner "üîÑ C·∫¨P NH·∫¨T DOCKER IMAGES"

    log_info "üì• ƒêang c·∫≠p nh·∫≠t t·∫•t c·∫£ Docker images..."
    log_deployment_event "update_started" "all"

    # T·∫°o checkpoint tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    local update_checkpoint=""
    if [[ "$ENABLE_CHECKPOINTS" == "true" ]]; then
        update_checkpoint=$(create_deployment_checkpoint "pre-update-$(date +%Y%m%d_%H%M%S)")
    fi

    if pull_images "$COMPOSE_FILE"; then
        log_success "‚úÖ Images ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!"
        log_deployment_event "update_completed" "success"

        if confirm_action "üîÑ Kh·ªüi ƒë·ªông l·∫°i containers ƒë·ªÉ s·ª≠ d·ª•ng images m·ªõi?"; then
            restart_all_services
        fi
    else
        log_error "‚ùå C·∫≠p nh·∫≠t images th·∫•t b·∫°i!"
        log_deployment_event "update_failed" "error"

        if [[ -n "$update_checkpoint" ]]; then
            if confirm_action "‚Ü©Ô∏è Rollback v·ªÅ tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥?"; then
                rollback_deployment "$update_checkpoint"
            fi
        fi
        exit 1
    fi
}

# ============================================================================
# PH·∫¶N 13: CH·∫æ ƒê·ªò T∆Ø∆†NG T√ÅC (INTERACTIVE MODE)
# ============================================================================

# H√†m ch·∫ø ƒë·ªô t∆∞∆°ng t√°c n√¢ng cao
interactive_mode() {
    show_banner "üéÆ NEXTFLOW DOCKER - CH·∫æ ƒê·ªò T∆Ø∆†NG T√ÅC"

    local options=(
        "üöÄ Tri·ªÉn khai Profile Basic (C∆° b·∫£n)"
        "üìä Tri·ªÉn khai Profile Monitoring (Gi√°m s√°t)"
        "ü§ñ Tri·ªÉn khai Profile AI (Tr√≠ tu·ªá nh√¢n t·∫°o)"
        "üîó Tri·ªÉn khai Profile Langflow (AI Workflow Platform)"
        "ü¶ä Tri·ªÉn khai Profile GitLab (Qu·∫£n l√Ω m√£ ngu·ªìn)"
        "üìß Tri·ªÉn khai Profile Mail (Stalwart Mail Server)"
        "üéÆ Tri·ªÉn khai Profile GPU-NVIDIA (Ollama GPU)"
        "üì¶ Tri·ªÉn khai Nhi·ªÅu Profiles"
        "üìà Xem Tr·∫°ng th√°i D·ªãch v·ª•"
        "‚èπÔ∏è D·ª´ng T·∫•t c·∫£ D·ªãch v·ª•"
        "üî® Force Stop T·∫•t c·∫£ D·ªãch v·ª•"
        "üîÑ Restart T·∫•t c·∫£ D·ªãch v·ª•"
        "‚òÅÔ∏è Restart Cloudflare Tunnel"
        "üîÑ C·∫≠p nh·∫≠t Images"
        "üßπ D·ªçn d·∫πp T√†i nguy√™n Docker"
        "üíæ T·∫°o Checkpoint"
        "‚Ü©Ô∏è Rollback Tri·ªÉn khai"
        "üìù Xem Logs Tri·ªÉn khai"
        "‚ùå Tho√°t"
    )

    while true; do
        echo
        show_menu "üéØ MENU TRI·ªÇN KHAI N√ÇNG CAO" "${options[@]}"
        read -r choice

        case $choice in
            1)
                PROFILES_TO_DEPLOY=("basic")
                deploy_profiles
                ;;
            2)
                PROFILES_TO_DEPLOY=("monitoring")
                deploy_profiles
                ;;
            3)
                PROFILES_TO_DEPLOY=("ai")
                deploy_profiles
                ;;
            4)
                PROFILES_TO_DEPLOY=("langflow")
                deploy_profiles
                ;;
            5)
                PROFILES_TO_DEPLOY=("gitlab")
                deploy_profiles
                ;;
            6)
                PROFILES_TO_DEPLOY=("mail")
                deploy_profiles
                ;;
            7)
                PROFILES_TO_DEPLOY=("gpu-nvidia")
                deploy_profiles
                ;;
            8)
                echo "üìù Nh·∫≠p c√°c profiles (c√°ch nhau b·ªüi d·∫•u ph·∫©y): "
                echo "V√≠ d·ª•: basic,monitoring,ai,langflow,gitlab,mail,gpu-nvidia"
                echo "Profiles c√≥ s·∫µn: ${AVAILABLE_PROFILES[*]}"
                read -r profiles_input
                IFS=',' read -ra PROFILES_TO_DEPLOY <<< "$profiles_input"
                deploy_profiles
                ;;
            9)
                show_status
                ;;
            10)
                stop_all_services
                ;;
            11)
                force_stop_all_services
                ;;
            12)
                restart_all_services
                ;;
            13)
                restart_cloudflare_tunnel
                ;;
            14)
                update_images
                ;;
            15)
                docker_cleanup
                ;;
            16)
                read -p "üìù Nh·∫≠p t√™n checkpoint (t√πy ch·ªçn): " checkpoint_name
                create_deployment_checkpoint "$checkpoint_name"
                ;;
            17)
                rollback_deployment
                ;;
            18)
                if [[ -f "$DEPLOYMENT_LOG_FILE" ]]; then
                    log_info "üìù C√°c s·ª± ki·ªán tri·ªÉn khai g·∫ßn ƒë√¢y:"
                    tail -20 "$DEPLOYMENT_LOG_FILE" | jq -r '"\(.timestamp) - \(.event): \(.data)"' 2>/dev/null || cat "$DEPLOYMENT_LOG_FILE"
                else
                    log_warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file log tri·ªÉn khai"
                fi
                ;;
            19)
                log_info "üëã T·∫°m bi·ªát! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng NextFlow Docker!"
                break
                ;;
            *)
                log_error "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 1-19."
                ;;
        esac
    done
}

# ============================================================================
# PH·∫¶N 14: MAIN FUNCTION - ƒêI·ªÇM V√ÄO CH√çNH C·ª¶A SCRIPT
# ============================================================================

# H√†m main - ƒëi·ªÉm v√†o ch√≠nh c·ªßa script
main() {
    # Ph√¢n t√≠ch c√°c tham s·ªë d√≤ng l·ªánh
    parse_arguments "$@"

    # Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng
    initialize_environment

    # Th·ª±c thi h√†nh ƒë·ªông ƒë∆∞·ª£c y√™u c·∫ßu
    case "$ACTION" in
        "deploy")
            deploy_profiles
            ;;
        "stop")
            stop_all_services
            ;;
        "force-stop")
            force_stop_all_services
            ;;
        "restart")
            restart_all_services
            ;;
        "restart-cloudflare")
            restart_cloudflare_tunnel
            ;;
        "status")
            show_status
            ;;
        "logs")
            show_service_logs "$SERVICE_NAME"
            ;;
        "update")
            update_images
            ;;
        "cleanup")
            docker_cleanup
            ;;
        "checkpoint")
            create_deployment_checkpoint "$CHECKPOINT_NAME"
            ;;
        "rollback")
            rollback_deployment "$CHECKPOINT_NAME"
            ;;
        "validate")
            log_success "‚úÖ C·∫•u h√¨nh h·ª£p l·ªá!"
            ;;
        "interactive")
            interactive_mode
            ;;
        *)
            log_error "‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá: $ACTION"
            exit 1
            ;;
    esac
}

# ============================================================================
# TH·ª∞C THI SCRIPT
# ============================================================================

# Ch·∫°y h√†m main v·ªõi t·∫•t c·∫£ tham s·ªë ƒë∆∞·ª£c truy·ªÅn v√†o
main "$@"

# ============================================================================
# K·∫æT TH√öC SCRIPT
# ============================================================================
