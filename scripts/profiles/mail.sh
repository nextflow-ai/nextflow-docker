#!/bin/bash

# ============================================================================
# NEXTFLOW MAIL SERVER DEPLOYMENT SCRIPT
# ============================================================================
# Mô tả: Script triển khai Stalwart Mail Server với đầy đủ tính năng
# Tác giả: NextFlow Team
# Phiên bản: 1.0
# Cập nhật: 2025
# ============================================================================

# Xử lý lỗi nghiêm ngặt
set -euo pipefail

# Định nghĩa thư mục
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
SCRIPTS_DIR="$PROJECT_ROOT/scripts"

# Import các script tiện ích
source "$SCRIPTS_DIR/utils/logging.sh"
source "$SCRIPTS_DIR/utils/docker.sh"
source "$SCRIPTS_DIR/utils/validation.sh"

# ============================================================================
# CẤU HÌNH MAIL SERVER
# ============================================================================

# Danh sách services cho mail profile
MAIL_SERVICES=(
    "postgres"          # Database chính
    "redis"             # Cache và session
    "stalwart-mail"     # Mail server chính
)

# Cấu hình Cloudflare tunnel cho mail
MAIL_TUNNEL_CONFIG=(
    "mail:8080"         # Web admin interface
    "smtp:587"          # SMTP submission
    "imap:993"          # IMAPS
)

# Ports cần thiết cho mail server
REQUIRED_PORTS=(
    25      # SMTP
    110     # POP3
    143     # IMAP
    465     # SMTPS
    587     # SMTP Submission
    993     # IMAPS
    995     # POP3S
    4190    # ManageSieve
    8080    # Web Admin
)

# ============================================================================
# FUNCTIONS
# ============================================================================

# Kiểm tra yêu cầu hệ thống
check_mail_requirements() {
    log_info "Kiểm tra yêu cầu hệ thống cho Mail Server..."

    # Kiểm tra Docker và Docker Compose
    check_docker
    check_docker_compose

    # Kiểm tra file cấu hình
    validate_file_exists "$PROJECT_ROOT/docker-compose.yml"
    validate_file_exists "$PROJECT_ROOT/.env"

    # Kiểm tra cú pháp docker-compose
    validate_docker_compose_file "$PROJECT_ROOT/docker-compose.yml"

    log_success "Tất cả yêu cầu hệ thống đã được đáp ứng"
}

# Kiểm tra xung đột port
check_port_conflicts() {
    log_info "Kiểm tra xung đột port..."
    
    local conflicts_found=false
    
    for port in "${REQUIRED_PORTS[@]}"; do
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            log_warning "Port $port đang được sử dụng"
            conflicts_found=true
        fi
    done
    
    if [ "$conflicts_found" = true ]; then
        log_warning "Phát hiện xung đột port. Vui lòng kiểm tra và dừng các service đang sử dụng port này."
        read -p "Bạn có muốn tiếp tục? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_error "Hủy bỏ triển khai do xung đột port"
            exit 1
        fi
    else
        log_success "Không có xung đột port"
    fi
}

# Tạo thư mục cần thiết
create_mail_directories() {
    log_info "Tạo thư mục cần thiết cho Mail Server..."
    
    local directories=(
        "$PROJECT_ROOT/stalwart/config"
        "$PROJECT_ROOT/stalwart/certs"
        "$PROJECT_ROOT/stalwart/data"
        "$PROJECT_ROOT/stalwart/logs"
        "$PROJECT_ROOT/stalwart/backups"
    )
    
    for dir in "${directories[@]}"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            log_info "Đã tạo thư mục: $dir"
        fi
    done
    
    # Tạo file cấu hình mặc định nếu chưa có
    create_default_mail_config
    
    log_success "Đã tạo tất cả thư mục cần thiết"
}

# Tạo cấu hình mặc định
create_default_mail_config() {
    local config_file="$PROJECT_ROOT/stalwart/config/stalwart-mail.toml"

    # Lấy thông tin từ environment variables
    local mail_hostname="${MAIL_HOSTNAME:-mail.nextflow.vn}"
    local mail_db_name="${MAIL_DB_NAME:-nextflow_stalwart_mail}"
    local mail_db_user="${MAIL_DB_USER:-nextflow_stalwart}"
    local mail_db_password="${MAIL_DB_PASSWORD:-nextflow@2025}"
    local mail_admin_user="${MAIL_ADMIN_USER:-admin}"
    local mail_admin_password="${MAIL_ADMIN_PASSWORD:-nextflow@2025}"

    if [ ! -f "$config_file" ]; then
        log_info "Tạo file cấu hình mặc định với thông tin từ .env..."

        cat > "$config_file" << EOF
# Stalwart Mail Server Configuration
# Generated by NextFlow deployment script
# Cấu hình được đồng bộ với environment variables trong .env

[server]
hostname = "$mail_hostname"
bind = ["0.0.0.0:25", "0.0.0.0:587", "0.0.0.0:465"]

[server.tls]
certificate = "/etc/stalwart/certs/cert.pem"
private-key = "/etc/stalwart/certs/key.pem"

[storage]
type = "postgresql"
host = "postgres"
port = 5432
database = "$mail_db_name"
username = "$mail_db_user"
password = "$mail_db_password"

[authentication]
type = "sql"

# Cấu hình admin user mặc định
[authentication.admin]
username = "$mail_admin_user"
password = "$mail_admin_password"

[smtp]
max-message-size = 52428800  # 50MB
max-recipients = 100
require-auth = true

[imap]
bind = ["0.0.0.0:143", "0.0.0.0:993"]

[pop3]
bind = ["0.0.0.0:110", "0.0.0.0:995"]

[sieve]
bind = ["0.0.0.0:4190"]

[web]
bind = ["0.0.0.0:80"]  # Port 80 trong container, map ra 8005 bên ngoài

[security]
dkim.enable = true
spf.enable = true
dmarc.enable = true

[anti-spam]
enable = true
threshold = 5.0

[logging]
level = "info"
format = "json"

# Cấu hình NextFlow specific
[nextflow]
domain = "$mail_hostname"
admin_email = "$mail_admin_user@$mail_hostname"
EOF

        log_success "Đã tạo file cấu hình mặc định: $config_file"
    else
        log_info "File cấu hình đã tồn tại: $config_file"
    fi
}

# Kiểm tra services cơ bản
check_basic_services() {
    log_info "Kiểm tra trạng thái services cơ bản..."
    
    # Kiểm tra PostgreSQL
    if ! is_container_running "postgres"; then
        log_info "PostgreSQL chưa chạy, khởi động services cơ bản..."
        cd "$PROJECT_ROOT"
        docker-compose --profile basic up -d postgres redis
        
        # Chờ services sẵn sàng
        wait_for_container_healthy "postgres" 60
        wait_for_container_healthy "redis" 30
    else
        log_success "Services cơ bản đã sẵn sàng"
    fi
}

# Tạo database cho mail server
setup_mail_database() {
    log_info "Thiết lập database cho Mail Server..."

    # Lấy thông tin database từ environment variables
    local db_user="${POSTGRES_USER:-nextflow}"
    local db_password="${POSTGRES_PASSWORD:-nextflow@2025}"
    local mail_db_name="${MAIL_DB_NAME:-nextflow_stalwart_mail}"
    local mail_db_user="${MAIL_DB_USER:-nextflow_stalwart}"
    local mail_db_password="${MAIL_DB_PASSWORD:-nextflow@2025}"
    local old_db_name="stalwart_mail"

    # Xóa database cũ nếu tồn tại
    if docker exec postgres psql -U "$db_user" -lqt | cut -d \| -f 1 | grep -qw "$old_db_name"; then
        log_warning "Phát hiện database cũ: $old_db_name"
        read -p "Xóa database cũ $old_db_name? (Y/n): " -r
        if [[ ! $REPLY =~ ^[Nn]$ ]]; then
            log_info "Xóa database cũ $old_db_name..."
            docker exec postgres psql -U "$db_user" -c "DROP DATABASE IF EXISTS $old_db_name;"
            log_success "Đã xóa database cũ"
        fi
    fi

    # Kiểm tra và tạo database mới
    if docker exec postgres psql -U "$db_user" -lqt | cut -d \| -f 1 | grep -qw "$mail_db_name"; then
        log_success "Database $mail_db_name đã tồn tại"
    else
        log_info "Tạo database và user mới cho Stalwart Mail Server..."

        # Tạo database
        docker exec postgres psql -U "$db_user" -c "CREATE DATABASE $mail_db_name;"

        # Tạo user nếu chưa có
        if ! docker exec postgres psql -U "$db_user" -c "\du" | grep -qw "$mail_db_user"; then
            docker exec postgres psql -U "$db_user" -c "CREATE USER $mail_db_user WITH PASSWORD '$mail_db_password';"
        fi

        # Cấp quyền
        docker exec postgres psql -U "$db_user" -c "GRANT ALL PRIVILEGES ON DATABASE $mail_db_name TO $mail_db_user;"
        docker exec postgres psql -U "$db_user" -c "ALTER USER $mail_db_user CREATEDB;"
        docker exec postgres psql -U "$db_user" -c "ALTER DATABASE $mail_db_name OWNER TO $mail_db_user;"

        log_success "Đã tạo database $mail_db_name và user $mail_db_user"
    fi

    # Kiểm tra kết nối database
    log_info "Kiểm tra kết nối database..."
    if docker exec postgres psql -U "$mail_db_user" -d "$mail_db_name" -c "SELECT 1;" &>/dev/null; then
        log_success "Kết nối database thành công"
    else
        log_warning "Không thể kết nối với database bằng user $mail_db_user"
        log_info "Thử cấp quyền lại..."
        docker exec postgres psql -U "$db_user" -c "GRANT ALL PRIVILEGES ON DATABASE $mail_db_name TO $mail_db_user;"
        docker exec postgres psql -U "$db_user" -c "ALTER DATABASE $mail_db_name OWNER TO $mail_db_user;"
    fi

    # Tạo schema cơ bản cho Stalwart Mail
    log_info "Tạo schema cơ bản cho Stalwart Mail..."
    local mail_hostname="${MAIL_HOSTNAME:-mail.nextflow.vn}"
    local mail_admin_user="${MAIL_ADMIN_USER:-admin}"
    local mail_admin_password="${MAIL_ADMIN_PASSWORD:-nextflow@2025}"

    docker exec postgres psql -U "$mail_db_user" -d "$mail_db_name" -c "
        -- Tạo bảng users
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            username VARCHAR(255) UNIQUE NOT NULL,
            email VARCHAR(255) UNIQUE NOT NULL,
            password_hash VARCHAR(255) NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            active BOOLEAN DEFAULT TRUE
        );

        -- Tạo bảng domains
        CREATE TABLE IF NOT EXISTS domains (
            id SERIAL PRIMARY KEY,
            domain VARCHAR(255) UNIQUE NOT NULL,
            active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- Tạo bảng aliases
        CREATE TABLE IF NOT EXISTS aliases (
            id SERIAL PRIMARY KEY,
            source VARCHAR(255) NOT NULL,
            destination VARCHAR(255) NOT NULL,
            domain_id INTEGER REFERENCES domains(id),
            active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- Tạo admin user mặc định với password hash
        INSERT INTO users (username, email, password_hash)
        VALUES ('$mail_admin_user', '$mail_admin_user@$mail_hostname', '\$2b\$12\$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/A5/jF/.OC')
        ON CONFLICT (username) DO NOTHING;

        -- Tạo domain mặc định
        INSERT INTO domains (domain)
        VALUES ('$mail_hostname')
        ON CONFLICT (domain) DO NOTHING;
    " 2>/dev/null || log_warning "Không thể tạo schema (có thể do extension chưa có)"

    log_success "Hoàn thành thiết lập database"
}

# Triển khai Stalwart Mail Server qua docker-compose (Chuẩn hóa)
deploy_mail_via_compose() {
    local force_deploy="${1:-false}"

    log_info "Triển khai Stalwart Mail Server qua docker-compose..."

    cd "$PROJECT_ROOT"

    # Dừng container cũ nếu force deploy
    if [[ "$force_deploy" == "true" ]]; then
        log_info "Force deploy: Dừng containers cũ..."
        docker-compose --profile mail down --remove-orphans 2>/dev/null || true
    fi

    # Kiểm tra và dừng container hiện tại nếu cần
    if docker ps | grep -q "stalwart-mail"; then
        log_info "Dừng container stalwart-mail hiện tại..."
        docker-compose down stalwart-mail 2>/dev/null || true
    fi

    # Deploy với profile mail
    log_info "Khởi động profile mail..."
    if docker-compose --profile mail up -d; then
        log_success "✅ Đã khởi động Mail Server qua docker-compose"
    else
        log_error "❌ Lỗi khi khởi động Mail Server"
        return 1
    fi
}

# Triển khai Mail Server (Legacy method - deprecated)
deploy_mail_server() {
    log_warning "⚠️ deploy_mail_server() deprecated, sử dụng deploy_mail_via_compose()"
    deploy_mail_via_compose "$@"
}

# Function chờ container healthy (Import từ utils)
wait_for_container_healthy() {
    local container_name="$1"
    local timeout="${2:-120}"
    local attempt=1
    local max_attempts=$((timeout / 5))

    log_info "Chờ container '$container_name' healthy (timeout: ${timeout}s)..."

    while [ $attempt -le $max_attempts ]; do
        if docker ps | grep -q "$container_name"; then
            local health_status=$(docker inspect --format='{{.State.Health.Status}}' "$container_name" 2>/dev/null || echo "unknown")

            if [[ "$health_status" == "healthy" ]]; then
                log_success "Container '$container_name' đã healthy"
                return 0
            elif [[ "$health_status" == "unhealthy" ]]; then
                log_warning "Container '$container_name' unhealthy, tiếp tục chờ..."
            else
                log_info "Container '$container_name' health status: $health_status"
            fi
        else
            log_warning "Container '$container_name' không chạy"
        fi

        sleep 5
        ((attempt++))
    done

    log_warning "Container '$container_name' không healthy sau ${timeout}s"
    return 1
}

# Chờ Mail Server sẵn sàng
wait_for_mail_ready() {
    log_info "Chờ Mail Server sẵn sàng..."

    local mail_admin_port="${MAIL_ADMIN_PORT:-8005}"

    # Chờ container healthy
    if wait_for_container_healthy "stalwart-mail" 120; then
        log_success "Container stalwart-mail đã healthy"
    else
        log_warning "Container chưa healthy, tiếp tục kiểm tra port..."
    fi

    # Kiểm tra các port quan trọng
    local max_attempts=30
    local attempt=1
    local ports_to_check=("$mail_admin_port" "25" "587")

    while [ $attempt -le $max_attempts ]; do
        local all_ports_ready=true

        for port in "${ports_to_check[@]}"; do
            if ! nc -z localhost "$port" 2>/dev/null; then
                all_ports_ready=false
                break
            fi
        done

        if [ "$all_ports_ready" = true ]; then
            log_success "Mail Server đã sẵn sàng! Tất cả ports đã mở."
            return 0
        fi

        log_info "Chờ Mail Server khởi động... (lần thử $attempt/$max_attempts)"
        log_info "Kiểm tra ports: ${ports_to_check[*]}"
        sleep 5
        ((attempt++))
    done

    log_error "Mail Server không thể khởi động sau $max_attempts lần thử"
    log_info "Kiểm tra logs: docker logs stalwart-mail"
    return 1
}

# Hiển thị thông tin truy cập
show_mail_access_info() {
    # Lấy thông tin từ environment variables
    local mail_hostname="${MAIL_HOSTNAME:-mail.nextflow.vn}"
    local mail_admin_user="${MAIL_ADMIN_USER:-admin}"
    local mail_admin_password="${MAIL_ADMIN_PASSWORD:-nextflow@2025}"
    local mail_admin_port="${MAIL_ADMIN_PORT:-8005}"

    log_info "=== THÔNG TIN TRUY CẬP STALWART MAIL SERVER ==="
    echo
    log_info "🌐 Web Admin Interface:"
    echo "   URL: http://localhost:$mail_admin_port"
    echo "   Hostname: $mail_hostname"
    echo "   Username: $mail_admin_user"
    echo "   Password: $mail_admin_password"
    echo
    log_info "📧 SMTP Configuration:"
    echo "   Server: localhost hoặc $mail_hostname"
    echo "   Port 25: SMTP (không mã hóa)"
    echo "   Port 587: SMTP Submission (STARTTLS)"
    echo "   Port 465: SMTP Submissions (SSL/TLS)"
    echo "   Authentication: Required"
    echo
    log_info "📬 IMAP Configuration:"
    echo "   Server: localhost hoặc $mail_hostname"
    echo "   Port 143: IMAP (STARTTLS)"
    echo "   Port 993: IMAPS (SSL/TLS)"
    echo
    log_info "📮 POP3 Configuration:"
    echo "   Server: localhost hoặc $mail_hostname"
    echo "   Port 110: POP3 (STARTTLS)"
    echo "   Port 995: POP3S (SSL/TLS)"
    echo
    log_info "🔧 ManageSieve:"
    echo "   Server: localhost hoặc $mail_hostname"
    echo "   Port: 4190"
    echo
    log_info "🗄️ Database:"
    echo "   Type: PostgreSQL (shared)"
    echo "   Database: ${MAIL_DB_NAME:-stalwart_mail}"
    echo "   User: ${MAIL_DB_USER:-stalwart}"
    echo
    log_warning "⚠️  LƯU Ý QUAN TRỌNG:"
    echo "   - Mật khẩu admin: $mail_admin_password"
    echo "   - Thay đổi mật khẩu trong môi trường production"
    echo "   - Cấu hình SSL certificates cho production"
    echo "   - Thiết lập DNS records (MX, SPF, DKIM, DMARC)"
    echo "   - Cấu hình firewall cho các port mail"
    echo "   - Sử dụng PostgreSQL shared với các service khác"
    echo
    log_info "📋 KIỂM TRA TRẠNG THÁI:"
    echo "   docker ps | grep stalwart-mail"
    echo "   docker logs stalwart-mail"
    echo "   curl -I http://localhost:$mail_admin_port"
    echo
}

# Triển khai Cloudflare tunnel cho mail
deploy_mail_tunnel() {
    if [ -f "$SCRIPTS_DIR/cloudflare/setup-tunnels.sh" ]; then
        log_info "Triển khai Cloudflare tunnel cho Mail Server..."
        
        # Gọi script setup tunnel với cấu hình mail
        "$SCRIPTS_DIR/cloudflare/setup-tunnels.sh" --service mail
        
        log_success "Đã triển khai Cloudflare tunnel cho Mail Server"
    else
        log_warning "Script Cloudflare tunnel không tìm thấy, bỏ qua bước này"
    fi
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

# === DEPLOY FUNCTION (Chuẩn hóa theo docker-compose) ===
deploy_mail() {
    local force_deploy="${1:-false}"

    show_banner "🚀 NEXTFLOW MAIL SERVER DEPLOYMENT"

    log_info "🚀 Bắt đầu triển khai NextFlow Mail Server"
    echo

    # Kiểm tra yêu cầu
    check_mail_requirements

    # Kiểm tra xung đột port
    check_port_conflicts

    # Tạo thư mục
    create_mail_directories

    # Kiểm tra services cơ bản
    check_basic_services

    # Thiết lập database
    setup_mail_database

    # Deploy mail server qua docker-compose
    deploy_mail_via_compose "$force_deploy"

    # Chờ sẵn sàng
    wait_for_mail_ready

    # Triển khai tunnel (tùy chọn)
    deploy_mail_tunnel

    # Hiển thị thông tin
    show_mail_access_info

    log_success "✅ Triển khai Mail Server hoàn tất!"
    return 0
}

# === MAIN FUNCTION (Backward compatibility) ===
main() {
    deploy_mail "$@"
}

# Chạy script nếu được gọi trực tiếp
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi