#!/bin/bash

# ============================================================================
# NEXTFLOW GITLAB DEPLOYMENT SCRIPT
# ============================================================================
# M√¥ t·∫£: Script tri·ªÉn khai GitLab CE v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng CI/CD
# T√°c gi·∫£: NextFlow Team
# Phi√™n b·∫£n: 1.0
# C·∫≠p nh·∫≠t: 2025
# 
# T√≠nh nƒÉng:
# - GitLab CE v·ªõi Container Registry
# - K·∫øt n·ªëi PostgreSQL v√† Redis shared
# - C·∫•u h√¨nh SSH, HTTP, HTTPS
# - Backup t·ª± ƒë·ªông
# - Health checks
# ============================================================================

# X·ª≠ l√Ω l·ªói nghi√™m ng·∫∑t
set -euo pipefail

# ƒê·ªãnh nghƒ©a th∆∞ m·ª•c
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"
SCRIPTS_DIR="$PROJECT_ROOT/scripts"

# Import c√°c script ti·ªán √≠ch
source "$SCRIPTS_DIR/utils/logging.sh"
source "$SCRIPTS_DIR/utils/docker.sh"
source "$SCRIPTS_DIR/utils/validation.sh"

# Load environment variables
if [[ -f "$PROJECT_ROOT/.env" ]]; then
    source "$PROJECT_ROOT/.env"
else
    log_error "File .env kh√¥ng t·ªìn t·∫°i!"
    exit 1
fi

# ============================================================================
# C·∫§U H√åNH GITLAB
# ============================================================================

# Danh s√°ch services cho gitlab profile
GITLAB_SERVICES=(
    "postgres"          # Database ch√≠nh (shared)
    "redis"             # Cache v√† session (shared)
    "gitlab"            # GitLab CE server
)

# === CHU·∫®N H√ìA PORT MAPPING ===
# Ports c·∫ßn thi·∫øt cho GitLab (ƒë√£ t·ªëi ∆∞u h√≥a)
REQUIRED_PORTS=(
    8088    # HTTP Web Interface
    8443    # HTTPS (n·∫øu c·∫•u h√¨nh SSL)
    2222    # SSH Git operations
    5050    # Container Registry
)

# C·∫•u h√¨nh GitLab t·ª´ environment variables
GITLAB_HTTP_PORT="${GITLAB_HTTP_PORT:-8088}"
GITLAB_HTTPS_PORT="${GITLAB_HTTPS_PORT:-8443}"
GITLAB_SSH_PORT="${GITLAB_SSH_PORT:-2222}"
GITLAB_REGISTRY_PORT="${GITLAB_REGISTRY_PORT:-5050}"
GITLAB_DATABASE="${GITLAB_DATABASE:-nextflow_gitlab}"

# Th√¥ng tin GitLab t·ª´ .env
GITLAB_ROOT_USERNAME="${GITLAB_ROOT_USERNAME:-root}"
GITLAB_ROOT_PASSWORD="${GITLAB_ROOT_PASSWORD:-Nex!tFlow@2025!}"
GITLAB_ROOT_EMAIL="${GITLAB_ROOT_EMAIL:-nextflow.vn@gmail.com}"
GITLAB_ROOT_NAME="${GITLAB_ROOT_NAME:-NextFlow Administrator}"

# ============================================================================
# FUNCTIONS
# ============================================================================

# Hi·ªÉn th·ªã banner GitLab - T·ªêI ∆ØU H√ìA
show_gitlab_banner() {
    show_banner "ü¶ä TRI·ªÇN KHAI GITLAB CE - T·ªêI ∆ØU H√ìA"

    log_info "GitLab Community Edition - H·ªá th·ªëng qu·∫£n l√Ω m√£ ngu·ªìn v√† CI/CD"
    echo "  üåê Web Interface: http://localhost:${GITLAB_HTTP_PORT}"
    echo "  üîí HTTPS Interface: https://localhost:${GITLAB_HTTPS_PORT}"
    echo "  üîë SSH Git: ssh://git@localhost:${GITLAB_SSH_PORT}"
    echo "  üì¶ Container Registry: http://localhost:${GITLAB_REGISTRY_PORT}"
    echo "  üóÑÔ∏è Database: ${GITLAB_DATABASE}"
    echo "  üë§ Root Username: ${GITLAB_ROOT_USERNAME}"
    echo "  üîê Root Password: ${GITLAB_ROOT_PASSWORD}"
    echo "  üìß Root Email: ${GITLAB_ROOT_EMAIL}"
    echo "  üë®‚Äçüíº Root Name: ${GITLAB_ROOT_NAME}"
    echo
}

# Ki·ªÉm tra y√™u c·∫ßu h·ªá th·ªëng cho GitLab
check_gitlab_requirements() {
    log_info "Ki·ªÉm tra y√™u c·∫ßu h·ªá th·ªëng cho GitLab..."
    
    # Ki·ªÉm tra Docker v√† Docker Compose
    if ! check_docker || ! check_docker_compose; then
        log_error "Docker ho·∫∑c Docker Compose kh√¥ng s·∫µn s√†ng!"
        exit 1
    fi
    
    # Ki·ªÉm tra file c·∫•u h√¨nh
    if [[ ! -f "$PROJECT_ROOT/docker-compose.yml" ]]; then
        log_error "File docker-compose.yml kh√¥ng t·ªìn t·∫°i!"
        exit 1
    fi
    
    if [[ ! -f "$PROJECT_ROOT/.env" ]]; then
        log_error "File .env kh√¥ng t·ªìn t·∫°i!"
        exit 1
    fi
    
    # === KI·ªÇM TRA RAM - T·ªêI ∆ØU H√ìA CHO DEVELOPMENT ===
    # Gi·∫£m y√™u c·∫ßu RAM t·ª´ 4GB xu·ªëng 3GB cho development environment
    if command -v free >/dev/null 2>&1; then
        local total_ram=$(free -m | awk 'NR==2{printf "%.0f", $2/1024}')
        if [[ $total_ram -lt 3 ]]; then
            log_warning "GitLab development khuy·∫øn ngh·ªã √≠t nh·∫•t 3GB RAM. Hi·ªán t·∫°i: ${total_ram}GB"
            log_info "C·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u ƒë·ªÉ s·ª≠ d·ª•ng √≠t t√†i nguy√™n h∆°n"
            if ! confirm_action "Ti·∫øp t·ª•c tri·ªÉn khai v·ªõi c·∫•u h√¨nh t·ªëi ∆∞u?"; then
                exit 1
            fi
        else
            log_success "RAM ƒë·ªß y√™u c·∫ßu cho development: ${total_ram}GB"
        fi
    else
        log_info "Kh√¥ng th·ªÉ ki·ªÉm tra RAM tr√™n Windows, gi·∫£ ƒë·ªãnh ƒë·ªß y√™u c·∫ßu"
        log_warning "ƒê·∫£m b·∫£o h·ªá th·ªëng c√≥ √≠t nh·∫•t 3GB RAM cho GitLab development"
    fi
    
    # Ki·ªÉm tra disk space (GitLab c·∫ßn √≠t nh·∫•t 10GB)
    local available_space=$(df -BG "$PROJECT_ROOT" | awk 'NR==2 {print $4}' | sed 's/G//')
    if [[ $available_space -lt 10 ]]; then
        log_warning "GitLab khuy·∫øn ngh·ªã √≠t nh·∫•t 10GB dung l∆∞·ª£ng tr·ªëng. Hi·ªán t·∫°i: ${available_space}GB"
        if ! confirm_action "Ti·∫øp t·ª•c tri·ªÉn khai?"; then
            exit 1
        fi
    else
        log_success "Dung l∆∞·ª£ng ƒëƒ©a ƒë·ªß y√™u c·∫ßu: ${available_space}GB"
    fi
    
    log_success "T·∫•t c·∫£ y√™u c·∫ßu h·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c ƒë√°p ·ª©ng"
}

# Ki·ªÉm tra xung ƒë·ªôt port
check_gitlab_port_conflicts() {
    log_info "Ki·ªÉm tra xung ƒë·ªôt port cho GitLab..."
    
    local conflicts_found=false
    local conflicted_ports=()
    
    for port in "${REQUIRED_PORTS[@]}"; do
        if netstat -tuln 2>/dev/null | grep -q ":$port "; then
            log_warning "Port $port ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng"
            conflicts_found=true
            conflicted_ports+=("$port")
        fi
    done
    
    if [[ "$conflicts_found" == "true" ]]; then
        log_warning "Ph√°t hi·ªán xung ƒë·ªôt port: ${conflicted_ports[*]}"
        log_info "C√°c port n√†y c·∫ßn thi·∫øt cho GitLab:"
        echo "  ‚Ä¢ $GITLAB_HTTP_PORT: Web Interface"
        echo "  ‚Ä¢ $GITLAB_SSH_PORT: SSH Git operations"
        echo "  ‚Ä¢ $GITLAB_REGISTRY_PORT: Container Registry"
        echo
        
        if ! confirm_action "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (C√≥ th·ªÉ g√¢y l·ªói)"; then
            log_error "H·ªßy b·ªè tri·ªÉn khai do xung ƒë·ªôt port"
            exit 1
        fi
    else
        log_success "Kh√¥ng c√≥ xung ƒë·ªôt port"
    fi
}

# T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt cho GitLab
create_gitlab_directories() {
    log_info "T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt cho GitLab..."
    
    local directories=(
        "$PROJECT_ROOT/gitlab/config"
        "$PROJECT_ROOT/gitlab/logs"
        "$PROJECT_ROOT/gitlab/data"
        "$PROJECT_ROOT/gitlab/backups"
        "$PROJECT_ROOT/gitlab/ssl"
    )
    
    for dir in "${directories[@]}"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir"
            log_info "ƒê√£ t·∫°o th∆∞ m·ª•c: $dir"
        fi
    done
    
    # Set proper permissions
    chmod 755 "$PROJECT_ROOT/gitlab"
    chmod -R 755 "$PROJECT_ROOT/gitlab"/*
    
    log_success "ƒê√£ t·∫°o t·∫•t c·∫£ th∆∞ m·ª•c c·∫ßn thi·∫øt cho GitLab"
}

# Ki·ªÉm tra v√† kh·ªüi ƒë·ªông services c∆° b·∫£n
check_basic_services() {
    log_info "Ki·ªÉm tra tr·∫°ng th√°i services c∆° b·∫£n..."
    
    cd "$PROJECT_ROOT"
    
    # Ki·ªÉm tra PostgreSQL
    if ! is_container_running "postgres"; then
        log_info "PostgreSQL ch∆∞a ch·∫°y, kh·ªüi ƒë·ªông services c∆° b·∫£n..."
        $DOCKER_COMPOSE up -d postgres redis
        
        # Ch·ªù services s·∫µn s√†ng
        wait_for_container_health "postgres" 60
        wait_for_container_health "redis" 30
    else
        log_success "Services c∆° b·∫£n ƒë√£ s·∫µn s√†ng"
    fi
}

# T·∫°o v√† ki·ªÉm tra database cho GitLab - T·ªêI ∆ØU H√ìA
setup_gitlab_database() {
    log_info "Thi·∫øt l·∫≠p v√† ki·ªÉm tra database cho GitLab..."

    # Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    if [[ -z "${POSTGRES_USER_GITLAB:-}" ]] || [[ -z "${POSTGRES_PASSWORD_GITLAB:-}" ]]; then
        log_error "Bi·∫øn m√¥i tr∆∞·ªùng GitLab database ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!"
        log_info "C·∫ßn thi·∫øt l·∫≠p trong .env:"
        echo "  POSTGRES_USER_GITLAB=nextflow"
        echo "  POSTGRES_PASSWORD_GITLAB=nextflow@2025"
        echo "  GITLAB_DATABASE=nextflow_gitlab"
        exit 1
    fi

    # === KI·ªÇM TRA V√Ä T·∫†O DATABASE ===
    log_info "Ki·ªÉm tra database ${GITLAB_DATABASE}..."
    if docker exec postgres psql -U nextflow -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='${GITLAB_DATABASE}';" | grep -q "1"; then
        log_success "‚úÖ Database ${GITLAB_DATABASE} ƒë√£ t·ªìn t·∫°i"
    else
        log_info "T·∫°o database m·ªõi cho GitLab..."

        # T·∫°o database
        docker exec postgres psql -U nextflow -d postgres -c "CREATE DATABASE ${GITLAB_DATABASE} OWNER nextflow;"

        # C·∫•p quy·ªÅn cho user GitLab (n·∫øu kh√°c user ch√≠nh)
        if [[ "${POSTGRES_USER_GITLAB}" != "nextflow" ]]; then
            docker exec postgres psql -U nextflow -d postgres -c "CREATE USER ${POSTGRES_USER_GITLAB} WITH PASSWORD '${POSTGRES_PASSWORD_GITLAB}';"
            docker exec postgres psql -U nextflow -d postgres -c "GRANT ALL PRIVILEGES ON DATABASE ${GITLAB_DATABASE} TO ${POSTGRES_USER_GITLAB};"
        fi

        log_success "‚úÖ ƒê√£ t·∫°o database ${GITLAB_DATABASE}"
    fi

    # === KI·ªÇM TRA K·∫æT N·ªêI DATABASE ===
    log_info "Ki·ªÉm tra k·∫øt n·ªëi database..."
    if docker exec postgres psql -U nextflow -d "${GITLAB_DATABASE}" -c "SELECT version();" >/dev/null 2>&1; then
        log_success "‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng"
    else
        log_error "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database"
        log_info "Th·ª≠ t·∫°o l·∫°i database..."

        # Th·ª≠ t·∫°o l·∫°i database n·∫øu c·∫ßn
        docker exec postgres psql -U nextflow -d postgres -c "DROP DATABASE IF EXISTS ${GITLAB_DATABASE};" || true
        docker exec postgres psql -U nextflow -d postgres -c "CREATE DATABASE ${GITLAB_DATABASE} OWNER nextflow;"

        if docker exec postgres psql -U nextflow -d "${GITLAB_DATABASE}" -c "SELECT version();" >/dev/null 2>&1; then
            log_success "‚úÖ ƒê√£ t·∫°o l·∫°i database th√†nh c√¥ng"
        else
            log_error "‚ùå V·∫´n kh√¥ng th·ªÉ k·∫øt n·ªëi database"
            exit 1
        fi
    fi

    # === KI·ªÇM TRA TH√îNG TIN DATABASE ===
    log_info "Th√¥ng tin database ${GITLAB_DATABASE}:"
    local db_size=$(docker exec postgres psql -U nextflow -d "${GITLAB_DATABASE}" -tAc "SELECT pg_size_pretty(pg_database_size('${GITLAB_DATABASE}'));" 2>/dev/null || echo "Unknown")
    local db_encoding=$(docker exec postgres psql -U nextflow -d "${GITLAB_DATABASE}" -tAc "SELECT pg_encoding_to_char(encoding) FROM pg_database WHERE datname='${GITLAB_DATABASE}';" 2>/dev/null || echo "Unknown")
    echo "  ‚Ä¢ Database size: $db_size"
    echo "  ‚Ä¢ Encoding: $db_encoding"
    echo "  ‚Ä¢ Owner: nextflow"
    echo "  ‚Ä¢ Connection: OK"
}

# Ki·ªÉm tra GitLab containers ƒë·ªÉ tr√°nh d·ª´ng kh√¥ng c·∫ßn thi·∫øt
check_existing_gitlab_containers() {
    log_info "üîç Ki·ªÉm tra GitLab containers ƒëang ch·∫°y..."

    cd "$PROJECT_ROOT"

    # Ki·ªÉm tra GitLab container
    if is_container_running "gitlab"; then
        log_success "‚úÖ GitLab ƒëang ch·∫°y - s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n"

        # Ki·ªÉm tra GitLab health
        if docker exec gitlab gitlab-ctl status >/dev/null 2>&1; then
            log_success "‚úÖ GitLab services ƒëang ho·∫°t ƒë·ªông t·ªët"
            return 0
        else
            log_warning "‚ö†Ô∏è GitLab container ch·∫°y nh∆∞ng services c√≥ v·∫•n ƒë·ªÅ - s·∫Ω restart"
            return 1
        fi
    else
        log_info "üì¶ GitLab ch∆∞a ch·∫°y - s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai"
        return 1
    fi
}

# D·ª´ng GitLab containers ch·ªâ khi c·∫ßn thi·∫øt
stop_gitlab_if_needed() {
    log_info "üõë D·ª´ng GitLab container do c√≥ v·∫•n ƒë·ªÅ..."

    cd "$PROJECT_ROOT"

    # D·ª´ng GitLab container
    if is_container_running "gitlab"; then
        log_info "D·ª´ng container: gitlab"
        docker stop "gitlab" 2>/dev/null || true
        docker rm "gitlab" 2>/dev/null || true
    fi

    # D·ª´ng GitLab service b·∫±ng docker-compose
    $DOCKER_COMPOSE --profile gitlab stop gitlab 2>/dev/null || true
    $DOCKER_COMPOSE --profile gitlab rm -f gitlab 2>/dev/null || true

    log_success "ƒê√£ d·ª´ng GitLab container"
}

# Tri·ªÉn khai GitLab
deploy_gitlab_container() {
    log_info "Tri·ªÉn khai GitLab CE..."

    cd "$PROJECT_ROOT"

    # Kh·ªüi ƒë·ªông GitLab v·ªõi profile
    log_info "Kh·ªüi ƒë·ªông GitLab container..."
    $DOCKER_COMPOSE --profile gitlab up -d gitlab

    log_success "ƒê√£ kh·ªüi ƒë·ªông GitLab container"
}

# Ch·ªù GitLab s·∫µn s√†ng
wait_for_gitlab_ready() {
    log_info "Ch·ªù GitLab kh·ªüi ƒë·ªông ho√†n to√†n..."
    log_warning "‚è≥ GitLab c·∫ßn 5-10 ph√∫t ƒë·ªÉ kh·ªüi ƒë·ªông l·∫ßn ƒë·∫ßu, vui l√≤ng ki√™n nh·∫´n..."
    
    # Ch·ªù container healthy (c√≥ th·ªÉ m·∫•t r·∫•t l√¢u)
    local max_attempts=60  # 60 * 30s = 30 ph√∫t
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        if docker exec gitlab gitlab-ctl status >/dev/null 2>&1; then
            log_success "GitLab services ƒë√£ kh·ªüi ƒë·ªông!"
            break
        fi
        
        log_info "Ch·ªù GitLab kh·ªüi ƒë·ªông... (l·∫ßn th·ª≠ $attempt/$max_attempts)"
        show_progress $attempt $max_attempts
        sleep 30
        ((attempt++))
    done
    
    if [[ $attempt -gt $max_attempts ]]; then
        log_error "GitLab kh√¥ng th·ªÉ kh·ªüi ƒë·ªông sau $((max_attempts * 30 / 60)) ph√∫t"
        log_info "Ki·ªÉm tra logs: docker logs gitlab"
        return 1
    fi
    
    # Ki·ªÉm tra web interface
    log_info "Ki·ªÉm tra web interface..."
    local web_attempts=20
    local web_attempt=1
    
    while [[ $web_attempt -le $web_attempts ]]; do
        if curl -s -o /dev/null -w "%{http_code}" "http://localhost:${GITLAB_HTTP_PORT}" | grep -qE "^(200|302)$"; then
            log_success "GitLab web interface ƒë√£ s·∫µn s√†ng!"
            return 0
        fi
        
        log_info "Ch·ªù web interface... (l·∫ßn th·ª≠ $web_attempt/$web_attempts)"
        sleep 15
        ((web_attempt++))
    done
    
    log_warning "Web interface c√≥ th·ªÉ ch∆∞a s·∫µn s√†ng ho√†n to√†n, nh∆∞ng GitLab ƒë√£ kh·ªüi ƒë·ªông"
    return 0
}

# Hi·ªÉn th·ªã th√¥ng tin truy c·∫≠p GitLab
show_gitlab_access_info() {
    show_banner "ü¶ä TH√îNG TIN TRUY C·∫¨P GITLAB"

    log_info "üåê Web Interface:"
    echo "   URL: http://localhost:${GITLAB_HTTP_PORT}"
    echo "   Username: ${GITLAB_ROOT_USERNAME}"
    echo "   Password: ${GITLAB_ROOT_PASSWORD}"
    echo "   Email: ${GITLAB_ROOT_EMAIL}"
    echo "   Full Name: ${GITLAB_ROOT_NAME}"
    echo

    log_info "üîë Git SSH Access:"
    echo "   SSH URL: ssh://git@localhost:${GITLAB_SSH_PORT}/username/repository.git"
    echo "   Example: git clone ssh://git@localhost:${GITLAB_SSH_PORT}/root/my-project.git"
    echo

    log_info "üåê Git HTTPS Access:"
    echo "   HTTPS URL: http://localhost:${GITLAB_HTTP_PORT}/username/repository.git"
    echo "   Example: git clone http://localhost:${GITLAB_HTTP_PORT}/root/my-project.git"
    echo

    log_info "üì¶ Container Registry:"
    echo "   Registry URL: localhost:${GITLAB_REGISTRY_PORT}"
    echo "   Login: docker login localhost:${GITLAB_REGISTRY_PORT}"
    echo "   Push: docker push localhost:${GITLAB_REGISTRY_PORT}/group/project/image:tag"
    echo

    log_info "üóÑÔ∏è Database Information:"
    echo "   Database: ${GITLAB_DATABASE}"
    echo "   User: ${POSTGRES_USER_GITLAB:-nextflow}"
    echo "   Host: postgres:5432"
    echo

    log_info "üìä Monitoring & Management:"
    echo "   GitLab Health: http://localhost:${GITLAB_HTTP_PORT}/-/health_check"
    echo "   Admin Area: http://localhost:${GITLAB_HTTP_PORT}/admin"
    echo "   Container logs: docker logs gitlab"
    echo

    log_warning "‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:"
    echo "   ‚Ä¢ Thay ƒë·ªïi m·∫≠t kh·∫©u root m·∫∑c ƒë·ªãnh sau khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu"
    echo "   ‚Ä¢ C·∫•u h√¨nh SSH keys cho Git operations"
    echo "   ‚Ä¢ Thi·∫øt l·∫≠p backup ƒë·ªãnh k·ª≥"
    echo "   ‚Ä¢ C·∫•u h√¨nh SSL certificates cho production"
    echo "   ‚Ä¢ Thi·∫øt l·∫≠p email notifications"
    echo "   ‚Ä¢ C·∫•u h√¨nh CI/CD runners n·∫øu c·∫ßn"
    echo

    log_info "üîß Useful Commands:"
    echo "   ‚Ä¢ Restart GitLab: docker restart gitlab"
    echo "   ‚Ä¢ GitLab console: docker exec -it gitlab gitlab-rails console"
    echo "   ‚Ä¢ Backup: docker exec gitlab gitlab-backup create"
    echo "   ‚Ä¢ Check status: docker exec gitlab gitlab-ctl status"
    echo "   ‚Ä¢ Reconfigure: docker exec gitlab gitlab-ctl reconfigure"
}

# Tri·ªÉn khai Cloudflare tunnel cho GitLab (t√πy ch·ªçn)
deploy_gitlab_tunnel() {
    if [[ -f "$SCRIPTS_DIR/cloudflare/setup-tunnels.sh" ]]; then
        log_info "Tri·ªÉn khai Cloudflare tunnel cho GitLab..."

        # G·ªçi script setup tunnel v·ªõi c·∫•u h√¨nh GitLab
        "$SCRIPTS_DIR/cloudflare/setup-tunnels.sh" --service gitlab

        log_success "ƒê√£ tri·ªÉn khai Cloudflare tunnel cho GitLab"
    else
        log_warning "Script Cloudflare tunnel kh√¥ng t√¨m th·∫•y, b·ªè qua b∆∞·ªõc n√†y"
    fi
}

# Ki·ªÉm tra GitLab database tables - TH√äM M·ªöI
check_gitlab_database_tables() {
    log_info "Ki·ªÉm tra GitLab database tables..."

    # Ch·ªù GitLab migration ho√†n th√†nh
    log_info "Ch·ªù GitLab database migration ho√†n th√†nh..."
    local max_attempts=10
    local attempt=1

    while [[ $attempt -le $max_attempts ]]; do
        # Ki·ªÉm tra xem GitLab ƒë√£ t·∫°o tables ch∆∞a
        local table_count=$(docker exec postgres psql -U nextflow -d "${GITLAB_DATABASE}" -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null || echo "0")

        if [[ $table_count -gt 50 ]]; then
            log_success "‚úÖ GitLab database tables ƒë√£ ƒë∆∞·ª£c t·∫°o ($table_count tables)"
            break
        elif [[ $table_count -gt 0 ]]; then
            log_info "GitLab ƒëang t·∫°o database tables... ($table_count tables, l·∫ßn th·ª≠ $attempt/$max_attempts)"
        else
            log_info "Ch·ªù GitLab b·∫Øt ƒë·∫ßu t·∫°o database tables... (l·∫ßn th·ª≠ $attempt/$max_attempts)"
        fi

        sleep 30
        ((attempt++))
    done

    if [[ $attempt -gt $max_attempts ]]; then
        log_warning "‚ö†Ô∏è GitLab database tables c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c t·∫°o ho√†n to√†n"
        return 1
    fi

    # Ki·ªÉm tra m·ªôt s·ªë tables quan tr·ªçng c·ªßa GitLab
    log_info "Ki·ªÉm tra c√°c tables quan tr·ªçng c·ªßa GitLab..."
    local important_tables=("users" "projects" "namespaces" "merge_requests" "issues" "ci_builds" "application_settings")
    local missing_tables=()

    for table in "${important_tables[@]}"; do
        if docker exec postgres psql -U nextflow -d "${GITLAB_DATABASE}" -tAc "SELECT 1 FROM information_schema.tables WHERE table_name = '$table';" 2>/dev/null | grep -q "1"; then
            log_success "  ‚úÖ Table '$table' exists"
        else
            log_warning "  ‚ö†Ô∏è Table '$table' missing"
            missing_tables+=("$table")
        fi
    done

    if [[ ${#missing_tables[@]} -eq 0 ]]; then
        log_success "‚úÖ T·∫•t c·∫£ tables quan tr·ªçng ƒë√£ ƒë∆∞·ª£c t·∫°o"
    else
        log_warning "‚ö†Ô∏è M·ªôt s·ªë tables quan tr·ªçng ch∆∞a ƒë∆∞·ª£c t·∫°o: ${missing_tables[*]}"
        log_info "GitLab c√≥ th·ªÉ v·∫´n ƒëang trong qu√° tr√¨nh migration"
    fi

    # Hi·ªÉn th·ªã th·ªëng k√™ database
    log_info "Th·ªëng k√™ GitLab database:"
    local total_tables=$(docker exec postgres psql -U nextflow -d "${GITLAB_DATABASE}" -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null || echo "0")
    local total_indexes=$(docker exec postgres psql -U nextflow -d "${GITLAB_DATABASE}" -tAc "SELECT COUNT(*) FROM pg_indexes WHERE schemaname = 'public';" 2>/dev/null || echo "0")
    local db_size=$(docker exec postgres psql -U nextflow -d "${GITLAB_DATABASE}" -tAc "SELECT pg_size_pretty(pg_database_size('${GITLAB_DATABASE}'));" 2>/dev/null || echo "Unknown")

    echo "  ‚Ä¢ Total tables: $total_tables"
    echo "  ‚Ä¢ Total indexes: $total_indexes"
    echo "  ‚Ä¢ Database size: $db_size"

    return 0
}

# Ch·∫°y post-deployment checks - T·ªêI ∆ØU H√ìA
run_gitlab_health_checks() {
    log_info "Ch·∫°y health checks cho GitLab..."

    # Ki·ªÉm tra GitLab services
    log_info "Ki·ªÉm tra GitLab internal services..."
    if docker exec gitlab gitlab-ctl status | grep -q "run:"; then
        log_success "‚úÖ GitLab internal services ƒëang ch·∫°y"
    else
        log_warning "‚ö†Ô∏è M·ªôt s·ªë GitLab services c√≥ th·ªÉ ch∆∞a s·∫µn s√†ng"
    fi

    # Ki·ªÉm tra database connection
    log_info "Ki·ªÉm tra k·∫øt n·ªëi database t·ª´ GitLab..."
    if docker exec gitlab gitlab-rails runner "puts ActiveRecord::Base.connection.active?" 2>/dev/null | grep -q "true"; then
        log_success "‚úÖ GitLab k·∫øt n·ªëi database th√†nh c√¥ng"

        # Ki·ªÉm tra database tables n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
        check_gitlab_database_tables
    else
        log_warning "‚ö†Ô∏è GitLab k·∫øt n·ªëi database c√≥ v·∫•n ƒë·ªÅ"
    fi

    # Ki·ªÉm tra Redis connection
    log_info "Ki·ªÉm tra k·∫øt n·ªëi Redis t·ª´ GitLab..."
    if docker exec gitlab gitlab-rails runner "puts Gitlab::Redis::Cache.with { |redis| redis.ping }" 2>/dev/null | grep -q "PONG"; then
        log_success "‚úÖ GitLab k·∫øt n·ªëi Redis th√†nh c√¥ng"
    else
        log_warning "‚ö†Ô∏è GitLab k·∫øt n·ªëi Redis c√≥ v·∫•n ƒë·ªÅ"
    fi

    # Ki·ªÉm tra web interface
    log_info "Ki·ªÉm tra web interface..."
    local http_code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:${GITLAB_HTTP_PORT}" || echo "000")
    if [[ "$http_code" =~ ^(200|302)$ ]]; then
        log_success "‚úÖ Web interface ho·∫°t ƒë·ªông (HTTP $http_code)"
    else
        log_warning "‚ö†Ô∏è Web interface c√≥ v·∫•n ƒë·ªÅ (HTTP $http_code)"
    fi

    # Ki·ªÉm tra SSH
    log_info "Ki·ªÉm tra SSH service..."
    if nc -z localhost "$GITLAB_SSH_PORT" 2>/dev/null; then
        log_success "‚úÖ SSH service ho·∫°t ƒë·ªông (port $GITLAB_SSH_PORT)"
    else
        log_warning "‚ö†Ô∏è SSH service c√≥ v·∫•n ƒë·ªÅ (port $GITLAB_SSH_PORT)"
    fi

    # Ki·ªÉm tra Container Registry
    log_info "Ki·ªÉm tra Container Registry..."
    if nc -z localhost "$GITLAB_REGISTRY_PORT" 2>/dev/null; then
        log_success "‚úÖ Container Registry ho·∫°t ƒë·ªông (port $GITLAB_REGISTRY_PORT)"
    else
        log_warning "‚ö†Ô∏è Container Registry c√≥ v·∫•n ƒë·ªÅ (port $GITLAB_REGISTRY_PORT)"
    fi
}

# ============================================================================
# MAIN DEPLOYMENT FUNCTION
# ============================================================================

# H√†m tri·ªÉn khai GitLab ch√≠nh
deploy_gitlab_main() {
    local force_deploy="${1:-false}"

    # Hi·ªÉn th·ªã banner
    show_gitlab_banner

    # Ki·ªÉm tra y√™u c·∫ßu h·ªá th·ªëng
    check_gitlab_requirements

    # Ki·ªÉm tra xung ƒë·ªôt port (skip if force deploy)
    if [[ "$force_deploy" != "true" ]]; then
        check_gitlab_port_conflicts
    else
        log_info "B·ªè qua ki·ªÉm tra port conflicts (force mode)"
    fi

    # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
    create_gitlab_directories

    # Ki·ªÉm tra GitLab containers hi·ªán t·∫°i
    if check_existing_gitlab_containers; then
        log_success "üéØ T·ªëi ∆∞u: GitLab ƒëang ch·∫°y t·ªët - b·ªè qua tri·ªÉn khai"
        # V·∫´n ki·ªÉm tra database v√† hi·ªÉn th·ªã th√¥ng tin
        check_basic_services
        show_gitlab_access_info
        log_success "üéâ GitLab ƒë√£ s·∫µn s√†ng!"
        return 0
    else
        log_info "üì¶ C·∫ßn tri·ªÉn khai GitLab m·ªõi ho·∫∑c restart do c√≥ v·∫•n ƒë·ªÅ"
        stop_gitlab_if_needed
    fi

    # Ki·ªÉm tra services c∆° b·∫£n
    check_basic_services

    # Thi·∫øt l·∫≠p database
    setup_gitlab_database

    # Tri·ªÉn khai GitLab
    deploy_gitlab_container

    # Ch·ªù GitLab s·∫µn s√†ng
    if wait_for_gitlab_ready; then
        log_success "‚úÖ GitLab ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!"
    else
        log_error "‚ùå GitLab g·∫∑p v·∫•n ƒë·ªÅ khi kh·ªüi ƒë·ªông"
        log_info "Ki·ªÉm tra logs: docker logs gitlab"
        return 1
    fi

    # Ch·∫°y health checks
    run_gitlab_health_checks

    # Tri·ªÉn khai tunnel (t√πy ch·ªçn)
    deploy_gitlab_tunnel

    # Hi·ªÉn th·ªã th√¥ng tin truy c·∫≠p
    show_gitlab_access_info

    log_success "üéâ Tri·ªÉn khai GitLab ho√†n t·∫•t!"

    return 0
}

# ============================================================================
# SCRIPT EXECUTION
# ============================================================================

# Alias function ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi discovery system
deploy_gitlab() {
    deploy_gitlab_main "$@"
}

# Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    deploy_gitlab_main "$@"
fi
