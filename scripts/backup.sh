#!/bin/bash

# ============================================================================
# NEXTFLOW DOCKER - BACKUP SYSTEM
# ============================================================================
# T√°c gi·∫£: NextFlow Development Team
# Phi√™n b·∫£n: 1.0
# Ng√†y t·∫°o: 2025-06-19
#
# M√î T·∫¢:
# Script backup to√†n di·ªán cho NextFlow Docker project bao g·ªìm:
# - Backup databases (PostgreSQL, MariaDB)
# - Backup volumes v√† persistent data
# - Backup c·∫•u h√¨nh files (.env, docker-compose.yml, configs)
# - Backup GitLab data, logs, repositories
# - Backup Langflow workflows v√† components
# - Backup WordPress data v√† uploads
#
# S·ª¨ D·ª§NG:
# ./scripts/backup.sh                    # Interactive menu
# ./scripts/backup.sh --full             # Full backup
# ./scripts/backup.sh --db-only          # Database only
# ./scripts/backup.sh --config-only      # Config only
# ./scripts/backup.sh --incremental      # Incremental backup
# ./scripts/backup.sh --restore <path>   # Restore from backup
# ./scripts/backup.sh --list             # List backups
# ./scripts/backup.sh --cleanup          # Cleanup old backups
#
# C·∫§U TR√öC BACKUP:
# backups/
# ‚îú‚îÄ‚îÄ YYYY-MM-DD_HH-MM-SS/
# ‚îÇ   ‚îú‚îÄ‚îÄ databases/
# ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ postgresql_dump.sql
# ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ mariadb_dump.sql
# ‚îÇ   ‚îú‚îÄ‚îÄ volumes/
# ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ langflow_data.tar.gz
# ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ wordpress_data.tar.gz
# ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ gitlab_data.tar.gz
# ‚îÇ   ‚îú‚îÄ‚îÄ configs/
# ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ docker-compose.yml
# ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ env_sanitized.txt
# ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ config_files.tar.gz
# ‚îÇ   ‚îî‚îÄ‚îÄ metadata.json
# ============================================================================

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Load utilities
source "$SCRIPT_DIR/utils/logging.sh" 2>/dev/null || {
    echo "‚ùå Kh√¥ng th·ªÉ load logging utilities"
    exit 1
}
source "$SCRIPT_DIR/utils/docker.sh" 2>/dev/null || {
    echo "‚ùå Kh√¥ng th·ªÉ load docker utilities"
    exit 1
}

# ============================================================================
# C·∫§U H√åNH BACKUP
# ============================================================================

# Th∆∞ m·ª•c backup ch√≠nh
BACKUP_ROOT_DIR="${PROJECT_ROOT}/backups"
BACKUP_TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
BACKUP_DIR="${BACKUP_ROOT_DIR}/${BACKUP_TIMESTAMP}"

# Th∆∞ m·ª•c con trong backup
BACKUP_DB_DIR="${BACKUP_DIR}/databases"
BACKUP_VOLUMES_DIR="${BACKUP_DIR}/volumes"
BACKUP_CONFIGS_DIR="${BACKUP_DIR}/configs"

# C·∫•u h√¨nh retention (gi·ªØ backup trong bao l√¢u)
BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
BACKUP_MAX_COUNT=${BACKUP_MAX_COUNT:-10}

# C·∫•u h√¨nh n√©n
COMPRESSION_LEVEL=${COMPRESSION_LEVEL:-6}
COMPRESSION_TYPE=${COMPRESSION_TYPE:-gzip}

# C·∫•u h√¨nh encryption (t√πy ch·ªçn)
BACKUP_ENCRYPT=${BACKUP_ENCRYPT:-false}
BACKUP_ENCRYPT_PASSWORD=${BACKUP_ENCRYPT_PASSWORD:-""}

# Danh s√°ch databases c·∫ßn backup
DATABASES_POSTGRESQL=(
    "nextflow"
    "nextflow_n8n"
    "nextflow_backup"
    "nextflow_flowise"
    "nextflow_langflow"
    "nextflow_monitoring"
    "nextflow_stalwart_mail"
    "nextflow_gitlab"
)

DATABASES_MARIADB=(
    "nextflow_wordpress"
)

# Danh s√°ch volumes c·∫ßn backup (v·ªõi prefix nextflow-docker_)
DOCKER_VOLUMES=(
    "nextflow-docker_flowise"
    "nextflow-docker_grafana_data"
    "nextflow-docker_langflow_data"
    "nextflow-docker_langflow_logs"
    "nextflow-docker_loki_data"
    "nextflow-docker_mariadb_data"
    "nextflow-docker_n8n_storage"
    "nextflow-docker_ollama_storage"
    "nextflow-docker_open-webui"
    "nextflow-docker_postgres_storage"
    "nextflow-docker_prometheus_data"
    "nextflow-docker_qdrant_snapshots"
    "nextflow-docker_qdrant_storage"
    "nextflow-docker_rabbitmq_data"
    "nextflow-docker_redis_data"
    "nextflow-docker_stalwart_config"
    "nextflow-docker_stalwart_data"
    "nextflow-docker_stalwart_logs"
    "nextflow-docker_wordpress_data"
)

# Danh s√°ch th∆∞ m·ª•c config c·∫ßn backup
CONFIG_DIRECTORIES=(
    "config"
    "cloudflared"
    "stalwart"
    "langflow"
    "wordpress"
    "gitlab"
    "scripts"
    "docs"
)

# Danh s√°ch files config c·∫ßn backup
CONFIG_FILES=(
    "docker-compose.yml"
    ".env.example"
    "README.md"
    "DEPLOYMENT-GUIDE.md"
    "DEPLOYMENT-ISSUE-RESOLUTION.md"
    "GITLAB-ROOT-ACCOUNT-SUMMARY.md"
    "GITLAB-ROOT-USER-GUIDE.md"
    ".gitignore"
    ".gitattributes"
)

# Files c·∫ßn lo·∫°i tr·ª´ kh·ªèi backup (sensitive data)
EXCLUDE_FILES=(
    ".env"
    "*.log"
    "*.pid"
    "*.lock"
    "*.tmp"
    "node_modules"
    ".git"
    ".docker"
    "backups"
)

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

# Hi·ªÉn th·ªã banner
show_backup_banner() {
    local title="$1"
    echo
    echo "============================================================"
    echo "             üóÑÔ∏è NEXTFLOW BACKUP SYSTEM"
    echo "============================================================"
    if [[ -n "$title" ]]; then
        echo "                    $title"
        echo "============================================================"
    fi
    echo
}

# T·∫°o th∆∞ m·ª•c backup
create_backup_directories() {
    log_info "üìÅ T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c backup..."
    
    local directories=(
        "$BACKUP_DIR"
        "$BACKUP_DB_DIR"
        "$BACKUP_VOLUMES_DIR"
        "$BACKUP_CONFIGS_DIR"
    )
    
    for dir in "${directories[@]}"; do
        if ! mkdir -p "$dir"; then
            log_error "‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c: $dir"
            return 1
        fi
        log_debug "ƒê√£ t·∫°o: $dir"
    done
    
    log_success "‚úÖ ƒê√£ t·∫°o c·∫•u tr√∫c th∆∞ m·ª•c backup"
    return 0
}

# T·∫°o metadata file
create_backup_metadata() {
    local backup_type="$1"
    local start_time="$2"
    local end_time="$3"
    local status="$4"
    
    log_info "üìã T·∫°o metadata backup..."
    
    local metadata_file="${BACKUP_DIR}/metadata.json"
    
    cat > "$metadata_file" << EOF
{
    "backup_info": {
        "timestamp": "$BACKUP_TIMESTAMP",
        "type": "$backup_type",
        "start_time": "$start_time",
        "end_time": "$end_time",
        "duration": "$((end_time - start_time)) seconds",
        "status": "$status",
        "version": "1.0",
        "created_by": "NextFlow Backup System"
    },
    "system_info": {
        "hostname": "$(hostname)",
        "os": "$(uname -s)",
        "docker_version": "$(docker --version 2>/dev/null || echo 'N/A')",
        "compose_version": "$(docker-compose --version 2>/dev/null || echo 'N/A')",
        "project_root": "$PROJECT_ROOT"
    },
    "backup_contents": {
        "databases": {
            "postgresql": $(printf '%s\n' "${DATABASES_POSTGRESQL[@]}" | jq -R . | jq -s .),
            "mariadb": $(printf '%s\n' "${DATABASES_MARIADB[@]}" | jq -R . | jq -s .)
        },
        "volumes": $(printf '%s\n' "${DOCKER_VOLUMES[@]}" | jq -R . | jq -s .),
        "configs": {
            "directories": $(printf '%s\n' "${CONFIG_DIRECTORIES[@]}" | jq -R . | jq -s .),
            "files": $(printf '%s\n' "${CONFIG_FILES[@]}" | jq -R . | jq -s .)
        }
    },
    "backup_settings": {
        "compression": "$COMPRESSION_TYPE",
        "compression_level": $COMPRESSION_LEVEL,
        "encryption": $BACKUP_ENCRYPT,
        "retention_days": $BACKUP_RETENTION_DAYS
    }
}
EOF

    if [[ $? -eq 0 ]]; then
        log_success "‚úÖ ƒê√£ t·∫°o metadata: $metadata_file"
        return 0
    else
        log_error "‚ùå Kh√¥ng th·ªÉ t·∫°o metadata"
        return 1
    fi
}

# Ki·ªÉm tra disk space
check_disk_space() {
    log_info "üíæ Ki·ªÉm tra dung l∆∞·ª£ng ·ªï c·ª©ng..."
    
    local available_space=$(df "$PROJECT_ROOT" | awk 'NR==2 {print $4}')
    local required_space=5242880  # 5GB in KB
    
    if [[ $available_space -lt $required_space ]]; then
        log_warning "‚ö†Ô∏è Dung l∆∞·ª£ng ·ªï c·ª©ng c√≥ th·ªÉ kh√¥ng ƒë·ªß"
        log_info "   C√≥ s·∫µn: $(($available_space / 1024 / 1024))GB"
        log_info "   Khuy·∫øn ngh·ªã: 5GB"
        
        if ! confirm_action "Ti·∫øp t·ª•c backup?"; then
            return 1
        fi
    else
        log_success "‚úÖ Dung l∆∞·ª£ng ·ªï c·ª©ng ƒë·ªß: $(($available_space / 1024 / 1024))GB"
    fi
    
    return 0
}

# Ki·ªÉm tra Docker services
check_docker_services() {
    log_info "üê≥ Ki·ªÉm tra Docker services..."
    
    if ! check_docker; then
        log_error "‚ùå Docker kh√¥ng s·∫µn s√†ng"
        return 1
    fi
    
    if ! check_docker_compose; then
        log_error "‚ùå Docker Compose kh√¥ng s·∫µn s√†ng"
        return 1
    fi
    
    log_success "‚úÖ Docker services s·∫µn s√†ng"
    return 0
}

# ============================================================================
# DATABASE BACKUP FUNCTIONS
# ============================================================================

# Backup PostgreSQL databases
backup_postgresql() {
    log_info "üêò Backup PostgreSQL databases..."

    if ! is_container_running "postgres"; then
        log_warning "‚ö†Ô∏è PostgreSQL container kh√¥ng ch·∫°y - b·ªè qua backup"
        return 0
    fi

    local backup_count=0
    local failed_count=0

    for db in "${DATABASES_POSTGRESQL[@]}"; do
        log_loading "Backup database: $db"

        local dump_file="${BACKUP_DB_DIR}/postgresql_${db}.sql"

        # Ki·ªÉm tra database t·ªìn t·∫°i
        if ! docker exec postgres psql -U "${POSTGRES_USER:-nextflow}" -lqt | cut -d \| -f 1 | grep -qw "$db"; then
            log_warning "‚ö†Ô∏è Database '$db' kh√¥ng t·ªìn t·∫°i - b·ªè qua"
            continue
        fi

        # Th·ª±c hi·ªán backup
        if docker exec postgres pg_dump -U "${POSTGRES_USER:-nextflow}" -d "$db" > "$dump_file" 2>/dev/null; then
            # N√©n file dump
            if gzip "$dump_file"; then
                log_success "‚úÖ Backup th√†nh c√¥ng: ${db} ($(du -h "${dump_file}.gz" | cut -f1))"
                ((backup_count++))
            else
                log_error "‚ùå Kh√¥ng th·ªÉ n√©n backup: $db"
                ((failed_count++))
            fi
        else
            log_error "‚ùå Backup th·∫•t b·∫°i: $db"
            ((failed_count++))
        fi
    done

    log_info "üìä PostgreSQL backup: $backup_count th√†nh c√¥ng, $failed_count th·∫•t b·∫°i"
    return $failed_count
}

# Backup MariaDB databases
backup_mariadb() {
    log_info "üê¨ Backup MariaDB databases..."

    if ! is_container_running "mariadb"; then
        log_warning "‚ö†Ô∏è MariaDB container kh√¥ng ch·∫°y - b·ªè qua backup"
        return 0
    fi

    local backup_count=0
    local failed_count=0

    for db in "${DATABASES_MARIADB[@]}"; do
        log_loading "Backup database: $db"

        local dump_file="${BACKUP_DB_DIR}/mariadb_${db}.sql"

        # Th·ª±c hi·ªán backup (s·ª≠ d·ª•ng mariadb-dump thay v√¨ mysqldump)
        if docker exec mariadb mariadb-dump -u root -p"${MYSQL_ROOT_PASSWORD:-nextflow@2025}" "$db" > "$dump_file" 2>/dev/null; then
            # N√©n file dump
            if gzip "$dump_file"; then
                log_success "‚úÖ Backup th√†nh c√¥ng: ${db} ($(du -h "${dump_file}.gz" | cut -f1))"
                ((backup_count++))
            else
                log_error "‚ùå Kh√¥ng th·ªÉ n√©n backup: $db"
                ((failed_count++))
            fi
        else
            log_error "‚ùå Backup th·∫•t b·∫°i: $db"
            ((failed_count++))
        fi
    done

    log_info "üìä MariaDB backup: $backup_count th√†nh c√¥ng, $failed_count th·∫•t b·∫°i"
    return $failed_count
}

# ============================================================================
# VOLUME BACKUP FUNCTIONS
# ============================================================================

# Backup Docker volumes
backup_volumes() {
    log_info "üì¶ Backup Docker volumes..."

    local backup_count=0
    local failed_count=0

    for volume in "${DOCKER_VOLUMES[@]}"; do
        log_loading "Backup volume: $volume"

        # Ki·ªÉm tra volume t·ªìn t·∫°i
        if ! docker volume inspect "$volume" >/dev/null 2>&1; then
            log_warning "‚ö†Ô∏è Volume '$volume' kh√¥ng t·ªìn t·∫°i - b·ªè qua"
            continue
        fi

        local backup_file="${BACKUP_VOLUMES_DIR}/${volume}.tar.gz"

        # Backup volume s·ª≠ d·ª•ng docker cp (Windows compatible)
        local volume_safe_name=$(echo "$volume" | sed 's/[^a-zA-Z0-9_-]/_/g')
        local backup_file="${BACKUP_VOLUMES_DIR}/${volume_safe_name}.tar.gz"
        local temp_dir="${TMPDIR:-/tmp}/volume_backup_$$"

        # T·∫°o temp container ƒë·ªÉ access volume
        local temp_container="backup_temp_$(date +%s)"
        if docker create --name "$temp_container" -v "$volume":/data alpine:latest >/dev/null 2>&1; then
            # T·∫°o temp directory
            mkdir -p "$temp_dir" 2>/dev/null

            # Copy volume data ra temp directory
            if docker cp "$temp_container":/data/. "$temp_dir/" >/dev/null 2>&1; then
                # T·∫°o tar.gz t·ª´ temp directory
                if tar czf "$backup_file" -C "$temp_dir" . 2>/dev/null; then
                    log_success "‚úÖ Backup th√†nh c√¥ng: ${volume} ($(du -h "$backup_file" | cut -f1))"
                    ((backup_count++))
                else
                    log_error "‚ùå Kh√¥ng th·ªÉ t·∫°o tar file: $volume"
                    ((failed_count++))
                fi
            else
                log_error "‚ùå Kh√¥ng th·ªÉ copy data t·ª´ volume: $volume"
                ((failed_count++))
            fi

            # Cleanup
            docker rm "$temp_container" >/dev/null 2>&1
            rm -rf "$temp_dir" 2>/dev/null
        else
            log_error "‚ùå Kh√¥ng th·ªÉ t·∫°o temp container cho: $volume"
            ((failed_count++))
        fi
    done

    log_info "üìä Volume backup: $backup_count th√†nh c√¥ng, $failed_count th·∫•t b·∫°i"
    return $failed_count
}

# ============================================================================
# CONFIG BACKUP FUNCTIONS
# ============================================================================

# Backup configuration files
backup_configs() {
    log_info "‚öôÔ∏è Backup configuration files..."

    local backup_count=0
    local failed_count=0

    # Backup config directories
    for config_dir in "${CONFIG_DIRECTORIES[@]}"; do
        if [[ -d "$PROJECT_ROOT/$config_dir" ]]; then
            log_loading "Backup config directory: $config_dir"

            local backup_file="${BACKUP_CONFIGS_DIR}/${config_dir}.tar.gz"

            if tar czf "$backup_file" -C "$PROJECT_ROOT" "$config_dir" 2>/dev/null; then
                log_success "‚úÖ Backup th√†nh c√¥ng: ${config_dir}/ ($(du -h "$backup_file" | cut -f1))"
                ((backup_count++))
            else
                log_error "‚ùå Backup th·∫•t b·∫°i: $config_dir/"
                ((failed_count++))
            fi
        else
            log_warning "‚ö†Ô∏è Th∆∞ m·ª•c '$config_dir' kh√¥ng t·ªìn t·∫°i - b·ªè qua"
        fi
    done

    # Backup individual config files
    for config_file in "${CONFIG_FILES[@]}"; do
        if [[ -f "$PROJECT_ROOT/$config_file" ]]; then
            log_loading "Backup config file: $config_file"

            if cp "$PROJECT_ROOT/$config_file" "$BACKUP_CONFIGS_DIR/" 2>/dev/null; then
                log_success "‚úÖ Backup th√†nh c√¥ng: $config_file"
                ((backup_count++))
            else
                log_error "‚ùå Backup th·∫•t b·∫°i: $config_file"
                ((failed_count++))
            fi
        else
            log_warning "‚ö†Ô∏è File '$config_file' kh√¥ng t·ªìn t·∫°i - b·ªè qua"
        fi
    done

    # T·∫°o .env sanitized (lo·∫°i b·ªè passwords)
    if [[ -f "$PROJECT_ROOT/.env" ]]; then
        log_loading "T·∫°o .env sanitized..."

        # Lo·∫°i b·ªè c√°c d√≤ng ch·ª©a password, secret, key
        grep -v -E "(PASSWORD|SECRET|KEY|TOKEN)" "$PROJECT_ROOT/.env" > "$BACKUP_CONFIGS_DIR/env_sanitized.txt" 2>/dev/null

        if [[ $? -eq 0 ]]; then
            log_success "‚úÖ ƒê√£ t·∫°o .env sanitized"
            ((backup_count++))
        else
            log_error "‚ùå Kh√¥ng th·ªÉ t·∫°o .env sanitized"
            ((failed_count++))
        fi
    fi

    log_info "üìä Config backup: $backup_count th√†nh c√¥ng, $failed_count th·∫•t b·∫°i"
    return $failed_count
}

# ============================================================================
# MAIN BACKUP FUNCTIONS
# ============================================================================

# Full backup
perform_full_backup() {
    local start_time=$(date +%s)

    show_backup_banner "FULL BACKUP"

    log_info "üöÄ B·∫Øt ƒë·∫ßu full backup..."
    log_info "üìÖ Timestamp: $BACKUP_TIMESTAMP"
    log_info "üìÅ Backup directory: $BACKUP_DIR"

    # Ki·ªÉm tra prerequisites
    if ! check_disk_space || ! check_docker_services; then
        log_error "‚ùå Prerequisites kh√¥ng ƒë√°p ·ª©ng"
        return 1
    fi

    # T·∫°o th∆∞ m·ª•c backup
    if ! create_backup_directories; then
        log_error "‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c backup"
        return 1
    fi

    local total_errors=0

    # Backup databases
    log_info "üóÑÔ∏è B·∫Øt ƒë·∫ßu backup databases..."
    backup_postgresql
    total_errors=$((total_errors + $?))

    backup_mariadb
    total_errors=$((total_errors + $?))

    # Backup volumes
    log_info "üì¶ B·∫Øt ƒë·∫ßu backup volumes..."
    backup_volumes
    total_errors=$((total_errors + $?))

    # Backup configs
    log_info "‚öôÔ∏è B·∫Øt ƒë·∫ßu backup configs..."
    backup_configs
    total_errors=$((total_errors + $?))

    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    # T·∫°o metadata
    local status="success"
    if [[ $total_errors -gt 0 ]]; then
        status="partial_success"
    fi

    create_backup_metadata "full" "$start_time" "$end_time" "$status"

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    show_backup_summary "$duration" "$total_errors"

    return $total_errors
}

# Database only backup
perform_database_backup() {
    local start_time=$(date +%s)

    show_backup_banner "DATABASE BACKUP"

    log_info "üóÑÔ∏è B·∫Øt ƒë·∫ßu database backup..."

    if ! check_docker_services || ! create_backup_directories; then
        return 1
    fi

    local total_errors=0

    backup_postgresql
    total_errors=$((total_errors + $?))

    backup_mariadb
    total_errors=$((total_errors + $?))

    local end_time=$(date +%s)
    create_backup_metadata "database" "$start_time" "$end_time" "success"

    show_backup_summary $((end_time - start_time)) "$total_errors"
    return $total_errors
}

# Config only backup
perform_config_backup() {
    local start_time=$(date +%s)

    show_backup_banner "CONFIG BACKUP"

    log_info "‚öôÔ∏è B·∫Øt ƒë·∫ßu config backup..."

    if ! create_backup_directories; then
        return 1
    fi

    backup_configs
    local total_errors=$?

    local end_time=$(date +%s)
    create_backup_metadata "config" "$start_time" "$end_time" "success"

    show_backup_summary $((end_time - start_time)) "$total_errors"
    return $total_errors
}

# Incremental backup
perform_incremental_backup() {
    local start_time=$(date +%s)

    show_backup_banner "INCREMENTAL BACKUP"

    log_info "üìà B·∫Øt ƒë·∫ßu incremental backup..."
    log_info "‚ÑπÔ∏è Ch·ªâ backup c√°c thay ƒë·ªïi t·ª´ l·∫ßn backup cu·ªëi"

    # T√¨m backup g·∫ßn nh·∫•t
    local last_backup=$(find "$BACKUP_ROOT_DIR" -maxdepth 1 -type d -name "20*" | sort | tail -1)

    if [[ -z "$last_backup" ]]; then
        log_warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y backup tr∆∞·ªõc ƒë√≥ - th·ª±c hi·ªán full backup"
        perform_full_backup
        return $?
    fi

    log_info "üìã Backup g·∫ßn nh·∫•t: $(basename "$last_backup")"

    # Th·ª±c hi·ªán incremental backup (simplified - ch·ªâ backup configs v√† databases)
    if ! create_backup_directories; then
        return 1
    fi

    local total_errors=0

    # Lu√¥n backup databases (v√¨ d·ªØ li·ªáu thay ƒë·ªïi li√™n t·ª•c)
    backup_postgresql
    total_errors=$((total_errors + $?))

    backup_mariadb
    total_errors=$((total_errors + $?))

    # Backup configs n·∫øu c√≥ thay ƒë·ªïi
    backup_configs
    total_errors=$((total_errors + $?))

    local end_time=$(date +%s)
    create_backup_metadata "incremental" "$start_time" "$end_time" "success"

    show_backup_summary $((end_time - start_time)) "$total_errors"
    return $total_errors
}

# Hi·ªÉn th·ªã t·ªïng k·∫øt backup
show_backup_summary() {
    local duration="$1"
    local errors="$2"

    echo
    echo "============================================================"
    echo "                    üìä T·ªîNG K·∫æT BACKUP"
    echo "============================================================"

    log_info "‚è±Ô∏è Th·ªùi gian th·ª±c hi·ªán: ${duration}s"
    log_info "üìÅ Backup location: $BACKUP_DIR"

    if [[ -d "$BACKUP_DIR" ]]; then
        local backup_size=$(du -sh "$BACKUP_DIR" 2>/dev/null | cut -f1)
        log_info "üíæ K√≠ch th∆∞·ªõc backup: ${backup_size:-N/A}"
    fi

    if [[ $errors -eq 0 ]]; then
        log_success "üéâ Backup ho√†n t·∫•t th√†nh c√¥ng!"
    elif [[ $errors -lt 5 ]]; then
        log_warning "‚ö†Ô∏è Backup ho√†n t·∫•t v·ªõi $errors l·ªói nh·ªè"
    else
        log_error "‚ùå Backup ho√†n t·∫•t v·ªõi $errors l·ªói"
    fi

    echo
    log_info "üìã ƒê·ªÉ restore backup:"
    echo "  ./scripts/backup.sh --restore $BACKUP_DIR"
    echo
    log_info "üìã ƒê·ªÉ xem danh s√°ch backups:"
    echo "  ./scripts/backup.sh --list"
    echo
}

# ============================================================================
# RESTORE FUNCTIONS
# ============================================================================

# Restore from backup
perform_restore() {
    local backup_path="$1"

    if [[ -z "$backup_path" ]]; then
        log_error "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n backup"
        return 1
    fi

    if [[ ! -d "$backup_path" ]]; then
        log_error "‚ùå Backup directory kh√¥ng t·ªìn t·∫°i: $backup_path"
        return 1
    fi

    show_backup_banner "RESTORE BACKUP"

    log_info "üîÑ B·∫Øt ƒë·∫ßu restore t·ª´: $backup_path"

    # Ki·ªÉm tra metadata
    local metadata_file="$backup_path/metadata.json"
    if [[ -f "$metadata_file" ]]; then
        log_info "üìã Th√¥ng tin backup:"
        if command -v jq >/dev/null 2>&1; then
            jq -r '.backup_info | "  Timestamp: \(.timestamp)\n  Type: \(.type)\n  Status: \(.status)"' "$metadata_file"
        else
            log_info "  Metadata file: $metadata_file"
        fi
    else
        log_warning "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y metadata file"
    fi

    # X√°c nh·∫≠n restore
    echo
    log_warning "‚ö†Ô∏è C·∫¢NH B√ÅO: Restore s·∫Ω ghi ƒë√® d·ªØ li·ªáu hi·ªán t·∫°i!"
    if ! confirm_action "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën restore?"; then
        log_info "‚ùå Restore ƒë√£ b·ªã h·ªßy"
        return 0
    fi

    local total_errors=0

    # Restore databases
    if [[ -d "$backup_path/databases" ]]; then
        log_info "üóÑÔ∏è Restore databases..."
        restore_databases "$backup_path/databases"
        total_errors=$((total_errors + $?))
    fi

    # Restore volumes
    if [[ -d "$backup_path/volumes" ]]; then
        log_info "üì¶ Restore volumes..."
        restore_volumes "$backup_path/volumes"
        total_errors=$((total_errors + $?))
    fi

    # Restore configs
    if [[ -d "$backup_path/configs" ]]; then
        log_info "‚öôÔ∏è Restore configs..."
        restore_configs "$backup_path/configs"
        total_errors=$((total_errors + $?))
    fi

    if [[ $total_errors -eq 0 ]]; then
        log_success "üéâ Restore ho√†n t·∫•t th√†nh c√¥ng!"
    else
        log_error "‚ùå Restore ho√†n t·∫•t v·ªõi $total_errors l·ªói"
    fi

    return $total_errors
}

# Restore databases
restore_databases() {
    local db_backup_dir="$1"
    local errors=0

    # Restore PostgreSQL
    for dump_file in "$db_backup_dir"/postgresql_*.sql.gz; do
        if [[ -f "$dump_file" ]]; then
            local db_name=$(basename "$dump_file" .sql.gz | sed 's/postgresql_//')
            log_loading "Restore PostgreSQL: $db_name"

            if zcat "$dump_file" | docker exec -i postgres psql -U "${POSTGRES_USER:-nextflow}" -d "$db_name" >/dev/null 2>&1; then
                log_success "‚úÖ Restored: $db_name"
            else
                log_error "‚ùå Failed to restore: $db_name"
                ((errors++))
            fi
        fi
    done

    # Restore MariaDB
    for dump_file in "$db_backup_dir"/mariadb_*.sql.gz; do
        if [[ -f "$dump_file" ]]; then
            local db_name=$(basename "$dump_file" .sql.gz | sed 's/mariadb_//')
            log_loading "Restore MariaDB: $db_name"

            if zcat "$dump_file" | docker exec -i mariadb mysql -u root -p"${MYSQL_ROOT_PASSWORD:-nextflow@2025}" "$db_name" >/dev/null 2>&1; then
                log_success "‚úÖ Restored: $db_name"
            else
                log_error "‚ùå Failed to restore: $db_name"
                ((errors++))
            fi
        fi
    done

    return $errors
}

# Restore volumes
restore_volumes() {
    local volume_backup_dir="$1"
    local errors=0

    for backup_file in "$volume_backup_dir"/*.tar.gz; do
        if [[ -f "$backup_file" ]]; then
            local volume_name=$(basename "$backup_file" .tar.gz)
            log_loading "Restore volume: $volume_name"

            # T·∫°o volume n·∫øu ch∆∞a t·ªìn t·∫°i
            docker volume create "$volume_name" >/dev/null 2>&1

            # Restore volume
            if docker run --rm \
                -v "$volume_name":/data \
                -v "$volume_backup_dir":/backup:ro \
                alpine:latest \
                sh -c "cd /data && tar xzf /backup/${volume_name}.tar.gz" >/dev/null 2>&1; then

                log_success "‚úÖ Restored: $volume_name"
            else
                log_error "‚ùå Failed to restore: $volume_name"
                ((errors++))
            fi
        fi
    done

    return $errors
}

# Restore configs
restore_configs() {
    local config_backup_dir="$1"
    local errors=0

    # Restore config directories
    for backup_file in "$config_backup_dir"/*.tar.gz; do
        if [[ -f "$backup_file" ]]; then
            local config_name=$(basename "$backup_file" .tar.gz)
            log_loading "Restore config: $config_name"

            if tar xzf "$backup_file" -C "$PROJECT_ROOT" >/dev/null 2>&1; then
                log_success "‚úÖ Restored: $config_name"
            else
                log_error "‚ùå Failed to restore: $config_name"
                ((errors++))
            fi
        fi
    done

    # Restore individual files
    for config_file in "$config_backup_dir"/*.yml "$config_backup_dir"/*.md; do
        if [[ -f "$config_file" ]]; then
            local file_name=$(basename "$config_file")
            log_loading "Restore file: $file_name"

            if cp "$config_file" "$PROJECT_ROOT/" >/dev/null 2>&1; then
                log_success "‚úÖ Restored: $file_name"
            else
                log_error "‚ùå Failed to restore: $file_name"
                ((errors++))
            fi
        fi
    done

    return $errors
}

# ============================================================================
# CLEANUP FUNCTIONS
# ============================================================================

# Cleanup old backups
cleanup_old_backups() {
    show_backup_banner "CLEANUP OLD BACKUPS"

    log_info "üßπ D·ªçn d·∫πp backups c≈©..."
    log_info "üìÖ Retention policy: $BACKUP_RETENTION_DAYS ng√†y, t·ªëi ƒëa $BACKUP_MAX_COUNT backups"

    if [[ ! -d "$BACKUP_ROOT_DIR" ]]; then
        log_info "‚ÑπÔ∏è Kh√¥ng c√≥ th∆∞ m·ª•c backup ƒë·ªÉ d·ªçn d·∫πp"
        return 0
    fi

    local backup_dirs=($(find "$BACKUP_ROOT_DIR" -maxdepth 1 -type d -name "20*" | sort))
    local total_backups=${#backup_dirs[@]}

    if [[ $total_backups -eq 0 ]]; then
        log_info "‚ÑπÔ∏è Kh√¥ng c√≥ backup ƒë·ªÉ d·ªçn d·∫πp"
        return 0
    fi

    log_info "üìä T√¨m th·∫•y $total_backups backups"

    local deleted_count=0
    local current_time=$(date +%s)
    local retention_seconds=$((BACKUP_RETENTION_DAYS * 24 * 3600))

    # Cleanup theo th·ªùi gian
    for backup_dir in "${backup_dirs[@]}"; do
        local backup_name=$(basename "$backup_dir")
        local backup_time=$(date -d "${backup_name//_/ }" +%s 2>/dev/null)

        if [[ -n "$backup_time" ]]; then
            local age_seconds=$((current_time - backup_time))

            if [[ $age_seconds -gt $retention_seconds ]]; then
                log_loading "X√≥a backup c≈©: $backup_name ($(($age_seconds / 86400)) ng√†y)"

                if rm -rf "$backup_dir"; then
                    log_success "‚úÖ ƒê√£ x√≥a: $backup_name"
                    ((deleted_count++))
                else
                    log_error "‚ùå Kh√¥ng th·ªÉ x√≥a: $backup_name"
                fi
            fi
        fi
    done

    # Cleanup theo s·ªë l∆∞·ª£ng (gi·ªØ l·∫°i BACKUP_MAX_COUNT backups m·ªõi nh·∫•t)
    local remaining_dirs=($(find "$BACKUP_ROOT_DIR" -maxdepth 1 -type d -name "20*" | sort))
    local remaining_count=${#remaining_dirs[@]}

    if [[ $remaining_count -gt $BACKUP_MAX_COUNT ]]; then
        local excess_count=$((remaining_count - BACKUP_MAX_COUNT))
        log_info "üìä C√≥ $remaining_count backups, gi·ªØ l·∫°i $BACKUP_MAX_COUNT m·ªõi nh·∫•t"

        for ((i=0; i<excess_count; i++)); do
            local backup_dir="${remaining_dirs[i]}"
            local backup_name=$(basename "$backup_dir")

            log_loading "X√≥a backup d∆∞ th·ª´a: $backup_name"

            if rm -rf "$backup_dir"; then
                log_success "‚úÖ ƒê√£ x√≥a: $backup_name"
                ((deleted_count++))
            else
                log_error "‚ùå Kh√¥ng th·ªÉ x√≥a: $backup_name"
            fi
        done
    fi

    log_info "üìä ƒê√£ x√≥a $deleted_count backups"

    # Hi·ªÉn th·ªã th·ªëng k√™ sau cleanup
    list_backups

    return 0
}

# ============================================================================
# LIST FUNCTIONS
# ============================================================================

# List all backups
list_backups() {
    show_backup_banner "DANH S√ÅCH BACKUPS"

    if [[ ! -d "$BACKUP_ROOT_DIR" ]]; then
        log_info "‚ÑπÔ∏è Ch∆∞a c√≥ backup n√†o"
        return 0
    fi

    local backup_dirs=($(find "$BACKUP_ROOT_DIR" -maxdepth 1 -type d -name "20*" | sort -r))

    if [[ ${#backup_dirs[@]} -eq 0 ]]; then
        log_info "‚ÑπÔ∏è Ch∆∞a c√≥ backup n√†o"
        return 0
    fi

    echo "üìã T√¨m th·∫•y ${#backup_dirs[@]} backups:"
    echo
    printf "%-20s %-12s %-10s %-15s %s\n" "TIMESTAMP" "TYPE" "STATUS" "SIZE" "LOCATION"
    printf "%-20s %-12s %-10s %-15s %s\n" "--------------------" "------------" "----------" "---------------" "----------------------------------------"

    for backup_dir in "${backup_dirs[@]}"; do
        local backup_name=$(basename "$backup_dir")
        local backup_size=$(du -sh "$backup_dir" 2>/dev/null | cut -f1)
        local backup_type="unknown"
        local backup_status="unknown"

        # ƒê·ªçc metadata n·∫øu c√≥
        local metadata_file="$backup_dir/metadata.json"
        if [[ -f "$metadata_file" ]] && command -v jq >/dev/null 2>&1; then
            backup_type=$(jq -r '.backup_info.type // "unknown"' "$metadata_file" 2>/dev/null)
            backup_status=$(jq -r '.backup_info.status // "unknown"' "$metadata_file" 2>/dev/null)
        fi

        printf "%-20s %-12s %-10s %-15s %s\n" \
            "$backup_name" \
            "$backup_type" \
            "$backup_status" \
            "${backup_size:-N/A}" \
            "$backup_dir"
    done

    echo
    log_info "üí° ƒê·ªÉ restore backup:"
    echo "  ./scripts/backup.sh --restore <backup_path>"
    echo
    log_info "üí° ƒê·ªÉ x√≥a backup c≈©:"
    echo "  ./scripts/backup.sh --cleanup"
    echo
}

# ============================================================================
# INTERACTIVE MENU
# ============================================================================

# Hi·ªÉn th·ªã menu ch√≠nh
show_main_menu() {
    show_backup_banner

    echo "Ch·ªçn lo·∫°i backup:"
    echo
    echo "  1) üóÑÔ∏è  Full Backup (To√†n b·ªô: DB + Volumes + Configs)"
    echo "  2) üêò  Database Backup (Ch·ªâ databases)"
    echo "  3) ‚öôÔ∏è  Config Backup (Ch·ªâ c·∫•u h√¨nh)"
    echo "  4) üìà  Incremental Backup (Backup gia tƒÉng)"
    echo "  5) üìã  List Backups (Xem danh s√°ch)"
    echo "  6) üîÑ  Restore Backup (Kh√¥i ph·ª•c)"
    echo "  7) üßπ  Cleanup Old Backups (D·ªçn d·∫πp)"
    echo "  8) ‚ùå  Exit (Tho√°t)"
    echo
}

# Menu t∆∞∆°ng t√°c
interactive_menu() {
    while true; do
        show_main_menu

        read -p "Nh·∫≠p l·ª±a ch·ªçn (1-8): " choice
        echo

        case $choice in
            1)
                perform_full_backup
                ;;
            2)
                perform_database_backup
                ;;
            3)
                perform_config_backup
                ;;
            4)
                perform_incremental_backup
                ;;
            5)
                list_backups
                ;;
            6)
                echo "Nh·∫≠p ƒë∆∞·ªùng d·∫´n backup ƒë·ªÉ restore:"
                read -p "Backup path: " backup_path
                if [[ -n "$backup_path" ]]; then
                    perform_restore "$backup_path"
                else
                    log_error "‚ùå Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n backup"
                fi
                ;;
            7)
                cleanup_old_backups
                ;;
            8)
                log_info "üëã T·∫°m bi·ªát!"
                exit 0
                ;;
            *)
                log_error "‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1-8."
                ;;
        esac

        echo
        read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."
        clear
    done
}

# ============================================================================
# UTILITY FUNCTIONS
# ============================================================================

# Confirm action
confirm_action() {
    local message="$1"
    local default="${2:-n}"

    while true; do
        if [[ "$default" == "y" ]]; then
            read -p "$message [Y/n]: " yn
            yn=${yn:-y}
        else
            read -p "$message [y/N]: " yn
            yn=${yn:-n}
        fi

        case $yn in
            [Yy]* ) return 0;;
            [Nn]* ) return 1;;
            * ) echo "Vui l√≤ng tr·∫£ l·ªùi yes ho·∫∑c no.";;
        esac
    done
}

# Show help
show_help() {
    show_backup_banner "HELP"

    echo "NextFlow Docker Backup System"
    echo
    echo "S·ª¨ D·ª§NG:"
    echo "  $0 [OPTIONS]"
    echo
    echo "OPTIONS:"
    echo "  --full              Th·ª±c hi·ªán full backup (to√†n b·ªô)"
    echo "  --db-only           Ch·ªâ backup databases"
    echo "  --config-only       Ch·ªâ backup c·∫•u h√¨nh"
    echo "  --incremental       Backup gia tƒÉng"
    echo "  --restore <path>    Restore t·ª´ backup"
    echo "  --list              Hi·ªÉn th·ªã danh s√°ch backups"
    echo "  --cleanup           D·ªçn d·∫πp backups c≈©"
    echo "  --help              Hi·ªÉn th·ªã help n√†y"
    echo
    echo "V√ç D·ª§:"
    echo "  $0                                    # Interactive menu"
    echo "  $0 --full                             # Full backup"
    echo "  $0 --restore /path/to/backup          # Restore backup"
    echo "  $0 --cleanup                          # Cleanup old backups"
    echo
    echo "C·∫§U H√åNH:"
    echo "  BACKUP_RETENTION_DAYS=$BACKUP_RETENTION_DAYS    # S·ªë ng√†y gi·ªØ backup"
    echo "  BACKUP_MAX_COUNT=$BACKUP_MAX_COUNT              # S·ªë l∆∞·ª£ng backup t·ªëi ƒëa"
    echo "  COMPRESSION_LEVEL=$COMPRESSION_LEVEL            # M·ª©c n√©n (1-9)"
    echo
}

# ============================================================================
# MAIN FUNCTION
# ============================================================================

# Main function
main() {
    # Chuy·ªÉn ƒë·∫øn project root
    cd "$PROJECT_ROOT" || {
        echo "‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ƒë·∫øn project root: $PROJECT_ROOT"
        exit 1
    }

    # Parse arguments
    case "${1:-}" in
        --full)
            perform_full_backup
            ;;
        --db-only)
            perform_database_backup
            ;;
        --config-only)
            perform_config_backup
            ;;
        --incremental)
            perform_incremental_backup
            ;;
        --restore)
            if [[ -n "${2:-}" ]]; then
                perform_restore "$2"
            else
                log_error "‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n backup"
                echo "S·ª≠ d·ª•ng: $0 --restore <backup_path>"
                exit 1
            fi
            ;;
        --list)
            list_backups
            ;;
        --cleanup)
            cleanup_old_backups
            ;;
        --help|-h)
            show_help
            ;;
        "")
            # Kh√¥ng c√≥ arguments - ch·∫°y interactive menu
            interactive_menu
            ;;
        *)
            log_error "‚ùå T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: $1"
            echo "S·ª≠ d·ª•ng: $0 --help ƒë·ªÉ xem h∆∞·ªõng d·∫´n"
            exit 1
            ;;
    esac
}

# ============================================================================
# SCRIPT EXECUTION
# ============================================================================

# Ki·ªÉm tra dependencies
check_dependencies() {
    local missing_deps=()

    # Ki·ªÉm tra c√°c l·ªánh c·∫ßn thi·∫øt
    local required_commands=("docker" "docker-compose" "tar" "gzip" "date" "find")

    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            missing_deps+=("$cmd")
        fi
    done

    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "‚ùå Thi·∫øu dependencies: ${missing_deps[*]}"
        log_info "üí° Vui l√≤ng c√†i ƒë·∫∑t c√°c l·ªánh tr√™n tr∆∞·ªõc khi ch·∫°y script"
        exit 1
    fi
}

# Script entry point
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    # Ch·ªâ ch·∫°y khi script ƒë∆∞·ª£c execute tr·ª±c ti·∫øp

    # Ki·ªÉm tra dependencies
    check_dependencies

    # T·∫°o th∆∞ m·ª•c backup root n·∫øu ch∆∞a c√≥
    mkdir -p "$BACKUP_ROOT_DIR"

    # Ch·∫°y main function
    main "$@"

    # Exit v·ªõi code ph√π h·ª£p
    exit $?
fi

# ============================================================================
# END OF SCRIPT
# ============================================================================
