#!/bin/bash
# ============================================================================
# GITLAB MANAGER - SIMPLE VERSION
# ============================================================================
# M√¥ t·∫£: Script qu·∫£n l√Ω GitLab ƒë∆°n gi·∫£n v·ªõi c√°c ch·ª©c nƒÉng c∆° b·∫£n
# T√°c gi·∫£: NextFlow Team
# Phi√™n b·∫£n: 1.1.0
# ============================================================================

set -e

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# C·∫•u h√¨nh
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
COMPOSE_FILE="$PROJECT_DIR/docker-compose.yml"
ENV_FILE="$PROJECT_DIR/.env"
GITLAB_CONTAINER="gitlab"
BACKUP_DIR="$PROJECT_DIR/gitlab/backups"

# Load environment variables
if [ -f "$ENV_FILE" ]; then
    source "$ENV_FILE"
fi

# H√†m log ƒë∆°n gi·∫£n
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Ki·ªÉm tra Docker
check_docker() {
    if ! command -v docker > /dev/null 2>&1; then
        log_error "Docker kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        log_info "Vui l√≤ng c√†i ƒë·∫∑t Docker Desktop v√† kh·ªüi ƒë·ªông"
        exit 1
    fi

    if ! docker info > /dev/null 2>&1; then
        log_error "Docker daemon kh√¥ng ch·∫°y"
        log_info "Vui l√≤ng kh·ªüi ƒë·ªông Docker Desktop"
        exit 1
    fi

    log_info "Docker ƒë√£ s·∫µn s√†ng"
}

# C·∫•u h√¨nh GitLab password policy ƒë∆°n gi·∫£n
configure_password_policy() {
    log_info "C·∫•u h√¨nh GitLab password policy ƒë∆°n gi·∫£n..."

    if ! docker ps | grep -q "$GITLAB_CONTAINER"; then
        log_error "GitLab container kh√¥ng ch·∫°y"
        return 1
    fi

    # Backup gitlab.rb hi·ªán t·∫°i
    docker exec "$GITLAB_CONTAINER" cp /etc/gitlab/gitlab.rb /etc/gitlab/gitlab.rb.backup 2>/dev/null || true

    # Th√™m c·∫•u h√¨nh password policy v√†o gitlab.rb
    docker exec "$GITLAB_CONTAINER" bash -c "
    # X√≥a c·∫•u h√¨nh password c≈© n·∫øu c√≥
    sed -i '/# NextFlow Password Policy/,/# End NextFlow Password Policy/d' /etc/gitlab/gitlab.rb

    # Th√™m c·∫•u h√¨nh m·ªõi
    cat >> /etc/gitlab/gitlab.rb << 'EOF'

# NextFlow Password Policy - Simple & User Friendly
gitlab_rails['password_authentication_enabled_for_web'] = true
gitlab_rails['password_authentication_enabled_for_git'] = true

# Disable strict password requirements
gitlab_rails['minimum_password_length'] = 8
gitlab_rails['password_complexity'] = false

# Allow simple passwords
gitlab_rails['password_blacklist_enabled'] = false
gitlab_rails['password_require_uppercase'] = false
gitlab_rails['password_require_lowercase'] = false
gitlab_rails['password_require_numbers'] = false
gitlab_rails['password_require_symbols'] = false

# End NextFlow Password Policy
EOF
    "

    log_info "√Åp d·ª•ng c·∫•u h√¨nh GitLab..."
    if docker exec "$GITLAB_CONTAINER" gitlab-ctl reconfigure; then
        log_success "C·∫•u h√¨nh password policy th√†nh c√¥ng!"
        log_info "GitLab hi·ªán cho ph√©p password ƒë∆°n gi·∫£n"
    else
        log_error "L·ªói c·∫•u h√¨nh GitLab"
        return 1
    fi
}

# [CHECK] Ki·ªÉm tra GitLab images
check_images() {
    log_info "Ki·ªÉm tra GitLab images..."

    echo "=== GITLAB IMAGES ==="

    # Ki·ªÉm tra Docker tr∆∞·ªõc
    if ! docker info > /dev/null 2>&1; then
        log_error "Docker daemon kh√¥ng ch·∫°y - kh√¥ng th·ªÉ ki·ªÉm tra images"
        return 1
    fi

    # Ki·ªÉm tra custom image
    if docker images | grep -q "nextflow/gitlab-ce.*16.11.10-ce.0"; then
        log_success "Custom image t·ªìn t·∫°i:"
        docker images | grep "nextflow/gitlab-ce.*16.11.10-ce.0"
    else
        log_warning "Custom image ch∆∞a ƒë∆∞·ª£c build (c·∫ßn phi√™n b·∫£n 16.11.10-ce.0)"
    fi

    echo ""

    # Ki·ªÉm tra official image
    if docker images | grep -q "gitlab/gitlab-ce"; then
        log_info "Official images:"
        docker images | grep "gitlab/gitlab-ce"
    else
        log_warning "Ch∆∞a c√≥ official GitLab image"
    fi

    echo ""
    log_info "ƒê·ªÉ build custom image: ./scripts/gitlab-manager-new.sh build"
    echo ""
}

# [BUILD] Build GitLab custom image
build_image() {
    log_info "Building GitLab custom image..."
    
    if [ ! -f "$PROJECT_DIR/gitlab/docker/Dockerfile" ]; then
        log_error "Dockerfile kh√¥ng t·ªìn t·∫°i: $PROJECT_DIR/gitlab/docker/Dockerfile"
        exit 1
    fi
    
    cd "$PROJECT_DIR"
    
    log_info "ƒêang build image..."
    if docker build -f gitlab/docker/Dockerfile -t nextflow/gitlab-ce:16.11.10-ce.0 .; then
        log_success "Build image th√†nh c√¥ng!"
        log_info "Image ƒë∆∞·ª£c tag: nextflow/gitlab-ce:16.11.10-ce.0"
    else
        log_error "Build image th·∫•t b·∫°i"
        exit 1
    fi
}

# [INSTALL] C√†i ƒë·∫∑t GitLab
install_gitlab() {
    log_info "C√†i ƒë·∫∑t GitLab..."
    
    # Ki·ªÉm tra custom image
    if ! docker images | grep -q "nextflow/gitlab-ce.*16.11.10-ce.0"; then
        log_warning "Custom image phi√™n b·∫£n 16.11.10-ce.0 ch∆∞a t·ªìn t·∫°i, ƒëang build..."
        build_image
    fi
    
    # T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
    mkdir -p "$PROJECT_DIR/gitlab/config"
    mkdir -p "$PROJECT_DIR/gitlab/logs"
    mkdir -p "$PROJECT_DIR/gitlab/data"
    mkdir -p "$BACKUP_DIR"
    
    cd "$PROJECT_DIR"
    
    # Kh·ªüi ƒë·ªông dependencies tr∆∞·ªõc
    log_info "Kh·ªüi ƒë·ªông PostgreSQL v√† Redis..."
    docker-compose up -d postgres redis
    
    # ƒê·ª£i PostgreSQL s·∫µn s√†ng
    log_info "ƒê·ª£i PostgreSQL s·∫µn s√†ng..."
    sleep 10
    
    # T·∫°o database cho GitLab
    log_info "T·∫°o database GitLab..."
    docker exec postgres psql -U nextflow -c "CREATE DATABASE nextflow_gitlab;" 2>/dev/null || true
    
    # Kh·ªüi ƒë·ªông GitLab
    log_info "Kh·ªüi ƒë·ªông GitLab..."
    docker-compose up -d gitlab
    
    log_success "GitLab ƒëang kh·ªüi ƒë·ªông..."
    log_info "ƒê·ª£i 5-10 ph√∫t ƒë·ªÉ GitLab ho√†n t·∫•t kh·ªüi ƒë·ªông"
    log_info "Ki·ªÉm tra tr·∫°ng th√°i: docker logs gitlab"
}

# [INFO] Xem th√¥ng tin truy c·∫≠p
show_info() {
    echo "=== TH√îNG TIN TRUY C·∫¨P GITLAB ==="
    echo ""
    echo "üåê URL: ${GITLAB_EXTERNAL_URL:-http://localhost:8088}"
    echo "üë§ Username: root"
    echo "üîë Password: ${GITLAB_ROOT_PASSWORD:-Nextflow@2025}"
    echo "üìß Email: ${GITLAB_ROOT_EMAIL:-nextflow.vn@gmail.com}"
    echo ""
    echo "üê≥ Container Registry: ${GITLAB_REGISTRY_URL:-http://localhost:5050}"
    echo "üîó SSH Git: ssh://git@localhost:${GITLAB_SSH_PORT:-2222}"
    echo ""

    # Ki·ªÉm tra tr·∫°ng th√°i container (ch·ªâ khi Docker ch·∫°y)
    if docker info > /dev/null 2>&1; then
        if docker ps | grep -q "$GITLAB_CONTAINER"; then
            log_success "GitLab container ƒëang ch·∫°y"
        else
            log_warning "GitLab container kh√¥ng ch·∫°y"
        fi
    else
        log_warning "Docker daemon kh√¥ng ch·∫°y - kh√¥ng th·ªÉ ki·ªÉm tra container"
    fi
}

# Test function ƒë·ªÉ ki·ªÉm tra script
test_script() {
    log_info "Testing GitLab Manager Script..."
    echo ""

    log_info "1. Ki·ªÉm tra c·∫•u h√¨nh..."
    echo "   Project Dir: $PROJECT_DIR"
    echo "   Compose File: $COMPOSE_FILE"
    echo "   Env File: $ENV_FILE"
    echo "   Backup Dir: $BACKUP_DIR"
    echo ""

    log_info "2. Ki·ªÉm tra files..."
    if [ -f "$COMPOSE_FILE" ]; then
        log_success "docker-compose.yml t·ªìn t·∫°i"
    else
        log_warning "docker-compose.yml kh√¥ng t·ªìn t·∫°i"
    fi

    if [ -f "$ENV_FILE" ]; then
        log_success ".env file t·ªìn t·∫°i"
    else
        log_warning ".env file kh√¥ng t·ªìn t·∫°i"
    fi

    if [ -d "$PROJECT_DIR/gitlab/docker" ]; then
        log_success "GitLab docker directory t·ªìn t·∫°i"
    else
        log_warning "GitLab docker directory kh√¥ng t·ªìn t·∫°i"
    fi

    echo ""
    log_info "3. Hi·ªÉn th·ªã th√¥ng tin truy c·∫≠p..."
    show_info

    echo ""
    log_success "Script test ho√†n t·∫•t!"
}

# [BACKUP] Sao l∆∞u GitLab
backup_gitlab() {
    log_info "T·∫°o backup GitLab..."
    
    if ! docker ps | grep -q "$GITLAB_CONTAINER"; then
        log_error "GitLab container kh√¥ng ch·∫°y"
        exit 1
    fi
    
    # T·∫°o th∆∞ m·ª•c backup
    mkdir -p "$BACKUP_DIR"
    
    # T·∫°o backup
    log_info "ƒêang t·∫°o backup..."
    if docker exec "$GITLAB_CONTAINER" gitlab-backup create; then
        log_success "Backup ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
        
        # Hi·ªÉn th·ªã backup files
        log_info "Backup files:"
        ls -la "$BACKUP_DIR"
    else
        log_error "T·∫°o backup th·∫•t b·∫°i"
        exit 1
    fi
}

# [RESTORE] Kh√¥i ph·ª•c GitLab t·ª´ backup
restore_gitlab() {
    log_info "Kh√¥i ph·ª•c GitLab t·ª´ backup..."
    
    if ! docker ps | grep -q "$GITLAB_CONTAINER"; then
        log_error "GitLab container kh√¥ng ch·∫°y"
        exit 1
    fi
    
    # Li·ªát k√™ backup files
    if [ ! -d "$BACKUP_DIR" ] || [ -z "$(ls -A "$BACKUP_DIR" 2>/dev/null)" ]; then
        log_error "Kh√¥ng t√¨m th·∫•y backup files trong $BACKUP_DIR"
        exit 1
    fi
    
    echo "=== BACKUP FILES ==="
    ls -la "$BACKUP_DIR"
    echo ""
    
    read -p "Nh·∫≠p t√™n backup file (kh√¥ng c·∫ßn ƒë∆∞·ªùng d·∫´n): " backup_file
    
    if [ ! -f "$BACKUP_DIR/$backup_file" ]; then
        log_error "Backup file kh√¥ng t·ªìn t·∫°i: $backup_file"
        exit 1
    fi
    
    # X√°c nh·∫≠n restore
    echo ""
    log_warning "C·∫¢NH B√ÅO: Restore s·∫Ω ghi ƒë√® t·∫•t c·∫£ d·ªØ li·ªáu hi·ªán t·∫°i!"
    read -p "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën restore? (yes/no): " confirm
    
    if [ "$confirm" != "yes" ]; then
        log_info "H·ªßy restore"
        exit 0
    fi
    
    # Th·ª±c hi·ªán restore
    backup_timestamp=$(echo "$backup_file" | grep -o '[0-9]\{10\}_[0-9]\{4\}_[0-9]\{2\}_[0-9]\{2\}_[0-9]\{2\}\.[0-9]\{2\}\.[0-9]\{2\}')
    
    log_info "ƒêang restore backup: $backup_timestamp"
    if docker exec "$GITLAB_CONTAINER" gitlab-backup restore BACKUP="$backup_timestamp"; then
        log_success "Restore th√†nh c√¥ng!"
        log_info "Kh·ªüi ƒë·ªông l·∫°i GitLab..."
        docker restart "$GITLAB_CONTAINER"
    else
        log_error "Restore th·∫•t b·∫°i"
        exit 1
    fi
}

# [CREATE-ROOT] T·∫°o/qu·∫£n l√Ω root user
create_root_user() {
    log_info "T·∫°o/qu·∫£n l√Ω root user..."

    if ! docker ps | grep -q "$GITLAB_CONTAINER"; then
        log_error "GitLab container kh√¥ng ch·∫°y"
        exit 1
    fi

    # Ki·ªÉm tra GitLab c√≥ s·∫µn s√†ng kh√¥ng
    log_info "Ki·ªÉm tra tr·∫°ng th√°i GitLab..."
    if ! docker exec "$GITLAB_CONTAINER" gitlab-ctl status >/dev/null 2>&1; then
        log_warning "GitLab services ch∆∞a s·∫µn s√†ng"
        log_info "Vui l√≤ng ƒë·ª£i GitLab ho√†n t·∫•t kh·ªüi ƒë·ªông (5-10 ph√∫t)"
        return 1
    fi

    log_info "Ki·ªÉm tra root user hi·ªán t·∫°i..."

    # Ki·ªÉm tra user ƒë∆°n gi·∫£n
    if docker exec "$GITLAB_CONTAINER" gitlab-rails runner "exit(User.where(username: 'root').exists? ? 0 : 1)" 2>/dev/null; then
        log_success "Root user ƒë√£ t·ªìn t·∫°i"

        # Hi·ªÉn th·ªã th√¥ng tin user
        log_info "Th√¥ng tin root user:"
        docker exec "$GITLAB_CONTAINER" gitlab-rails runner "
        user = User.find_by(username: 'root')
        puts \"  üë§ Username: #{user.username}\"
        puts \"  üìß Email: #{user.email}\"
        puts \"  üîë Admin: #{user.admin}\"
        puts \"  ‚úÖ State: #{user.state}\"
        " 2>/dev/null

        echo "  üîë Password: ${GITLAB_ROOT_PASSWORD:-Nextflow@2025}"
        echo "  üåê URL: ${GITLAB_EXTERNAL_URL:-http://localhost:8088}"
    else
        log_warning "Root user ch∆∞a t·ªìn t·∫°i, ƒëang t·∫°o b·∫±ng GitLab seed..."

        # C·∫•u h√¨nh password policy tr∆∞·ªõc khi t·∫°o user
        log_info "C·∫•u h√¨nh password policy cho ph√©p password ƒë∆°n gi·∫£n..."
        configure_password_policy

        # S·ª≠ d·ª•ng GitLab seed_fu v·ªõi environment variables
        log_info "Ch·∫°y GitLab database seeding..."
        if docker exec "$GITLAB_CONTAINER" gitlab-rake db:seed_fu GITLAB_ROOT_PASSWORD="${GITLAB_ROOT_PASSWORD:-Nextflow@2025}" GITLAB_ROOT_EMAIL="${GITLAB_ROOT_EMAIL:-nextflow.vn@gmail.com}"; then
            log_success "‚úÖ Database seeding th√†nh c√¥ng"
            log_info "Root user ƒë√£ ƒë∆∞·ª£c t·∫°o!"
            log_info "Th√¥ng tin truy c·∫≠p:"
            echo "  üë§ Username: root"
            echo "  üîë Password: ${GITLAB_ROOT_PASSWORD:-Nextflow@2025}"
            echo "  üìß Email: ${GITLAB_ROOT_EMAIL:-nextflow.vn@gmail.com}"
            echo "  üåê URL: ${GITLAB_EXTERNAL_URL:-http://localhost:8088}"
        else
            log_warning "‚ö†Ô∏è Database seeding c√≥ v·∫•n ƒë·ªÅ - th·ª≠ ph∆∞∆°ng ph√°p backup"

            # Fallback: T·∫°o user tr·ª±c ti·∫øp
            log_info "Th·ª≠ t·∫°o user tr·ª±c ti·∫øp..."
            if docker exec "$GITLAB_CONTAINER" gitlab-rails runner "
            puts 'Creating root user...'
            user = User.create!(
              username: 'root',
              email: '${GITLAB_ROOT_EMAIL:-nextflow.vn@gmail.com}',
              name: 'Administrator',
              password: '${GITLAB_ROOT_PASSWORD:-Nextflow@2025}',
              password_confirmation: '${GITLAB_ROOT_PASSWORD:-Nextflow@2025}',
              admin: true,
              confirmed_at: Time.current,
              state: 'active'
            )
            user.skip_confirmation!
            puts 'Root user created successfully!'
            "; then
                log_success "Root user ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng b·∫±ng fallback method!"
                log_info "Th√¥ng tin truy c·∫≠p:"
                echo "  üë§ Username: root"
                echo "  üîë Password: ${GITLAB_ROOT_PASSWORD:-Nextflow@2025}"
                echo "  üìß Email: ${GITLAB_ROOT_EMAIL:-nextflow.vn@gmail.com}"
                echo "  üåê URL: ${GITLAB_EXTERNAL_URL:-http://localhost:8088}"
            else
                log_error "Kh√¥ng th·ªÉ t·∫°o root user"
            fi
        fi
    fi
}

# [RESET-ROOT] Reset password root user
reset_root_password() {
    log_info "Reset password root user..."

    if ! docker ps | grep -q "$GITLAB_CONTAINER"; then
        log_error "GitLab container kh√¥ng ch·∫°y"
        exit 1
    fi

    # Ki·ªÉm tra GitLab c√≥ s·∫µn s√†ng kh√¥ng
    log_info "Ki·ªÉm tra tr·∫°ng th√°i GitLab..."
    if ! docker exec "$GITLAB_CONTAINER" gitlab-ctl status >/dev/null 2>&1; then
        log_warning "GitLab services ch∆∞a s·∫µn s√†ng"
        log_info "Vui l√≤ng ƒë·ª£i GitLab ho√†n t·∫•t kh·ªüi ƒë·ªông"
        return 1
    fi

    # Ki·ªÉm tra root user c√≥ t·ªìn t·∫°i kh√¥ng
    log_info "Ki·ªÉm tra root user..."
    user_count=$(docker exec "$GITLAB_CONTAINER" gitlab-rails runner "puts User.where(username: 'root').count" 2>/dev/null || echo "0")

    if [ "$user_count" -eq 0 ]; then
        log_error "Root user kh√¥ng t·ªìn t·∫°i!"
        log_info "Vui l√≤ng t·∫°o root user tr∆∞·ªõc: ./scripts/gitlab-manager-new.sh create-root"
        return 1
    fi

    # Nh·∫≠p password m·ªõi
    echo ""
    read -s -p "Nh·∫≠p password m·ªõi cho root (Enter ƒë·ªÉ d√πng m·∫∑c ƒë·ªãnh): " new_password
    echo ""

    if [ -z "$new_password" ]; then
        new_password="${GITLAB_ROOT_PASSWORD:-Nextflow@2025@dev}"
        log_info "S·ª≠ d·ª•ng password m·∫∑c ƒë·ªãnh"
    fi

    # X√°c nh·∫≠n reset
    echo ""
    log_warning "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset password cho root user?"
    read -p "Nh·∫≠p 'yes' ƒë·ªÉ x√°c nh·∫≠n: " confirm

    if [ "$confirm" != "yes" ]; then
        log_info "H·ªßy reset password"
        return 0
    fi

    # T·∫°o seed file ƒë·ªÉ reset password
    log_info "T·∫°o password reset seed..."
    docker exec "$GITLAB_CONTAINER" bash -c "mkdir -p /opt/gitlab/embedded/service/gitlab-rails/db/fixtures/production"

    docker exec "$GITLAB_CONTAINER" bash -c "cat > /opt/gitlab/embedded/service/gitlab-rails/db/fixtures/production/002_reset_root_password.rb << 'EOF'
# GitLab Root Password Reset Seed
puts 'Resetting root user password...'

# Find root user
root_user = User.find_by(username: 'root')
unless root_user
  puts '‚úó Root user kh√¥ng t·ªìn t·∫°i!'
  exit 1
end

puts \"ƒêang reset password cho user: #{root_user.email}\"

begin
  # Update password using proper GitLab methods
  root_user.password = '$new_password'
  root_user.password_confirmation = '$new_password'
  root_user.password_automatically_set = false
  root_user.password_expires_at = nil

  # Save with validation
  if root_user.save!
    puts \"‚úÖ Password ƒë√£ ƒë∆∞·ª£c reset th√†nh c√¥ng!\"
    puts \"   Username: #{root_user.username}\"
    puts \"   Email: #{root_user.email}\"
    puts \"   New password: $new_password\"
    puts \"   Admin: #{root_user.admin}\"
    puts \"   State: #{root_user.state}\"
  else
    puts \"‚úó L·ªói validation: #{root_user.errors.full_messages.join(', ')}\"
    exit 1
  end

rescue => e
  puts \"‚úó L·ªói reset password: #{e.message}\"
  puts \"   Backtrace: #{e.backtrace.first(3).join(', ')}\"
  exit 1
end
EOF"

    # S·ª≠ d·ª•ng rails runner tr·ª±c ti·∫øp (ƒë√£ test th√†nh c√¥ng)
    log_info "Th·ª±c hi·ªán reset password b·∫±ng Rails runner..."
    if docker exec "$GITLAB_CONTAINER" gitlab-rails runner "
    user = User.find_by(username: 'root')
    unless user
      puts '‚úó Root user kh√¥ng t·ªìn t·∫°i!'
      exit 1
    end

    puts \"ƒêang reset password cho user: #{user.email}\"

    # Update password v·ªõi bypass validation
    user.password = '$new_password'
    user.password_confirmation = '$new_password'
    user.password_automatically_set = false

    if user.save(validate: false)
      puts '‚úÖ Password ƒë√£ ƒë∆∞·ª£c reset th√†nh c√¥ng!'
      puts \"   Username: #{user.username}\"
      puts \"   Email: #{user.email}\"
      puts \"   New password: $new_password\"
      puts \"   Password hash updated: #{user.reload.encrypted_password[0..20]}...\"
    else
      puts '‚úó L·ªói reset password!'
      exit 1
    end
    "; then
        log_success "‚úÖ Reset password th√†nh c√¥ng!"
        log_info "Th√¥ng tin truy c·∫≠p m·ªõi:"
        echo "  üë§ Username: root"
        echo "  üîë New Password: $new_password"
        echo "  üìß Email: nextflow.vn@gmail.com"
        echo "  üåê URL: ${GITLAB_EXTERNAL_URL:-http://localhost:8088}"
    else
        log_warning "‚ö†Ô∏è Rails runner c√≥ v·∫•n ƒë·ªÅ - th·ª≠ GitLab rake task..."

        # Fallback: Th·ª≠ GitLab rake task (c√≥ th·ªÉ c·∫ßn manual input)
        log_info "Th·ª≠ reset b·∫±ng GitLab rake task..."
        log_warning "L∆∞u √Ω: Task n√†y c√≥ th·ªÉ y√™u c·∫ßu nh·∫≠p password manual"

        if echo "$new_password" | docker exec -i "$GITLAB_CONTAINER" gitlab-rake "gitlab:password:reset[root]"; then
            log_success "Password ƒë∆∞·ª£c reset b·∫±ng GitLab rake!"
            log_info "Th√¥ng tin truy c·∫≠p m·ªõi:"
            echo "  üë§ Username: root"
            echo "  üîë New Password: $new_password"
            echo "  üìß Email: nextflow.vn@gmail.com"
            echo "  üåê URL: ${GITLAB_EXTERNAL_URL:-http://localhost:8088}"
        else
            log_error "Kh√¥ng th·ªÉ reset password b·∫±ng c·∫£ 2 ph∆∞∆°ng ph√°p"
            log_info "Vui l√≤ng th·ª≠ reset manual qua GitLab console:"
            echo "  docker exec -it gitlab gitlab-rails console"
            echo "  user = User.find_by(username: 'root')"
            echo "  user.password = '$new_password'"
            echo "  user.password_confirmation = '$new_password'"
            echo "  user.save(validate: false)"
        fi
    fi
}

# Menu ch√≠nh
show_menu() {
    echo ""
    echo "=== GITLAB MANAGER - SIMPLE VERSION ==="
    echo ""
    echo "1. [CHECK] Ki·ªÉm tra GitLab images"
    echo "2. [BUILD] Build GitLab custom image"
    echo "3. [INSTALL] C√†i ƒë·∫∑t GitLab"
    echo "4. [INFO] Xem th√¥ng tin truy c·∫≠p"
    echo "5. [BACKUP] Sao l∆∞u GitLab"
    echo "6. [RESTORE] Kh√¥i ph·ª•c GitLab t·ª´ backup"
    echo "7. [CREATE-ROOT] T·∫°o/qu·∫£n l√Ω root user"
    echo "8. [RESET-ROOT] Reset password root user"
    echo "9. [CONFIG] C·∫•u h√¨nh password policy ƒë∆°n gi·∫£n"
    echo "10. Tho√°t"
    echo ""
}

# X·ª≠ l√Ω tham s·ªë command line
case "${1:-}" in
    "check"|"images")
        check_docker
        check_images
        ;;
    "test-check")
        # Test check images m√† kh√¥ng c·∫ßn Docker ch·∫°y
        check_images
        ;;
    "build")
        check_docker
        build_image
        ;;
    "install")
        check_docker
        install_gitlab
        ;;
    "info")
        show_info
        ;;
    "backup")
        check_docker
        backup_gitlab
        ;;
    "restore")
        check_docker
        restore_gitlab
        ;;
    "create-root")
        check_docker
        create_root_user
        ;;
    "reset-root")
        check_docker
        reset_root_password
        ;;
    "config")
        check_docker
        configure_password_policy
        ;;
    "")
        # Menu t∆∞∆°ng t√°c
        while true; do
            show_menu
            read -p "Ch·ªçn ch·ª©c nƒÉng (1-10): " choice
            
            case $choice in
                1)
                    check_docker
                    check_images
                    ;;
                2)
                    check_docker
                    build_image
                    ;;
                3)
                    check_docker
                    install_gitlab
                    ;;
                4)
                    show_info
                    ;;
                5)
                    check_docker
                    backup_gitlab
                    ;;
                6)
                    check_docker
                    restore_gitlab
                    ;;
                7)
                    check_docker
                    create_root_user
                    ;;
                8)
                    check_docker
                    reset_root_password
                    ;;
                9)
                    check_docker
                    configure_password_policy
                    ;;
                10)
                    log_info "Tho√°t ch∆∞∆°ng tr√¨nh"
                    exit 0
                    ;;
                *)
                    log_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá"
                    ;;
            esac
            
            echo ""
            read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c..."
        done
        ;;
    *)
        echo "S·ª≠ d·ª•ng: $0 [check|build|install|info|backup|restore|create-root|reset-root|config]"
        echo "Ho·∫∑c ch·∫°y kh√¥ng tham s·ªë ƒë·ªÉ v√†o menu t∆∞∆°ng t√°c"
        exit 1
        ;;
esac
