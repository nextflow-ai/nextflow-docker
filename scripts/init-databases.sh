#!/bin/bash

# ============================================================================
# NEXTFLOW DOCKER - SCRIPT KH·ªûI T·∫†O DATABASES
# ============================================================================
# T√°c gi·∫£: NextFlow Development Team
# M·ª•c ƒë√≠ch: T·ª± ƒë·ªông t·∫°o c√°c databases c·∫ßn thi·∫øt trong PostgreSQL
# S·ª≠ d·ª•ng: ./scripts/init-databases.sh
# ============================================================================

set -euo pipefail

# Import th∆∞ vi·ªán logging
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/utils/logging.sh"

# ============================================================================
# C·∫§U H√åNH
# ============================================================================

# Th√¥ng tin k·∫øt n·ªëi PostgreSQL
POSTGRES_CONTAINER="postgres"
POSTGRES_USER="nextflow"
POSTGRES_HOST="localhost"
POSTGRES_PORT="5432"

# Danh s√°ch databases c·∫ßn t·∫°o
DATABASES=(
    "nextflow_n8n:Database cho n8n automation platform"
    "nextflow_flowise:Database cho Flowise AI chatbot"
    "nextflow_langflow:Database cho Langflow AI workflows"
    "nextflow_monitoring:Database cho monitoring v√† metrics"
    "nextflow_backup:Database cho backup metadata"
)

# ============================================================================
# FUNCTIONS
# ============================================================================

# H√†m ki·ªÉm tra PostgreSQL container c√≥ ƒëang ch·∫°y kh√¥ng
check_postgres_container() {
    if ! docker ps --format "{{.Names}}" | grep -q "^${POSTGRES_CONTAINER}$"; then
        log_error "Container PostgreSQL '$POSTGRES_CONTAINER' kh√¥ng ƒëang ch·∫°y!"
        log_info "Vui l√≤ng kh·ªüi ƒë·ªông PostgreSQL tr∆∞·ªõc khi ch·∫°y script n√†y:"
        log_info "  docker-compose up -d postgres"
        exit 1
    fi
    
    log_success "Container PostgreSQL ƒëang ch·∫°y"
}

# H√†m ki·ªÉm tra k·∫øt n·ªëi PostgreSQL
check_postgres_connection() {
    log_info "Ki·ªÉm tra k·∫øt n·ªëi PostgreSQL..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if docker exec "$POSTGRES_CONTAINER" pg_isready -U "$POSTGRES_USER" -d postgres >/dev/null 2>&1; then
            log_success "K·∫øt n·ªëi PostgreSQL th√†nh c√¥ng!"
            return 0
        fi
        
        log_info "L·∫ßn th·ª≠ $attempt/$max_attempts - ƒê·ª£i PostgreSQL s·∫µn s√†ng..."
        sleep 2
        ((attempt++))
    done
    
    log_error "Kh√¥ng th·ªÉ k·∫øt n·ªëi PostgreSQL sau $max_attempts l·∫ßn th·ª≠!"
    exit 1
}

# H√†m ki·ªÉm tra database c√≥ t·ªìn t·∫°i kh√¥ng
database_exists() {
    local db_name="$1"
    
    local result=$(docker exec "$POSTGRES_CONTAINER" psql -U "$POSTGRES_USER" -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$db_name';" 2>/dev/null || echo "")
    
    if [[ "$result" == "1" ]]; then
        return 0  # Database t·ªìn t·∫°i
    else
        return 1  # Database kh√¥ng t·ªìn t·∫°i
    fi
}

# H√†m t·∫°o database
create_database() {
    local db_name="$1"
    local description="$2"
    
    log_info "ƒêang t·∫°o database: $db_name"
    log_debug "M√¥ t·∫£: $description"
    
    if database_exists "$db_name"; then
        log_warning "Database '$db_name' ƒë√£ t·ªìn t·∫°i, b·ªè qua..."
        return 0
    fi
    
    # T·∫°o database
    if docker exec "$POSTGRES_CONTAINER" psql -U "$POSTGRES_USER" -d postgres -c "CREATE DATABASE $db_name OWNER $POSTGRES_USER;" >/dev/null 2>&1; then
        log_success "‚úÖ ƒê√£ t·∫°o database: $db_name"
        
        # Th√™m comment cho database
        docker exec "$POSTGRES_CONTAINER" psql -U "$POSTGRES_USER" -d postgres -c "COMMENT ON DATABASE $db_name IS '$description';" >/dev/null 2>&1 || true
        
        return 0
    else
        log_error "‚ùå L·ªói khi t·∫°o database: $db_name"
        return 1
    fi
}

# H√†m hi·ªÉn th·ªã danh s√°ch databases
show_databases() {
    log_info "üìã Danh s√°ch databases hi·ªán t·∫°i:"
    echo
    
    docker exec "$POSTGRES_CONTAINER" psql -U "$POSTGRES_USER" -d postgres -c "
        SELECT 
            datname as \"Database\",
            pg_size_pretty(pg_database_size(datname)) as \"Size\",
            obj_description(oid, 'pg_database') as \"Description\"
        FROM pg_database 
        WHERE datname NOT IN ('template0', 'template1')
        ORDER BY datname;
    " 2>/dev/null || {
        log_warning "Kh√¥ng th·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt, hi·ªÉn th·ªã danh s√°ch c∆° b·∫£n:"
        docker exec "$POSTGRES_CONTAINER" psql -U "$POSTGRES_USER" -d postgres -c "\l"
    }
}

# H√†m t·∫°o user v√† ph√¢n quy·ªÅn
setup_database_permissions() {
    local db_name="$1"
    
    log_debug "Thi·∫øt l·∫≠p quy·ªÅn cho database: $db_name"
    
    # ƒê·∫£m b·∫£o user nextflow c√≥ ƒë·∫ßy ƒë·ªß quy·ªÅn
    docker exec "$POSTGRES_CONTAINER" psql -U "$POSTGRES_USER" -d "$db_name" -c "
        GRANT ALL PRIVILEGES ON DATABASE $db_name TO $POSTGRES_USER;
        GRANT ALL PRIVILEGES ON SCHEMA public TO $POSTGRES_USER;
        GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO $POSTGRES_USER;
        GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO $POSTGRES_USER;
        GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA public TO $POSTGRES_USER;
    " >/dev/null 2>&1 || true
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

main() {
    show_banner "üóÑÔ∏è KH·ªûI T·∫†O DATABASES POSTGRESQL"
    
    # Ki·ªÉm tra container PostgreSQL
    check_postgres_container
    
    # Ki·ªÉm tra k·∫øt n·ªëi
    check_postgres_connection
    
    # Hi·ªÉn th·ªã databases hi·ªán t·∫°i
    show_databases
    
    echo
    log_info "üöÄ B·∫Øt ƒë·∫ßu t·∫°o databases c·∫ßn thi·∫øt..."
    
    local created_count=0
    local failed_count=0
    
    # T·∫°o t·ª´ng database
    for db_info in "${DATABASES[@]}"; do
        IFS=':' read -r db_name description <<< "$db_info"
        
        if create_database "$db_name" "$description"; then
            setup_database_permissions "$db_name"
            ((created_count++))
        else
            ((failed_count++))
        fi
    done
    
    echo
    log_info "üìä T·ªïng k·∫øt:"
    log_info "  ‚úÖ Databases ƒë√£ t·∫°o: $created_count"
    if [[ $failed_count -gt 0 ]]; then
        log_warning "  ‚ùå Databases th·∫•t b·∫°i: $failed_count"
    fi
    
    echo
    log_info "üìã Danh s√°ch databases sau khi t·∫°o:"
    show_databases
    
    echo
    log_success "üéâ Ho√†n t·∫•t kh·ªüi t·∫°o databases!"
    
    # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    echo
    log_info "üí° H∆∞·ªõng d·∫´n ti·∫øp theo:"
    log_info "  ‚Ä¢ Kh·ªüi ƒë·ªông l·∫°i c√°c services ƒë·ªÉ √°p d·ª•ng databases m·ªõi:"
    log_info "    docker-compose restart n8n flowise"
    log_info "  ‚Ä¢ Ki·ªÉm tra logs ƒë·ªÉ ƒë·∫£m b·∫£o k·∫øt n·ªëi th√†nh c√¥ng:"
    log_info "    docker logs n8n"
    log_info "    docker logs flowise"
}

# Ch·∫°y script
main "$@"
