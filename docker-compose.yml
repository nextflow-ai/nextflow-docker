# C·∫•u h√¨nh Docker Compose cho NextFlow

# ============================================================================
# NEXTFLOW DOCKER COMPOSE - H·ªÜ TH·ªêNG MICROSERVICES TO√ÄN DI·ªÜN
# ============================================================================
# M√¥ t·∫£: H·ªá th·ªëng NextFlow bao g·ªìm c√°c d·ªãch v·ª• AI, automation, monitoring,
#        v√† qu·∫£n l√Ω n·ªôi dung ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a cho m√¥i tr∆∞·ªùng production
# Phi√™n b·∫£n: 2.0
# C·∫≠p nh·∫≠t: 2025
# ============================================================================

# ƒê·ªäNH NGHƒ®A C√ÅC VOLUMES - L∆ØU TR·ªÆ D·ªÆ LI·ªÜU B·ªÄN V·ªÆNG
# ============================================================================
# Volumes ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu quan tr·ªçng c·ªßa c√°c service
# D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c b·∫£o to√†n ngay c·∫£ khi container b·ªã x√≥a ho·∫∑c kh·ªüi ƒë·ªông l·∫°i
volumes:
  # === D·ªäCH V·ª§ AI V√Ä AUTOMATION ===
  n8n_storage: # L∆∞u tr·ªØ workflows, credentials v√† d·ªØ li·ªáu n8n
  flowise: # L∆∞u tr·ªØ AI flows, chatbots v√† c·∫•u h√¨nh Flowise
  ollama_storage: # L∆∞u tr·ªØ c√°c m√¥ h√¨nh AI (LLM) ƒë√£ t·∫£i xu·ªëng
  qdrant_storage: # L∆∞u tr·ªØ vector embeddings cho t√¨m ki·∫øm semantic
  qdrant_snapshots: # L∆∞u tr·ªØ backup snapshots c·ªßa Qdrant
  open-webui: # L∆∞u tr·ªØ c·∫•u h√¨nh v√† d·ªØ li·ªáu giao di·ªán chat AI
  langflow_data: # L∆∞u tr·ªØ workflows v√† c·∫•u h√¨nh Langflow
  langflow_logs: # L∆∞u tr·ªØ logs c·ªßa Langflow

  # === C∆† S·ªû D·ªÆ LI·ªÜU ===
  postgres_storage: # L∆∞u tr·ªØ d·ªØ li·ªáu PostgreSQL (ch√≠nh)
  redis_data: # L∆∞u tr·ªØ cache v√† session Redis
  mariadb_data: # L∆∞u tr·ªØ d·ªØ li·ªáu MariaDB cho WordPress

  # === GI√ÅM S√ÅT V√Ä LOGGING ===
  prometheus_data: # L∆∞u tr·ªØ metrics v√† time-series data
  grafana_data: # L∆∞u tr·ªØ dashboards v√† c·∫•u h√¨nh Grafana
  loki_data: # L∆∞u tr·ªØ logs t·∫≠p trung t·ª´ t·∫•t c·∫£ services
  jaeger_data: # L∆∞u tr·ªØ distributed tracing data

  # === MESSAGING V√Ä QUEUE ===
  rabbitmq_data: # L∆∞u tr·ªØ messages v√† queue configuration

  # === QU·∫¢N L√ù M√É NGU·ªíN ===
  gitlab_config: # C·∫•u h√¨nh GitLab (c√≥ th·ªÉ d√πng bind mount)
  gitlab_logs: # Logs c·ªßa GitLab
  gitlab_data: # Repositories, issues, merge requests
  gitlab_backups: # Backup t·ª± ƒë·ªông c·ªßa GitLab

  # === MAIL SERVER ===
  stalwart_config: # C·∫•u h√¨nh Stalwart Mail Server
  stalwart_data: # D·ªØ li·ªáu email v√† mailboxes
  stalwart_logs: # Logs c·ªßa mail server

  # === QU·∫¢N L√ù N·ªòI DUNG ===
  wordpress_data:
    # Themes, plugins, uploads WordPress

    # ƒê·ªäNH NGHƒ®A M·∫†NG - NETWORK CONFIGURATION
    # ============================================================================
    # T·∫°o m·∫°ng bridge ƒë·ªÉ c√°c container c√≥ th·ªÉ giao ti·∫øp v·ªõi nhau
    # T·∫•t c·∫£ services s·∫Ω ƒë∆∞·ª£c k·∫øt n·ªëi v√†o m·∫°ng n√†y ƒë·ªÉ ƒë·∫£m b·∫£o connectivity
networks:
  demo:
    driver: bridge # S·ª≠ d·ª•ng bridge driver cho m·∫°ng n·ªôi b·ªô
    name: nextflow_network # T√™n m·∫°ng r√µ r√†ng
    ipam:
      # IP Address Management
      config:
        - subnet: 172.20.0.0/16 # D·∫£i IP cho m·∫°ng n·ªôi b·ªô

# C·∫§U H√åNH M·∫∂C ƒê·ªäNH CHO T·∫§T C·∫¢ SERVICES
# ============================================================================
# Template n√†y s·∫Ω ƒë∆∞·ª£c k·∫ø th·ª´a b·ªüi t·∫•t c·∫£ services ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
x-default-opts: &default-opts
  restart: unless-stopped # T·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i khi container b·ªã l·ªói (tr·ª´ khi d·ª´ng th·ªß c√¥ng)
  networks: [ 'demo' ] # K·∫øt n·ªëi t·∫•t c·∫£ services v√†o m·∫°ng chung
  logging:
    # C·∫•u h√¨nh logging th·ªëng nh·∫•t
    driver: "json-file" # S·ª≠ d·ª•ng JSON format cho logs
    options:
      max-size: "10m" # Gi·ªõi h·∫°n m·ªói file log t·ªëi ƒëa 10MB
      max-file: "3" # Gi·ªØ t·ªëi ƒëa 3 file log (rotation)
      compress: "true" # N√©n logs c≈© ƒë·ªÉ ti·∫øt ki·ªám dung l∆∞·ª£ng

# C·∫§U H√åNH TEMPLATE CHO N8N SERVICES
# ============================================================================
# Template chung cho t·∫•t c·∫£ c√°c instance c·ªßa n8n (main, worker, webhook)
# ƒê·∫£m b·∫£o c·∫•u h√¨nh nh·∫•t qu√°n v√† d·ªÖ b·∫£o tr√¨
x-n8n: &service-n8n
  <<: *default-opts # K·∫ø th·ª´a c·∫•u h√¨nh m·∫∑c ƒë·ªãnh
  image: n8nio/n8n:latest
  environment:
    # === C·∫§U H√åNH C·ªû S·ªû D·ªÆ LI·ªÜU ===
    - DB_TYPE=postgresdb # Lo·∫°i database
    - DB_POSTGRESDB_HOST=postgres # Host PostgreSQL
    - DB_POSTGRESDB_USER=${POSTGRES_USER} # Username database
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD} # Password database
    - DB_POSTGRESDB_DATABASE=nextflow_n8n # T√™n database ri√™ng cho n8n

    # === C·∫§U H√åNH B·∫¢O M·∫¨T ===
    - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY} # Kh√≥a m√£ h√≥a cho credentials
    - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET} # JWT secret cho x√°c th·ª±c

    # === C·∫§U H√åNH CH·ª®C NƒÇNG ===
    - N8N_DIAGNOSTICS_ENABLED=false # T·∫Øt g·ª≠i d·ªØ li·ªáu ch·∫©n ƒëo√°n v·ªÅ n8n.io
    - N8N_PERSONALIZATION_ENABLED=false # T·∫Øt thu th·∫≠p d·ªØ li·ªáu c√° nh√¢n h√≥a
    - WEBHOOK_URL=${N8N_URL} # URL webhook t·ª´ bi·∫øn m√¥i tr∆∞·ªùng

    # === C·∫§U H√åNH REDIS QUEUE ===
    - QUEUE_BULL_REDIS_HOST=redis # Host Redis cho queue
    - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD:-nextflow@2025} # Password Redis

  # === DEPENDENCIES - PH·ª§ THU·ªòC ===
  depends_on:
    postgres:
      condition: service_healthy # ƒê·ª£i PostgreSQL s·∫µn s√†ng
    redis:
      condition: service_healthy # ƒê·ª£i Redis s·∫µn s√†ng

# C·∫§U H√åNH TEMPLATE CHO OLLAMA SERVICES
# ============================================================================
# Template cho Ollama - C√¥ng c·ª• ch·∫°y m√¥ h√¨nh AI ng√¥n ng·ªØ l·ªõn (LLM) tr√™n m√°y local
# LLM = Large Language Model (M√¥ h√¨nh ng√¥n ng·ªØ l·ªõn)
# Inference engine = C√¥ng c·ª• suy lu·∫≠n AI
# H·ªó tr·ª£ c·∫£ CPU v√† GPU, t·ª± ƒë·ªông t·∫£i c√°c m√¥ h√¨nh AI c·∫ßn thi·∫øt
x-ollama: &service-ollama
  <<: *default-opts
  image: ollama/ollama:latest
  volumes:
    - ollama_storage:/root/.ollama # L∆∞u tr·ªØ m√¥ h√¨nh AI ƒë√£ t·∫£i (c√≥ th·ªÉ r·∫•t l·ªõn)
  environment:
    - OLLAMA_ORIGINS=* # Cho ph√©p CORS (Cross-Origin Resource Sharing - Chia s·∫ª t√†i nguy√™n gi·ªØa c√°c domain) t·ª´ m·ªçi ngu·ªìn
    - OLLAMA_HOST=0.0.0.0 # L·∫Øng nghe tr√™n t·∫•t c·∫£ giao di·ªán m·∫°ng (interfaces)
  # L∆ØU √ù: Kh√¥ng s·ª≠ d·ª•ng healthcheck v√¨ Ollama image thi·∫øu c√°c c√¥ng c·ª• ki·ªÉm tra c·∫ßn thi·∫øt
  # Thay v√†o ƒë√≥ s·ª≠ d·ª•ng depends_on v√† startup delay (ƒë·ªô tr·ªÖ kh·ªüi ƒë·ªông)

  # C·∫§U H√åNH TEMPLATE CHO VI·ªÜC T·∫¢I M√î H√åNH OLLAMA
  # ============================================================================
  # Service kh·ªüi t·∫°o (init service) ƒë·ªÉ t·ª± ƒë·ªông t·∫£i c√°c m√¥ h√¨nh AI c·∫ßn thi·∫øt
  # Ch·∫°y m·ªôt l·∫ßn sau khi Ollama kh·ªüi ƒë·ªông th√†nh c√¥ng
x-init-ollama: &init-ollama
  <<: *default-opts
  image: ollama/ollama:latest
  volumes:
    - ollama_storage:/root/.ollama # Chia s·∫ª b·ªô nh·ªõ l∆∞u tr·ªØ v·ªõi Ollama ch√≠nh
  entrypoint: /bin/sh # S·ª≠ d·ª•ng shell (giao di·ªán d√≤ng l·ªánh) ƒë·ªÉ ch·∫°y script
  extra_hosts:
    - "host.docker.internal:host-gateway" # Cho ph√©p truy c·∫≠p m√°y ch·ªß host n·∫øu c·∫ßn
  environment:
    - OLLAMA_HOST=ollama:11434 # K·∫øt n·ªëi ƒë·∫øn Ollama service
  command:
    - "-c"
    - |
      # === SCRIPT T·ª∞ ƒê·ªòNG T·∫¢I M√î H√åNH AI ===
      echo "üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i m√¥ h√¨nh AI..."

      # ƒê·ª£i Ollama service kh·ªüi ƒë·ªông ho√†n to√†n
      echo "‚è≥ ƒê·ª£i Ollama kh·ªüi ƒë·ªông (30 gi√¢y)..."
      sleep 30

      # Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Ollama
      echo "üîç Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Ollama..."
      for i in {1..10}; do
        if OLLAMA_HOST=ollama:11434 ollama list >/dev/null 2>&1; then
          echo "‚úÖ K·∫øt n·ªëi th√†nh c√¥ng v·ªõi Ollama!"
          break
        fi
        echo "‚ùå L·∫ßn th·ª≠ $i th·∫•t b·∫°i, ƒë·ª£i th√™m 10 gi√¢y..."
        sleep 10
      done

      # T·∫£i c√°c m√¥ h√¨nh AI c·∫ßn thi·∫øt
      echo "üì• B·∫Øt ƒë·∫ßu t·∫£i c√°c m√¥ h√¨nh AI..."

      # M√¥ h√¨nh ch√≠nh cho chat v√† completion (ho√†n th√†nh vƒÉn b·∫£n)
      echo "üì• ƒêang t·∫£i Llama 3.1 (m√¥ h√¨nh ch√≠nh cho tr√≤ chuy·ªán)..."
      OLLAMA_HOST=ollama:11434 ollama pull llama3.1

      # M√¥ h√¨nh embedding (nh√∫ng vƒÉn b·∫£n th√†nh vector) cho t√¨m ki·∫øm ng·ªØ nghƒ©a
      echo "üì• ƒêang t·∫£i Nomic Embed Text (chuy·ªÉn ƒë·ªïi vƒÉn b·∫£n th√†nh vector)..."
      OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text

      # M√¥ h√¨nh nh·∫π cho c√°c t√°c v·ª• ƒë∆°n gi·∫£n
      echo "üì• ƒêang t·∫£i Gemma 2:2B (m√¥ h√¨nh nh·∫π - 2 t·ª∑ tham s·ªë)..."
      OLLAMA_HOST=ollama:11434 ollama pull gemma2:2b

      # M√¥ h√¨nh reasoning (suy lu·∫≠n logic) m·ªõi
      echo "üì• ƒêang t·∫£i DeepSeek R1:7B (m√¥ h√¨nh suy lu·∫≠n - 7 t·ª∑ tham s·ªë)..."
      OLLAMA_HOST=ollama:11434 ollama pull deepseek-r1:7b

      echo "üéâ Ho√†n th√†nh t·∫£i t·∫•t c·∫£ m√¥ h√¨nh AI!"
      echo "üìã Danh s√°ch m√¥ h√¨nh ƒë√£ t·∫£i:"
      OLLAMA_HOST=ollama:11434 ollama list

# ============================================================================
# ƒê·ªäNH NGHƒ®A C√ÅC SERVICES - MICROSERVICES ARCHITECTURE
# ============================================================================
# T·∫•t c·∫£ c√°c d·ªãch v·ª• ƒë∆∞·ª£c t·ªï ch·ª©c theo nh√≥m ch·ª©c nƒÉng ƒë·ªÉ d·ªÖ qu·∫£n l√Ω
# M·ªói service c√≥ c·∫•u h√¨nh t·ªëi ∆∞u cho production environment

services:
  # ============================================================================
  # NH√ìM D·ªäCH V·ª§ AI V√Ä AUTOMATION
  # ============================================================================

  # FLOWISE - C√îNG C·ª§ X√ÇY D·ª∞NG LU·ªíNG C√îNG VI·ªÜC AI B·∫∞NG GIAO DI·ªÜN K√âO TH·∫¢
  # ----------------------------------------------------------------------------
  # C√¥ng c·ª• no-code (kh√¥ng c·∫ßn l·∫≠p tr√¨nh) ƒë·ªÉ x√¢y d·ª±ng AI agents (ƒë·∫°i l√Ω AI), chatbots (bot tr√≤ chuy·ªán) v√† workflows (lu·ªìng c√¥ng vi·ªác)
  # T√≠ch h·ª£p v·ªõi LLMs (M√¥ h√¨nh ng√¥n ng·ªØ l·ªõn), vector databases (c∆° s·ªü d·ªØ li·ªáu vector) v√† external APIs (API b√™n ngo√†i)
  flowise:
    <<: *default-opts
    image: flowiseai/flowise:latest
    container_name: flowise
    hostname: flowise # T√™n m√°y ch·ªß r√µ r√†ng cho service discovery (kh√°m ph√° d·ªãch v·ª•)

    # === C·∫§U H√åNH ENVIRONMENT ===
    environment:
      # C·∫•u h√¨nh c∆° b·∫£n
      - PORT=3000 # Port internal c·ªßa Flowise
      - NODE_ENV=production # Ch·∫ø ƒë·ªô production

      # X√°c th·ª±c v√† b·∫£o m·∫≠t
      - FLOWISE_USERNAME=${FLOWISE_USERNAME:-admin} # Username ƒëƒÉng nh·∫≠p
      - FLOWISE_PASSWORD=${FLOWISE_PASSWORD:-password} # Password ƒëƒÉng nh·∫≠p
      - FLOWISE_SECRETKEY_OVERWRITE=${FLOWISE_SECRET_KEY:-your-secret-key} # Secret key

      # C·∫•u h√¨nh Redis cache
      - REDIS_HOST=redis # Host Redis
      - REDIS_PORT=6379 # Port Redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-nextflow@2025} # Password Redis

      # C·∫•u h√¨nh database (n·∫øu c·∫ßn)
      - DATABASE_TYPE=sqlite # S·ª≠ d·ª•ng SQLite cho ƒë∆°n gi·∫£n
      - DATABASE_PATH=/root/.flowise # ƒê∆∞·ªùng d·∫´n database

      # C·∫•u h√¨nh logging
      - LOG_LEVEL=info # M·ª©c ƒë·ªô logging
      - LOG_PATH=/root/.flowise/logs # ƒê∆∞·ªùng d·∫´n logs

    # === PORT MAPPING ===
    ports:
      - "4001:3000" # Expose port 3000 ra host:4001

    # === NETWORK CONFIGURATION ===
    extra_hosts:
      - "host.docker.internal:host-gateway" # Cho ph√©p truy c·∫≠p host

    # === VOLUME MOUNTS ===
    volumes:
      - flowise:/root/.flowise # Persistent storage cho Flowise
      - ./shared:/data/shared # Shared folder v·ªõi host

    # === STARTUP CONFIGURATION ===
    entrypoint: /bin/sh -c "sleep 3; flowise start" # Delay nh·ªè ƒë·ªÉ tr√°nh race condition

    # === DEPENDENCIES ===
    depends_on:
      redis:
        condition: service_healthy # ƒê·ª£i Redis s·∫µn s√†ng

    # === HEALTH CHECK ===
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/v1/ping" ]
      interval: 30s # Ki·ªÉm tra m·ªói 30 gi√¢y
      timeout: 10s # Timeout sau 10 gi√¢y
      retries: 3 # Th·ª≠ l·∫°i 3 l·∫ßn
      start_period: 60s # ƒê·ª£i 60 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu check

    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          cpus: '2' # T·ªëi ƒëa 2 CPU cores
          memory: 4G # T·ªëi ƒëa 4GB RAM
        reservations:
          cpus: '0.5' # ƒê·∫£m b·∫£o √≠t nh·∫•t 0.5 CPU
          memory: 1G # ƒê·∫£m b·∫£o √≠t nh·∫•t 1GB RAM

    # === LABELS FOR MONITORING ===
    labels:
      - "traefik.enable=true" # Enable Traefik routing (n·∫øu d√πng)
      - "service.group=ai" # Nh√≥m service AI
      - "service.type=frontend" # Lo·∫°i service

  # OPEN WEBUI - GIAO DI·ªÜN CHAT HI·ªÜN ƒê·∫†I CHO AI
  # ----------------------------------------------------------------------------
  # Giao di·ªán chat hi·ªán ƒë·∫°i t∆∞∆°ng t·ª± ChatGPT ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi LLMs c·ª•c b·ªô (local LLMs)
  # H·ªó tr·ª£ nhi·ªÅu m√¥ h√¨nh (multiple models), l·ªãch s·ª≠ tr√≤ chuy·ªán v√† t·∫£i file l√™n
  open-webui:
    <<: *default-opts
    image: ghcr.io/open-webui/open-webui:latest
    container_name: open-webui
    hostname: open-webui # T√™n m√°y ch·ªß cho kh√°m ph√° d·ªãch v·ª•

    # === C·∫§U H√åNH ENVIRONMENT ===
    environment:
      # C·∫•u h√¨nh Ollama connection
      - OLLAMA_BASE_URL=http://ollama:11434 # URL k·∫øt n·ªëi ƒë·∫øn Ollama
      - WEBUI_SECRET_KEY=${OPENWEBUI_SECRET_KEY:-your-secret-key} # Secret key

      # C·∫•u h√¨nh authentication
      - WEBUI_AUTH=true # B·∫≠t x√°c th·ª±c
      - DEFAULT_USER_ROLE=user # Role m·∫∑c ƒë·ªãnh cho user m·ªõi

      # C·∫•u h√¨nh features
      - ENABLE_SIGNUP=true # Cho ph√©p ƒëƒÉng k√Ω user m·ªõi
      - ENABLE_LOGIN_FORM=true # Hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
      - ENABLE_WEB_SEARCH=false # T·∫Øt web search (c√≥ th·ªÉ b·∫≠t sau)

      # C·∫•u h√¨nh file upload
      - ENABLE_IMAGE_GENERATION=true # B·∫≠t t·∫°o ·∫£nh (n·∫øu model h·ªó tr·ª£)
      - MAX_FILE_SIZE=10485760 # Gi·ªõi h·∫°n file upload 10MB

      # C·∫•u h√¨nh logging
      - LOG_LEVEL=INFO # M·ª©c ƒë·ªô logging

    # === PORT MAPPING ===
    ports:
      - "5080:8080" # Expose port 8080 ra host:5080

    # === VOLUME MOUNTS ===
    volumes:
      - open-webui:/app/backend/data # Persistent storage
      - ./shared:/data/shared # Shared folder cho file uploads

    # === DEPENDENCIES ===
    # depends_on:
    #   - ollama-cpu                  # Ph·ª• thu·ªôc v√†o Ollama (CPU version) - Commented ƒë·ªÉ tr√°nh l·ªói khi kh√¥ng d√πng profile cpu

    # === HEALTH CHECK ===
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s # Ki·ªÉm tra m·ªói 30 gi√¢y
      timeout: 10s # Timeout sau 10 gi√¢y
      retries: 3 # Th·ª≠ l·∫°i 3 l·∫ßn
      start_period: 30s # ƒê·ª£i 30 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu check

    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          cpus: '2' # T·ªëi ƒëa 2 CPU cores
          memory: 3G # T·ªëi ƒëa 3GB RAM
        reservations:
          cpus: '0.5' # ƒê·∫£m b·∫£o √≠t nh·∫•t 0.5 CPU
          memory: 1G # ƒê·∫£m b·∫£o √≠t nh·∫•t 1GB RAM

    # === LABELS FOR MONITORING ===
    labels:
      - "traefik.enable=true" # Enable Traefik routing
      - "service.group=ai" # Nh√≥m service AI
      - "service.type=frontend" # Lo·∫°i service

  # POSTGRESQL - M√ÅY CH·ª¶ C∆† S·ªû D·ªÆ LI·ªÜU CH√çNH
  # ----------------------------------------------------------------------------
  # C∆° s·ªü d·ªØ li·ªáu ch√≠nh cho to√†n b·ªô h·ªá th·ªëng NextFlow
  # H·ªó tr·ª£ nhi·ªÅu c∆° s·ªü d·ªØ li·ªáu (multiple databases) cho c√°c d·ªãch v·ª• kh√°c nhau
  postgres:
    <<: *default-opts
    image: postgres:16-alpine # Phi√™n b·∫£n Alpine (nh·∫π v√† b·∫£o m·∫≠t)
    container_name: postgres
    hostname: postgres # T√™n m√°y ch·ªß cho kh√°m ph√° d·ªãch v·ª•
    restart: always

    # === C·∫§U H√åNH ENVIRONMENT ===
    environment:
      # Database configuration
      POSTGRES_USER: ${POSTGRES_USER:-nextflow} # User ch√≠nh
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nextflow@2025} # Password
      POSTGRES_DB: ${POSTGRES_DB:-nextflow} # Database ch√≠nh
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES:-nextflow_n8n,gitlabhq_production}
      PGDATA: /var/lib/postgresql/data/pgdata # Data directory

      # PostgreSQL specific settings
      POSTGRES_INITDB_ARGS: --encoding=UTF-8 --lc-collate=C --lc-ctype=C # Init args

      # T·ªëi ∆∞u hi·ªáu nƒÉng (Performance tuning)
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements # Th∆∞ vi·ªán m·ªü r·ªông th·ªëng k√™
      POSTGRES_MAX_CONNECTIONS: 200 # T·ªëi ƒëa 200 k·∫øt n·ªëi ƒë·ªìng th·ªùi
      POSTGRES_SHARED_BUFFERS: 256MB # B·ªô nh·ªõ ƒë·ªám chia s·∫ª
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB # G·ª£i √Ω k√≠ch th∆∞·ªõc cache h·ªá th·ªëng
      POSTGRES_WORK_MEM: 4MB # B·ªô nh·ªõ l√†m vi·ªác cho m·ªói truy v·∫•n
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB # B·ªô nh·ªõ cho t√°c v·ª• b·∫£o tr√¨

      # C·∫•u h√¨nh ghi log
      POSTGRES_LOG_STATEMENT: mod # Ghi log c√°c thay ƒë·ªïi d·ªØ li·ªáu
      POSTGRES_LOG_MIN_DURATION_STATEMENT: 1000 # Ghi log truy v·∫•n ch·∫≠m (>1 gi√¢y)
      POSTGRES_LOG_CHECKPOINTS: on # Ghi log checkpoint (ƒëi·ªÉm ki·ªÉm tra)
      POSTGRES_LOG_CONNECTIONS: on # Ghi log k·∫øt n·ªëi
      POSTGRES_LOG_DISCONNECTIONS: on # Ghi log ng·∫Øt k·∫øt n·ªëi

    # === PORT MAPPING ===
    ports:
      - "5432:5432" # Standard PostgreSQL port

    # === VOLUME MOUNTS ===
    volumes:
      - postgres_storage:/var/lib/postgresql/data # Persistent data
      - ./postgres/init:/docker-entrypoint-initdb.d # Init scripts
      - ./postgres/conf:/etc/postgresql # Custom config
      - ./postgres/logs:/var/log/postgresql # Log files

    # === HEALTH CHECK ===
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nextflow} -d ${POSTGRES_DB:-nextflow}" ]
      interval: 30s # Ki·ªÉm tra m·ªói 30 gi√¢y
      timeout: 10s # Timeout sau 10 gi√¢y
      retries: 10 # Th·ª≠ l·∫°i 10 l·∫ßn (database c·∫ßn th·ªùi gian)
      start_period: 60s # ƒê·ª£i 60 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu check

    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          cpus: '4' # T·ªëi ƒëa 4 CPU cores
          memory: 6G # T·ªëi ƒëa 6GB RAM
        reservations:
          cpus: '1' # ƒê·∫£m b·∫£o √≠t nh·∫•t 1 CPU
          memory: 2G # ƒê·∫£m b·∫£o √≠t nh·∫•t 2GB RAM

    # === LABELS FOR MONITORING ===
    labels:
      - "traefik.enable=false" # Kh√¥ng expose qua Traefik
      - "service.group=database" # Nh√≥m service database
      - "service.type=backend" # Lo·∫°i service backend
      - "backup.enable=true" # Enable backup cho service n√†y

  # N8N - N·ªÄN T·∫¢NG T·ª∞ ƒê·ªòNG H√ìA LU·ªíNG C√îNG VI·ªÜC
  # ----------------------------------------------------------------------------
  # N·ªÅn t·∫£ng t·ª± ƒë·ªông h√≥a workflow (lu·ªìng c√¥ng vi·ªác) m·∫°nh m·∫Ω v·ªõi giao di·ªán k√©o th·∫£
  # K·∫øt n·ªëi v√† t·ª± ƒë·ªông h√≥a c√°c ·ª©ng d·ª•ng, d·ªãch v·ª• v√† APIs
  # Ghi ch√∫: n8n-import service ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè v√¨ ch·∫°y r·∫•t ch·∫≠m khi kh·ªüi ƒë·ªông l·∫°i Docker
  n8n:
    <<: *service-n8n # K·∫ø th·ª´a template c·∫•u h√¨nh n8n
    container_name: n8n
    hostname: n8n # T√™n m√°y ch·ªß cho kh√°m ph√° d·ªãch v·ª•

    # === PORT MAPPING ===
    ports:
      - "7856:5678" # Custom port 7856 thay v√¨ port m·∫∑c ƒë·ªãnh 5678

    # === C·∫§U H√åNH ENVIRONMENT ===
    environment:
      # === C∆† S·ªû D·ªÆ LI·ªÜU ===
      - DB_TYPE=postgresdb # Lo·∫°i database
      - DB_POSTGRESDB_HOST=postgres # PostgreSQL host
      - DB_POSTGRESDB_USER=${POSTGRES_USER} # Database user
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD} # Database password
      - DB_POSTGRESDB_DATABASE=nextflow_n8n # Database name

      # === B·∫¢O M·∫¨T & X√ÅC TH·ª∞C ===
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY} # Kh√≥a m√£ h√≥a workflows
      - N8N_USER_MANAGEMENT_JWT_SECRET=${N8N_USER_MANAGEMENT_JWT_SECRET} # JWT secret
      - WEBHOOK_URL=${N8N_URL} # URL webhook public

      # === C·∫§U H√åNH REDIS QUEUE (H√ÄNG ƒê·ª¢I) ===
      - QUEUE_BULL_REDIS_HOST=redis # M√°y ch·ªß Redis cho h√†ng ƒë·ª£i t√°c v·ª•
      - QUEUE_BULL_REDIS_PASSWORD=${REDIS_PASSWORD:-nextflow@2025} # M·∫≠t kh·∫©u Redis

      # === CH·ª®C NƒÇNG & T√çNH NƒÇNG ===
      - N8N_DIAGNOSTICS_ENABLED=false # T·∫Øt g·ª≠i d·ªØ li·ªáu ch·∫©n ƒëo√°n v·ªÅ n8n.io
      - N8N_PERSONALIZATION_ENABLED=false # T·∫Øt thu th·∫≠p d·ªØ li·ªáu c√° nh√¢n h√≥a
      - N8N_METRICS_ENABLED=true # B·∫≠t metrics (s·ªë li·ªáu) cho gi√°m s√°t
      - N8N_HIRING_BANNER_ENABLED=false # T·∫Øt banner qu·∫£ng c√°o tuy·ªÉn d·ª•ng
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false # T·∫Øt th√¥ng b√°o phi√™n b·∫£n m·ªõi
      - N8N_TEMPLATES_ENABLED=true # B·∫≠t m·∫´u workflow c√≥ s·∫µn
      - N8N_TEMPLATES_HOST=https://api.n8n.io/ # M√°y ch·ªß cung c·∫•p m·∫´u workflow
      - N8N_CACHE_ENABLED=true # B·∫≠t b·ªô nh·ªõ ƒë·ªám ƒë·ªÉ tƒÉng hi·ªáu nƒÉng

      # === M·∫†NG & GIAO TI·∫æP ===
      - N8N_PUSH_BACKEND=websocket # S·ª≠ d·ª•ng websocket cho giao ti·∫øp th·ªùi gian th·ª±c
      - N8N_EDITOR_BASE_URL=https://n8n.nextflow.vn # URL c∆° s·ªü cho tr√¨nh ch·ªânh s·ª≠a
      - N8N_HOST=n8n.nextflow.vn # T√™n m√°y ch·ªß c√¥ng khai
      - N8N_PROTOCOL=https # Giao th·ª©c HTTPS b·∫£o m·∫≠t
      - N8N_PORT=5678 # C·ªïng n·ªôi b·ªô

      # === RUNTIME CONFIGURATION ===
      - NODE_ENV=production # Ch·∫ø ƒë·ªô production
      - EXECUTIONS_PROCESS=main # X·ª≠ l√Ω executions trong main process
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh # M√∫i gi·ªù Vi·ªát Nam
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true # T·ª± ƒë·ªông s·ª≠a file permissions

      # === LOGGING ===
      - N8N_LOG_LEVEL=info # M·ª©c ƒë·ªô logging
      - N8N_LOG_OUTPUT=console # Output logs ra console

    # === VOLUME MOUNTS ===
    volumes:
      - n8n_storage:/home/node/.n8n # Persistent n8n data
      - ./n8n/backup:/backup # Backup directory
      - ./shared:/data/shared # Shared files access
      - ./n8n/workflows:/home/node/workflows # Workflow templates
      - ./n8n/credentials:/home/node/credentials # Credential templates

    # === DEPENDENCIES ===
    depends_on:
      postgres:
        condition: service_healthy # ƒê·ª£i PostgreSQL s·∫µn s√†ng
      redis:
        condition: service_healthy # ƒê·ª£i Redis s·∫µn s√†ng

    # === HEALTH CHECK ===
    # Note: T·∫°m th·ªùi t·∫Øt health check v√¨ n8n kh√¥ng c√≥ endpoint /healthz ·ªïn ƒë·ªãnh
    # v√† c√≥ th·ªÉ g√¢y l·ªói k·∫øt n·ªëi trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p
    # healthcheck:
    #   test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/" ]
    #   interval: 60s
    #   timeout: 15s
    #   retries: 3
    #   start_period: 120s

    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          cpus: '4' # T·ªëi ƒëa 4 CPU cores
          memory: 6G # T·ªëi ƒëa 6GB RAM
        reservations:
          cpus: '4' # ƒê·∫£m b·∫£o √≠t nh·∫•t 1 CPU
          memory: 4G # ƒê·∫£m b·∫£o √≠t nh·∫•t 2GB RAM

    # === LABELS FOR MONITORING ===
    labels:
      - "traefik.enable=true" # Enable Traefik routing
      - "service.group=automation" # Nh√≥m service automation
      - "service.type=frontend" # Lo·∫°i service frontend
      - "backup.enable=true" # Enable backup workflows

  # QDRANT - C∆† S·ªû D·ªÆ LI·ªÜU VECTOR CHO AI EMBEDDINGS
  # ----------------------------------------------------------------------------
  # C∆° s·ªü d·ªØ li·ªáu vector hi·ªáu nƒÉng cao cho vi·ªác l∆∞u tr·ªØ v√† t√¨m ki·∫øm embeddings (vector nh√∫ng)
  # Embeddings = Vector bi·ªÉu di·ªÖn vƒÉn b·∫£n/h√¨nh ·∫£nh d∆∞·ªõi d·∫°ng s·ªë h·ªçc
  # H·ªó tr·ª£ t√¨m ki·∫øm t∆∞∆°ng t·ª± (similarity search), l·ªçc d·ªØ li·ªáu v√† ƒë√°nh ch·ªâ m·ª•c th·ªùi gian th·ª±c
  qdrant:
    <<: *default-opts
    image: qdrant/qdrant:latest
    container_name: qdrant
    hostname: qdrant # T√™n m√°y ch·ªß cho kh√°m ph√° d·ªãch v·ª•

    # === C·∫§U H√åNH ENVIRONMENT ===
    environment:
      # C·∫•u h√¨nh d·ªãch v·ª• Qdrant
      - QDRANT__SERVICE__HTTP_PORT=6333 # C·ªïng HTTP API
      - QDRANT__SERVICE__GRPC_PORT=6334 # C·ªïng gRPC (giao th·ª©c RPC hi·ªáu nƒÉng cao)
      - QDRANT__LOG_LEVEL=INFO # M·ª©c ƒë·ªô ghi log

      # C·∫•u h√¨nh l∆∞u tr·ªØ
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage # ƒê∆∞·ªùng d·∫´n l∆∞u tr·ªØ d·ªØ li·ªáu
      - QDRANT__STORAGE__SNAPSHOTS_PATH=/qdrant/snapshots # ƒê∆∞·ªùng d·∫´n l∆∞u b·∫£n sao l∆∞u
      - QDRANT__STORAGE__ON_DISK_PAYLOAD=true # L∆∞u payload (d·ªØ li·ªáu k√®m theo) tr√™n ƒëƒ©a

      # T·ªëi ∆∞u hi·ªáu nƒÉng
      - QDRANT__SERVICE__MAX_REQUEST_SIZE_MB=32 # K√≠ch th∆∞·ªõc t·ªëi ƒëa m·ªói y√™u c·∫ßu (32MB)
      - QDRANT__SERVICE__MAX_WORKERS=0 # T·ª± ƒë·ªông ph√°t hi·ªán s·ªë worker (lu·ªìng x·ª≠ l√Ω)
      - QDRANT__STORAGE__WAL_CAPACITY_MB=32 # Dung l∆∞·ª£ng WAL (Write-Ahead Log - Log ghi tr∆∞·ªõc)
      - QDRANT__STORAGE__WAL_SEGMENTS_AHEAD=0 # S·ªë segment WAL d·ª± tr·ªØ

      # B·∫£o m·∫≠t
      - QDRANT__SERVICE__ENABLE_CORS=true # B·∫≠t CORS (chia s·∫ª t√†i nguy√™n cross-origin)
      - QDRANT__CLUSTER__ENABLED=false # T·∫Øt ch·∫ø ƒë·ªô cluster (c·ª•m m√°y ch·ªß)

    # === PORT MAPPING ===
    ports:
      - "6333:6333" # HTTP API port
      - "6334:6334" # gRPC port (optional)

    # === VOLUME MOUNTS ===
    volumes:
      - qdrant_storage:/qdrant/storage # Vector data storage
      - qdrant_snapshots:/qdrant/snapshots # Backup snapshots
      - ./qdrant/config:/qdrant/config # Custom configuration

    # === HEALTH CHECK ===
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:6333/health" ]
      interval: 30s # Ki·ªÉm tra m·ªói 30 gi√¢y
      timeout: 10s # Timeout sau 10 gi√¢y
      retries: 3 # Th·ª≠ l·∫°i 3 l·∫ßn
      start_period: 30s # ƒê·ª£i 30 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu check

    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          cpus: '4' # T·ªëi ƒëa 4 CPU cores
          memory: 8G # T·ªëi ƒëa 8GB RAM (vector DB c·∫ßn nhi·ªÅu RAM)
        reservations:
          cpus: '2' # ƒê·∫£m b·∫£o √≠t nh·∫•t 1 CPU
          memory: 4G # ƒê·∫£m b·∫£o √≠t nh·∫•t 2GB RAM

    # === LABELS FOR MONITORING ===
    labels:
      - "traefik.enable=false" # Kh√¥ng expose qua Traefik (internal use)
      - "service.group=ai" # Nh√≥m service AI
      - "service.type=database" # Lo·∫°i service database
      - "backup.enable=true" # Enable backup cho vectors

  # Ollama CPU - Phi√™n b·∫£n Ollama cho CPU
  ollama-cpu:
    profiles: [ "cpu" ] # Ch·ªâ ch·∫°y khi s·ª≠ d·ª•ng profile cpu
    <<: *service-ollama
    container_name: ollama
    ports:
      - "11434:11434" # Expose port Ollama
    deploy:
      resources:
        limits:
          cpus: '4' # Gi·ªõi h·∫°n t·ªëi ƒëa 4 CPU
          memory: 8G # Gi·ªõi h·∫°n t·ªëi ƒëa 8GB RAM
        reservations:
          cpus: '2' # ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 2 CPU
          memory: 4G # ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 4GB RAM

  # Ollama GPU - Phi√™n b·∫£n Ollama cho GPU NVIDIA
  ollama-gpu:
    profiles: [ "gpu-nvidia" ] # Ch·ªâ ch·∫°y khi s·ª≠ d·ª•ng profile gpu-nvidia
    <<: *service-ollama
    container_name: ollama
    ports:
      - "11434:11434"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia # S·ª≠ d·ª•ng NVIDIA GPU
              count: 1 # S·ª≠ d·ª•ng 1 GPU
              capabilities: [ gpu ] # Y√™u c·∫ßu kh·∫£ nƒÉng GPU

  # Service t·∫£i m√¥ h√¨nh cho Ollama CPU
  ollama-pull-llama-cpu:
    profiles: [ "cpu" ]
    <<: *init-ollama
    container_name: ollama-pull-llama
    depends_on:
      - ollama-cpu # ƒê∆°n gi·∫£n h√≥a ph·ª• thu·ªôc
    restart: "no" # Ch·ªâ ch·∫°y m·ªôt l·∫ßn v√† kh√¥ng kh·ªüi ƒë·ªông l·∫°i

  # Service t·∫£i m√¥ h√¨nh cho Ollama GPU
  ollama-pull-llama-gpu:
    profiles: [ "gpu-nvidia" ]
    <<: *init-ollama
    container_name: ollama-pull-llama
    depends_on:
      - ollama-gpu # ƒê∆°n gi·∫£n h√≥a ph·ª• thu·ªôc
    restart: "no" # Ch·ªâ ch·∫°y m·ªôt l·∫ßn v√† kh√¥ng kh·ªüi ƒë·ªông l·∫°i

  # Redis - H·ªá th·ªëng cache (b·ªô nh·ªõ ƒë·ªám) in-memory
  redis:
    <<: *default-opts
    image: redis:7.2-alpine # S·ª≠ d·ª•ng phi√™n b·∫£n Alpine (Linux nh·∫π)
    container_name: redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-nextflow@2025} --appendonly yes
    ports:
      - "6379:6379" # M·ªü c·ªïng Redis
    volumes:
      - redis_data:/data # L∆∞u tr·ªØ d·ªØ li·ªáu b·ªÅn v·ªØng
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G

  # Redis Commander - Giao di·ªán web ƒë·ªÉ qu·∫£n l√Ω Redis
  redis-commander:
    <<: *default-opts
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-nextflow@2025}
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-nextflow@2025}
    ports:
      - "8082:8081" # Giao di·ªán web cho Redis Commander
    depends_on:
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 1G

  # D·ªãch v·ª• sao l∆∞u t·ª± ƒë·ªông cho PostgreSQL
  backup:
    image: postgres:16-alpine
    container_name: backup
    restart: "no" # Ch·ªâ ch·∫°y m·ªôt l·∫ßn
    volumes:
      - ./backups/postgres:/backups # Th∆∞ m·ª•c l∆∞u tr·ªØ b·∫£n sao l∆∞u
    command: |
      bash -c '
      mkdir -p /backups
      export PGPASSWORD=$$POSTGRES_PASSWORD
      TIMESTAMP=$$(date +%Y%m%d_%H%M%S)

      echo "===== B·∫ÆT ƒê·∫¶U SAO L∆ØU POSTGRESQL ====="
      echo "Th·ªùi gian b·∫Øt ƒë·∫ßu: $$(date)"

      # Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn PostgreSQL
      echo "Ki·ªÉm tra k·∫øt n·ªëi ƒë·∫øn PostgreSQL..."
      if ! pg_isready -h postgres -U $$POSTGRES_USER; then
        echo "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn PostgreSQL. ƒêang th·ª≠ l·∫°i..."
        sleep 10
        if ! pg_isready -h postgres -U $$POSTGRES_USER; then
          echo "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn PostgreSQL sau khi th·ª≠ l·∫°i. H·ªßy b·ªè sao l∆∞u."
          exit 1
        fi
      fi

      # Li·ªát k√™ c√°c c∆° s·ªü d·ªØ li·ªáu
      echo "C√°c c∆° s·ªü d·ªØ li·ªáu hi·ªán c√≥:"
      psql -h postgres -U $$POSTGRES_USER -c "\l"

      # Sao l∆∞u c∆° s·ªü d·ªØ li·ªáu ch√≠nh nextflow
      echo "ƒêang sao l∆∞u c∆° s·ªü d·ªØ li·ªáu nextflow..."
      pg_dump -h postgres -U $$POSTGRES_USER -d nextflow -F c -b -v -f /backups/nextflow_$$TIMESTAMP.backup

      # Sao l∆∞u c∆° s·ªü d·ªØ li·ªáu n8n
      echo "ƒêang sao l∆∞u c∆° s·ªü d·ªØ li·ªáu nextflow_n8n..."
      pg_dump -h postgres -U $$POSTGRES_USER -d nextflow_n8n -F c -b -v -f /backups/nextflow_n8n_$$TIMESTAMP.backup

      # Sao l∆∞u t·∫•t c·∫£ c√°c c∆° s·ªü d·ªØ li·ªáu
      echo "ƒêang sao l∆∞u t·∫•t c·∫£ c√°c c∆° s·ªü d·ªØ li·ªáu..."
      pg_dumpall -h postgres -U $$POSTGRES_USER -f /backups/all_databases_$$TIMESTAMP.sql

      # X√≥a c√°c t·ªáp sao l∆∞u c≈© h∆°n 7 ng√†y
      echo "ƒêang x√≥a c√°c t·ªáp sao l∆∞u c≈©..."
      find /backups -type f -mtime +7 -delete

      echo "Th·ªùi gian k·∫øt th√∫c: $$(date)"
      echo "===== HO√ÄN TH√ÄNH SAO L∆ØU POSTGRESQL ====="

      # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c t·ªáp sao l∆∞u ƒë√£ t·∫°o
      echo "C√°c t·ªáp sao l∆∞u ƒë√£ t·∫°o:"
      ls -lh /backups/

      # Hi·ªÉn th·ªã dung l∆∞·ª£ng th∆∞ m·ª•c sao l∆∞u
      echo "T·ªïng dung l∆∞·ª£ng th∆∞ m·ª•c sao l∆∞u:"
      du -sh /backups/
      '
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-root}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-nextflow@2025}
    networks:
      - demo
    depends_on:
      postgres:
        condition: service_healthy # Ch·ªâ ch·∫°y khi PostgreSQL ƒë√£ s·∫µn s√†ng
    profiles: [ "backup" ] # Ch·ªâ ch·∫°y khi s·ª≠ d·ª•ng profile sao l∆∞u

  # Cloudflare Tunnel "nextflow" - ƒê∆∞·ªùng h·∫ßm b·∫£o m·∫≠t cho d·ªãch v·ª• ch√≠nh
  cloudflare-tunnel:
    <<: *default-opts
    image: cloudflare/cloudflared:latest
    container_name: cloudflare-tunnel
    hostname: cloudflare-tunnel
    command: tunnel --config /etc/cloudflared/config.yml run
    volumes:
      - ./cloudflared/config/cloudflared-config.yml:/etc/cloudflared/config.yml
      - ./cloudflared/credentials/credentials.json:/etc/cloudflared/credentials.json
    environment:
      - TUNNEL_ORIGIN_CERT=/etc/cloudflared/credentials.json
      - NO_AUTOUPDATE=true # T·∫Øt t·ª± ƒë·ªông c·∫≠p nh·∫≠t
    networks:
      - demo
    extra_hosts:
      - "host.docker.internal:host-gateway" # K·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß host
    depends_on:
      - wordpress
      - mariadb
    restart: unless-stopped

  # Prometheus - H·ªá th·ªëng thu th·∫≠p metrics (ch·ªâ s·ªë hi·ªáu nƒÉng)
  prometheus:
    <<: *default-opts
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle' # Cho ph√©p reload c·∫•u h√¨nh ƒë·ªông
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 1G
    profiles: [ "monitoring" ]

  # Grafana - H·ªá th·ªëng hi·ªÉn th·ªã dashboard (b·∫£ng ƒëi·ªÅu khi·ªÉn tr·ª±c quan)
  grafana:
    <<: *default-opts
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3030:3000"
    volumes:
      - ./config/monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./config/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false # T·∫Øt ƒëƒÉng k√Ω t·ª± do
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 1G
    depends_on:
      prometheus:
        condition: service_healthy
    profiles: [ "monitoring" ]

  # Loki - H·ªá th·ªëng thu th·∫≠p logs (nh·∫≠t k√Ω h·ªá th·ªëng)
  loki:
    <<: *default-opts
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/monitoring/loki-config.yml:/etc/loki/loki-config.yml
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:3100/ready" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 1G
    profiles: [ "monitoring" ]

  # Promtail - Agent thu th·∫≠p logs t·ª´ c√°c container
  promtail:
    <<: *default-opts
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./config/monitoring/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro # Ch·ªâ ƒë·ªçc logs container
      - /var/run/docker.sock:/var/run/docker.sock # K·∫øt n·ªëi Docker daemon
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      loki:
        condition: service_healthy
    profiles: [ "monitoring" ]

  # Node Exporter - Thu th·∫≠p metrics t·ª´ m√°y ch·ªß host
  node-exporter:
    <<: *default-opts
    image: prom/node-exporter:latest
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro # Th√¥ng tin ti·∫øn tr√¨nh
      - /sys:/host/sys:ro # Th√¥ng tin h·ªá th·ªëng
      - /:/rootfs:ro # Th√¥ng tin filesystem
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    profiles: [ "monitoring" ]

  # cAdvisor - Thu th·∫≠p metrics t·ª´ c√°c container Docker
  cadvisor:
    <<: *default-opts
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro # Root filesystem
      - /var/run:/var/run:ro # Runtime information
      - /sys:/sys:ro # System information
      - /var/lib/docker/:/var/lib/docker:ro # Docker data
      - /dev/disk/:/dev/disk:ro # Disk information
    ports:
      - "8081:8080"
    profiles: [ "monitoring" ]

  # RabbitMQ - H·ªá th·ªëng message queue (h√†ng ƒë·ª£i tin nh·∫Øn)
  rabbitmq:
    <<: *default-opts
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672" # C·ªïng AMQP (giao th·ª©c tin nh·∫Øn)
      - "15672:15672" # C·ªïng giao di·ªán qu·∫£n l√Ω web
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-admin}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-/} # Virtual host m·∫∑c ƒë·ªãnh
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_port_connectivity" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 1G
    profiles: [ "messaging" ]
    
  # Jaeger - H·ªá th·ªëng distributed tracing (theo d√µi ph√¢n t√°n)
  jaeger:
    <<: *default-opts
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true # B·∫≠t OpenTelemetry Protocol
    ports:
      - "6831:6831/udp" # Jaeger thrift compact
      - "6832:6832/udp" # Jaeger thrift binary
      - "5778:5778" # Jaeger configs
      - "16686:16686" # Giao di·ªán web Jaeger
      - "4317:4317" # OTLP gRPC
      - "4318:4318" # OTLP HTTP
      - "9411:9411" # Zipkin (t∆∞∆°ng th√≠ch)
    volumes:
      - jaeger_data:/badger
    healthcheck:
      test: [ "CMD", "wget", "-q", "--spider", "http://localhost:16686" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    profiles: [ "tracing" ]

  # MariaDB - C∆° s·ªü d·ªØ li·ªáu MySQL cho WordPress
  mariadb:
    <<: *default-opts
    image: mariadb:11.2
    container_name: mariadb
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=nextflow@2025 # M·∫≠t kh·∫©u root MySQL
      - MYSQL_DATABASE=nextflow # T√™n c∆° s·ªü d·ªØ li·ªáu
      - MYSQL_USER=admin # T√†i kho·∫£n ng∆∞·ªùi d√πng
      - MYSQL_PASSWORD=nextflow@2025 # M·∫≠t kh·∫©u ng∆∞·ªùi d√πng
    volumes:
      - mariadb_data:/var/lib/mysql # L∆∞u tr·ªØ d·ªØ li·ªáu b·ªÅn v·ªØng
    ports:
      - "3306:3306" # C·ªïng MySQL/MariaDB

    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
  # WordPress - H·ªá th·ªëng qu·∫£n l√Ω n·ªôi dung (CMS) cho landing page
  wordpress:
    <<: *default-opts
    image: wordpress:6.8.1
    container_name: wordpress
    restart: always
    environment:
      - WORDPRESS_DB_HOST=mariadb # M√°y ch·ªß c∆° s·ªü d·ªØ li·ªáu
      - WORDPRESS_DB_NAME=nextflow # T√™n c∆° s·ªü d·ªØ li·ªáu
      - WORDPRESS_DB_USER=admin # T√†i kho·∫£n c∆° s·ªü d·ªØ li·ªáu
      - WORDPRESS_DB_PASSWORD=nextflow@2025 # M·∫≠t kh·∫©u c∆° s·ªü d·ªØ li·ªáu
      - WORDPRESS_TABLE_PREFIX=wp_ # Ti·ªÅn t·ªë b·∫£ng WordPress
    volumes:
      - wordpress_data:/var/www/html # D·ªØ li·ªáu WordPress
      - ./wordpress/themes:/var/www/html/wp-content/themes # Giao di·ªán
      - ./wordpress/plugins:/var/www/html/wp-content/plugins # Plugin
      - ./wordpress/uploads:/var/www/html/wp-content/uploads # T·ªáp t·∫£i l√™n
    ports:
      - "8080:80" # C·ªïng web WordPress
    depends_on:
      - mariadb

  # LANGFLOW - LOW-CODE AI WORKFLOW PLATFORM
  # ----------------------------------------------------------------------------
  # Platform low-code/no-code ƒë·ªÉ x√¢y d·ª±ng v√† tri·ªÉn khai AI workflows ph·ª©c t·∫°p
  # T√≠ch h·ª£p v·ªõi LangChain, OpenAI, v√† c√°c AI frameworks kh√°c
  langflow:
    <<: *default-opts
    image: langflowai/langflow:latest # S·ª≠ d·ª•ng phi√™n b·∫£n alpha stable
    container_name: langflow
    hostname: langflow # Hostname cho service discovery
    user: "0:0" # Run as root ƒë·ªÉ tr√°nh permission issues

    # === C·∫§U H√åNH ENVIRONMENT ===
    environment:
      # C·∫•u h√¨nh c∆° s·ªü d·ªØ li·ªáu - S·ª≠ d·ª•ng bi·∫øn t·ª´ .env
      - LANGFLOW_DATABASE_URL=${LANGFLOW_DATABASE_URL}

      # C·∫•u h√¨nh b·∫£o m·∫≠t - S·ª≠ d·ª•ng bi·∫øn t·ª´ .env
      - LANGFLOW_SECRET_KEY=${LANGFLOW_SECRET_KEY}
      - LANGFLOW_JWT_SECRET=${LANGFLOW_JWT_SECRET}
      - LANGFLOW_SUPERUSER_PASSWORD=${LANGFLOW_SUPERUSER_PASSWORD}

      # C·∫•u h√¨nh m√°y ch·ªß - S·ª≠ d·ª•ng bi·∫øn t·ª´ .env
      - LANGFLOW_HOST=${LANGFLOW_HOST}
      - LANGFLOW_PORT=${LANGFLOW_PORT}
      - LANGFLOW_WORKERS=${LANGFLOW_WORKERS}
      - LANGFLOW_ENV=${LANGFLOW_ENV}

      # C·∫•u h√¨nh cache - S·ª≠ d·ª•ng bi·∫øn t·ª´ .env
      - LANGFLOW_CACHE_TYPE=${LANGFLOW_CACHE_TYPE}
      - LANGFLOW_CACHE_SIZE=${LANGFLOW_CACHE_SIZE}
      - LANGFLOW_REDIS_URL= # Disable Redis cache

      # C·∫•u h√¨nh ghi log - S·ª≠ d·ª•ng bi·∫øn t·ª´ .env
      - LANGFLOW_LOG_LEVEL=${LANGFLOW_LOG_LEVEL}
      - LANGFLOW_LOG_FILE=${LANGFLOW_LOG_FILE}
      - LANGFLOW_DISABLE_LOGS=${LANGFLOW_DISABLE_LOGS}

      # C·∫•u h√¨nh t√≠nh nƒÉng - S·ª≠ d·ª•ng bi·∫øn t·ª´ .env
      - LANGFLOW_AUTO_LOGIN=${LANGFLOW_AUTO_LOGIN}
      - LANGFLOW_NEW_USER_IS_ACTIVE=${LANGFLOW_NEW_USER_IS_ACTIVE}
      - LANGFLOW_MAX_FILE_SIZE_UPLOAD=${LANGFLOW_MAX_FILE_SIZE_UPLOAD}

      # C·∫•u h√¨nh th∆∞ m·ª•c - S·ª≠ d·ª•ng bi·∫øn t·ª´ .env
      - LANGFLOW_CONFIG_DIR=${LANGFLOW_CONFIG_DIR}
      - LANGFLOW_CACHE_DIR=${LANGFLOW_CACHE_DIR}
      - LANGFLOW_STORE_ENVIRONMENT_VARIABLES=${LANGFLOW_STORE_ENVIRONMENT_VARIABLES}
      - LANGFLOW_SAVE_DB_IN_CONFIG_DIR=${LANGFLOW_SAVE_DB_IN_CONFIG_DIR}

    # === PORT MAPPING ===
    ports:
      - "7860:7860" # Langflow web interface

    # === VOLUME MOUNTS ===
    volumes:
      - langflow_data:/app/data # Persistent data storage
      - langflow_logs:/app/logs # Log files
      - ./langflow/flows:/app/flows # Custom flows directory
      - ./langflow/components:/app/components # Custom components
      - ./shared:/data/shared # Shared folder

    # === DEPENDENCIES ===
    depends_on:
      postgres:
        condition: service_healthy # ƒê·ª£i PostgreSQL s·∫µn s√†ng
      redis:
        condition: service_healthy # ƒê·ª£i Redis s·∫µn s√†ng

    # === NETWORK CONFIGURATION ===
    networks:
      - demo

    # === HOST MAPPING ƒë·ªÉ fix DNS issues ===
    extra_hosts:
      - "postgres:host-gateway" # Map postgres hostname to host
      - "redis:host-gateway" # Map redis hostname to host
      - "host.docker.internal:host-gateway" # Ensure host connectivity

    # === HEALTH CHECK ===
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7860/health" ]
      interval: 30s # Ki·ªÉm tra m·ªói 30 gi√¢y
      timeout: 10s # Timeout sau 10 gi√¢y
      retries: 3 # Th·ª≠ l·∫°i 3 l·∫ßn
      start_period: 60s # ƒê·ª£i 60 gi√¢y tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu check

    # === RESOURCE LIMITS ===
    deploy:
      resources:
        limits:
          cpus: '4' # T·ªëi ƒëa 4 CPU cores
          memory: 6G # T·ªëi ƒëa 6GB RAM
        reservations:
          cpus: '2' # ƒê·∫£m b·∫£o √≠t nh·∫•t 1 CPU
          memory: 4G # ƒê·∫£m b·∫£o √≠t nh·∫•t 2GB RAM

    # === LABELS FOR MONITORING ===
    labels:
      - "traefik.enable=true" # Enable Traefik routing
      - "service.group=ai" # Nh√≥m service AI
      - "service.type=frontend" # Lo·∫°i service frontend
      - "backup.enable=true" # Enable backup cho workflows

    # === PROFILE ===
    profiles: [ "langflow" ] # Ch·ªâ ch·∫°y khi s·ª≠ d·ª•ng profile ai ho·∫∑c langflow

  # GitLab CE - H·ªá th·ªëng qu·∫£n l√Ω m√£ ngu·ªìn v√† CI/CD (Continuous Integration/Continuous Deployment)
  gitlab:
    <<: *default-opts
    image: gitlab/gitlab-ce:16.11.10-ce.0
    container_name: gitlab
    hostname: gitlab # T√™n m√°y ch·ªß cho nh·∫≠n di·ªán n·ªôi b·ªô
    restart: unless-stopped
    env_file:
      - .env
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        # URL b√™n ngo√†i - R·∫•t quan tr·ªçng!
        external_url 'http://localhost:8088'; # URL ƒë·ªÉ truy c·∫≠p GitLab

        # T·∫Øt GitLab Kubernetes Agent Server (KAS) ƒë·ªÉ tr√°nh l·ªói 404 n·∫øu kh√¥ng s·ª≠ d·ª•ng
        gitlab_kas['enable'] = false;

        # C·∫•u h√¨nh t√†i kho·∫£n root (qu·∫£n tr·ªã vi√™n)
        gitlab_rails['initial_root_password'] = "nextflow@2025"

        # C·∫•u h√¨nh PostgreSQL (k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• 'postgres')
        postgresql['enable'] = false; # T·∫Øt PostgreSQL t√≠ch h·ª£p
        gitlab_rails['db_adapter'] = 'postgresql'; # Lo·∫°i c∆° s·ªü d·ªØ li·ªáu
        gitlab_rails['db_encoding'] = 'utf8'; # M√£ h√≥a k√Ω t·ª±
        gitlab_rails['db_host'] = 'postgres'; # T√™n d·ªãch v·ª• PostgreSQL
        gitlab_rails['db_port'] = 5432; # C·ªïng PostgreSQL
        gitlab_rails['db_username'] = '${POSTGRES_USER_GITLAB:-nextflow}'; # T√†i kho·∫£n k·∫øt n·ªëi DB
        gitlab_rails['db_password'] = '${POSTGRES_PASSWORD_GITLAB:-nextflow@2025}'; # M·∫≠t kh·∫©u k·∫øt n·ªëi DB
        gitlab_rails['db_database'] = 'gitlabhq_production'; # T√™n c∆° s·ªü d·ªØ li·ªáu GitLab

        # C·∫•u h√¨nh Redis (k·∫øt n·ªëi ƒë·∫øn d·ªãch v·ª• 'redis')
        redis['enable'] = false; # T·∫Øt Redis t√≠ch h·ª£p
        gitlab_rails['redis_host'] = 'redis'; # T√™n d·ªãch v·ª• Redis
        gitlab_rails['redis_port'] = 6379; # C·ªïng Redis
        gitlab_rails['redis_password'] = '${REDIS_PASSWORD:-nextflow@2025}'; # M·∫≠t kh·∫©u Redis

        # C·∫•u h√¨nh c·ªïng SSH
        gitlab_rails['gitlab_shell_ssh_port'] = 2222; # Ph·∫£i kh·ªõp v·ªõi port mapping

        # M√∫i gi·ªù
        gitlab_rails['time_zone'] = 'Asia/Ho_Chi_Minh'

        # Container Registry (Kho l∆∞u tr·ªØ Docker images)
        registry_external_url 'http://localhost:5050'; # URL truy c·∫≠p Registry
        gitlab_rails['registry_enabled'] = true; # B·∫≠t Container Registry
        # Nginx cho Registry (GitLab s·∫Ω t·ª± c·∫•u h√¨nh)
        registry_nginx['listen_port'] = 5050; # C·ªïng Nginx c·ªßa Registry

        # T·∫Øt Prometheus monitoring t√≠ch h·ª£p (n·∫øu s·ª≠ d·ª•ng h·ªá th·ªëng gi√°m s√°t ri√™ng)
        prometheus_monitoring['enable'] = false;

        # C·∫•u h√¨nh Email (QUAN TR·ªåNG - Thay th·∫ø b·∫±ng th√¥ng tin SMTP)
        gitlab_rails['smtp_enable'] = false; # B·∫≠t SMTP
        gitlab_rails['smtp_address'] = "smtp.gmail.com"; # M√°y ch·ªß SMTP
        gitlab_rails['smtp_port'] = 587; # C·ªïng SMTP
        gitlab_rails['smtp_user_name'] = "your_email@gmail.com"; # T√†i kho·∫£n email
        gitlab_rails['smtp_password'] = "your_app_password"; # M·∫≠t kh·∫©u ·ª©ng d·ª•ng
        gitlab_rails['smtp_domain'] = "smtp.gmail.com"; # Domain SMTP
        gitlab_rails['smtp_authentication'] = "login"; # Ph∆∞∆°ng th·ª©c x√°c th·ª±c
        gitlab_rails['smtp_enable_starttls_auto'] = true; # B·∫≠t STARTTLS t·ª± ƒë·ªông
        gitlab_rails['smtp_tls'] = false; # TLS tr·ª±c ti·∫øp (port 465)
        gitlab_rails['gitlab_email_from'] = 'your_email@gmail.com'; # Email g·ª≠i
        gitlab_rails['gitlab_email_display_name'] = 'GitLab NextFlow'; # T√™n hi·ªÉn th·ªã
        gitlab_rails['gitlab_email_reply_to'] = 'noreply@example.com'; # Email kh√¥ng tr·∫£ l·ªùi

        # C·∫•u h√¨nh sao l∆∞u
        gitlab_rails['backup_path'] = "/var/opt/gitlab/backups"; # ƒê∆∞·ªùng d·∫´n sao l∆∞u
        gitlab_rails['backup_keep_time'] = 604800; # Th·ªùi gian gi·ªØ sao l∆∞u (7 ng√†y)

        # T·ªëi ∆∞u hi·ªáu nƒÉng (ƒëi·ªÅu ch·ªânh theo t√†i nguy√™n m√°y ch·ªß)
        puma['worker_processes'] = 4; # S·ªë worker c·ªßa Puma (m√°y ch·ªß web)
        # sidekiq['concurrency'] = 10; # S·ªë lu·ªìng x·ª≠ l√Ω t√°c v·ª• n·ªÅn
        # Chia nh·ªè Sidekiq queues (n√¢ng cao):
        # sidekiq['queue_groups'] = [
        #   "*" # X·ª≠ l√Ω t·∫•t c·∫£ c√°c h√†ng ƒë·ª£i
        # ];
        # sidekiq['min_concurrency'] = 2; # S·ªë lu·ªìng t·ªëi thi·ªÉu
        # sidekiq['max_concurrency'] = 10; # S·ªë lu·ªìng t·ªëi ƒëa

        # C√†i ƒë·∫∑t b·∫£o m·∫≠t v√† t√≠nh nƒÉng m·∫∑c ƒë·ªãnh
        gitlab_rails['gitlab_default_projects_features_issues'] = true; # B·∫≠t Issues
        gitlab_rails['gitlab_default_projects_features_merge_requests'] = true; # B·∫≠t Merge Requests
        gitlab_rails['gitlab_default_projects_features_wiki'] = true; # B·∫≠t Wiki
        gitlab_rails['gitlab_default_projects_features_snippets'] = true; # B·∫≠t Snippets
        gitlab_rails['gitlab_default_projects_features_builds'] = true; # B·∫≠t CI/CD
        gitlab_rails['gitlab_default_projects_features_container_registry'] = true; # B·∫≠t Container Registry
    ports:
      - "8443:443"
      - "8088:80" # HTTP Web (Port host 8088 b·∫°n ƒë√£ d√πng)
      - "2222:22" # SSH (Port host 2222 b·∫°n ƒë√£ d√πng)
      - "5050:5050" # Container Registry (Port host 5050 b·∫°n ƒë√£ d√πng)
    volumes:
      # S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi nh∆∞ trong file c·ªßa b·∫°n
      - ./gitlab/config:/etc/gitlab
      - ./gitlab/logs:/var/log/gitlab
      - ./gitlab/data:/var/opt/gitlab
      - ./gitlab/backups:/var/opt/gitlab/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "/opt/gitlab/bin/gitlab-healthcheck", "--fail", "--max-time", "10" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 300s # TƒÉng th·ªùi gian ch·ªù GitLab kh·ªüi ƒë·ªông ho√†n to√†n
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '4'
          memory: 8G
    profiles: [ "gitlab" ]

  # ================================
  # STALWART MAIL SERVER
  # ================================
  stalwart-mail:
    image: stalwartlabs/mail-server:latest
    container_name: stalwart-mail
    restart: unless-stopped
    hostname: ${MAIL_HOSTNAME:-mail.localhost}
    environment:
      # C·∫•u h√¨nh c∆° b·∫£n
      - STALWART_HOSTNAME=${MAIL_HOSTNAME:-mail.localhost}
      - STALWART_ADMIN_USER=${MAIL_ADMIN_USER:-admin}
      - STALWART_ADMIN_PASSWORD=${MAIL_ADMIN_PASSWORD:-changeme123}

      # C·∫•u h√¨nh database
      - STALWART_DB_TYPE=postgresql
      - STALWART_DB_HOST=postgres
      - STALWART_DB_PORT=5432
      - STALWART_DB_NAME=${MAIL_DB_NAME:-stalwart_mail}
      - STALWART_DB_USER=${MAIL_DB_USER:-stalwart}
      - STALWART_DB_PASSWORD=${MAIL_DB_PASSWORD:-stalwart123}

      # C·∫•u h√¨nh SMTP
      - STALWART_SMTP_PORT=25
      - STALWART_SMTP_SUBMISSION_PORT=587
      - STALWART_SMTP_SUBMISSIONS_PORT=465

      # C·∫•u h√¨nh IMAP/POP3
      - STALWART_IMAP_PORT=143
      - STALWART_IMAPS_PORT=993
      - STALWART_POP3_PORT=110
      - STALWART_POP3S_PORT=995

      # C·∫•u h√¨nh b·∫£o m·∫≠t
      - STALWART_TLS_CERT_PATH=/etc/stalwart/certs/cert.pem
      - STALWART_TLS_KEY_PATH=/etc/stalwart/certs/key.pem
      - STALWART_DKIM_ENABLED=true
      - STALWART_SPF_ENABLED=true
      - STALWART_DMARC_ENABLED=true

      # C·∫•u h√¨nh ch·ªëng spam
      - STALWART_SPAM_FILTER_ENABLED=true
      - STALWART_ANTIVIRUS_ENABLED=true

      # C·∫•u h√¨nh logging
      - STALWART_LOG_LEVEL=${MAIL_LOG_LEVEL:-info}
      - STALWART_LOG_FORMAT=json
    ports:
      # SMTP Ports
      - "${MAIL_SMTP_PORT:-25}:25" # SMTP
      - "${MAIL_SUBMISSION_PORT:-587}:587" # SMTP Submission
      - "${MAIL_SUBMISSIONS_PORT:-465}:465" # SMTP Submissions (SSL)

      # IMAP Ports
      - "${MAIL_IMAP_PORT:-143}:143" # IMAP
      - "${MAIL_IMAPS_PORT:-993}:993" # IMAPS (SSL)

      # POP3 Ports
      - "${MAIL_POP3_PORT:-110}:110" # POP3
      - "${MAIL_POP3S_PORT:-995}:995" # POP3S (SSL)

      # Web Admin Interface
      - "${MAIL_ADMIN_PORT:-8080}:8080" # Web Admin

      # ManageSieve
      - "${MAIL_SIEVE_PORT:-4190}:4190" # ManageSieve
    volumes:
      # C·∫•u h√¨nh
      - stalwart_config:/etc/stalwart
      - stalwart_data:/var/lib/stalwart
      - stalwart_logs:/var/log/stalwart

      # SSL Certificates (n·∫øu c√≥)
      - ./stalwart/certs:/etc/stalwart/certs:ro

      # Custom configuration
      - ./stalwart/config:/etc/stalwart/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "stalwart-mail", "--config", "/etc/stalwart/stalwart-mail.toml", "--test" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 1G
    networks:
      - nextflow-network
    profiles: [ "mail" ]
