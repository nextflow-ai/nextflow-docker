#!/bin/bash
# ============================================================================
# GITLAB BACKUP SCRIPT
# ============================================================================
# M√¥ t·∫£: Script t·ª± ƒë·ªông backup GitLab data
# Ch·ª©c nƒÉng: Backup repositories, database, uploads, CI artifacts
# ============================================================================

set -e

# M√†u s·∫Øc cho log
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[BACKUP]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[BACKUP]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[BACKUP]${NC} $1"
}

log_error() {
    echo -e "${RED}[BACKUP]${NC} $1"
}

# C·∫•u h√¨nh backup
BACKUP_DIR="/var/opt/gitlab/backups"
BACKUP_KEEP_DAYS=${BACKUP_KEEP_DAYS:-7}
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# H√†m t·∫°o backup GitLab
create_gitlab_backup() {
    log_info "B·∫Øt ƒë·∫ßu backup GitLab..."
    
    # T·∫°o backup
    gitlab-backup create BACKUP=${TIMESTAMP} STRATEGY=copy
    
    if [ $? -eq 0 ]; then
        log_success "Backup GitLab th√†nh c√¥ng: ${TIMESTAMP}_gitlab_backup.tar"
    else
        log_error "Backup GitLab th·∫•t b·∫°i!"
        return 1
    fi
}

# H√†m backup c·∫•u h√¨nh GitLab
backup_gitlab_config() {
    log_info "Backup c·∫•u h√¨nh GitLab..."
    
    # T·∫°o th∆∞ m·ª•c backup config
    CONFIG_BACKUP_DIR="${BACKUP_DIR}/config_${TIMESTAMP}"
    mkdir -p "${CONFIG_BACKUP_DIR}"
    
    # Copy c√°c file c·∫•u h√¨nh quan tr·ªçng
    cp -r /etc/gitlab/gitlab.rb "${CONFIG_BACKUP_DIR}/" 2>/dev/null || log_warning "Kh√¥ng t√¨m th·∫•y gitlab.rb"
    cp -r /etc/gitlab/gitlab-secrets.json "${CONFIG_BACKUP_DIR}/" 2>/dev/null || log_warning "Kh√¥ng t√¨m th·∫•y gitlab-secrets.json"
    cp -r /etc/gitlab/ssl "${CONFIG_BACKUP_DIR}/" 2>/dev/null || log_warning "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c ssl"
    
    # T·∫°o archive
    cd "${BACKUP_DIR}"
    tar -czf "config_${TIMESTAMP}.tar.gz" "config_${TIMESTAMP}"
    rm -rf "config_${TIMESTAMP}"
    
    log_success "Backup c·∫•u h√¨nh th√†nh c√¥ng: config_${TIMESTAMP}.tar.gz"
}

# H√†m d·ªçn d·∫πp backup c≈©
cleanup_old_backups() {
    log_info "D·ªçn d·∫πp backup c≈© (gi·ªØ ${BACKUP_KEEP_DAYS} ng√†y)..."
    
    # X√≥a backup GitLab c≈©
    find "${BACKUP_DIR}" -name "*_gitlab_backup.tar" -mtime +${BACKUP_KEEP_DAYS} -delete
    
    # X√≥a backup config c≈©
    find "${BACKUP_DIR}" -name "config_*.tar.gz" -mtime +${BACKUP_KEEP_DAYS} -delete
    
    log_success "ƒê√£ d·ªçn d·∫πp backup c≈©"
}

# H√†m ki·ªÉm tra dung l∆∞·ª£ng
check_disk_space() {
    log_info "Ki·ªÉm tra dung l∆∞·ª£ng ƒëƒ©a..."
    
    # L·∫•y th√¥ng tin dung l∆∞·ª£ng
    AVAILABLE_SPACE=$(df "${BACKUP_DIR}" | awk 'NR==2 {print $4}')
    REQUIRED_SPACE=1048576  # 1GB in KB
    
    if [ "${AVAILABLE_SPACE}" -lt "${REQUIRED_SPACE}" ]; then
        log_warning "Dung l∆∞·ª£ng ƒëƒ©a th·∫•p! C√≥ s·∫µn: ${AVAILABLE_SPACE}KB, C·∫ßn: ${REQUIRED_SPACE}KB"
        return 1
    else
        log_success "Dung l∆∞·ª£ng ƒëƒ©a ƒë·ªß: ${AVAILABLE_SPACE}KB c√≥ s·∫µn"
        return 0
    fi
}

# H√†m g·ª≠i th√¥ng b√°o backup
send_notification() {
    local status=$1
    local message=$2
    
    log_info "G·ª≠i th√¥ng b√°o backup..."
    
    # Ghi log v√†o file
    echo "[$(date)] ${status}: ${message}" >> "${BACKUP_DIR}/backup.log"
    
    # C√≥ th·ªÉ th√™m webhook notification ·ªü ƒë√¢y
    # curl -X POST "${WEBHOOK_URL}" -d "{\"text\":\"GitLab Backup ${status}: ${message}\"}"
}

# H√†m verify backup
verify_backup() {
    local backup_file="${BACKUP_DIR}/${TIMESTAMP}_gitlab_backup.tar"
    
    log_info "Ki·ªÉm tra t√≠nh to√†n v·∫πn backup..."
    
    if [ -f "${backup_file}" ]; then
        # Ki·ªÉm tra file c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c
        if tar -tf "${backup_file}" > /dev/null 2>&1; then
            log_success "Backup file h·ª£p l·ªá"
            return 0
        else
            log_error "Backup file b·ªã l·ªói!"
            return 1
        fi
    else
        log_error "Kh√¥ng t√¨m th·∫•y backup file!"
        return 1
    fi
}

# Main function
main() {
    log_info "üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh backup GitLab NextFlow..."
    
    # Ki·ªÉm tra dung l∆∞·ª£ng
    if ! check_disk_space; then
        log_error "Kh√¥ng ƒë·ªß dung l∆∞·ª£ng ƒë·ªÉ backup!"
        send_notification "FAILED" "Kh√¥ng ƒë·ªß dung l∆∞·ª£ng ƒëƒ©a"
        exit 1
    fi
    
    # T·∫°o backup
    if create_gitlab_backup; then
        # Backup c·∫•u h√¨nh
        backup_gitlab_config
        
        # Verify backup
        if verify_backup; then
            # D·ªçn d·∫πp backup c≈©
            cleanup_old_backups
            
            log_success "üéâ Backup ho√†n th√†nh th√†nh c√¥ng!"
            send_notification "SUCCESS" "Backup completed: ${TIMESTAMP}"
        else
            log_error "‚ùå Backup verification failed!"
            send_notification "FAILED" "Backup verification failed: ${TIMESTAMP}"
            exit 1
        fi
    else
        log_error "‚ùå Backup th·∫•t b·∫°i!"
        send_notification "FAILED" "Backup creation failed: ${TIMESTAMP}"
        exit 1
    fi
}

# Ch·ªâ ch·∫°y n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    main "$@"
fi
